{
  "version": 3,
  "sources": ["../../../../node_modules/pixi-live2d-display/dist/index.es.js"],
  "sourcesContent": ["var __defProp = Object.defineProperty;\nvar __pow = Math.pow;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nimport { utils, Matrix, Texture, Transform, Point, ObservablePoint } from \"@pixi/core\";\nimport { Container } from \"@pixi/display\";\nconst LOGICAL_WIDTH = 2;\nconst LOGICAL_HEIGHT = 2;\nvar CubismConfig;\n((CubismConfig2) => {\n  CubismConfig2.supportMoreMaskDivisions = true;\n  CubismConfig2.setOpacityFromMotion = false;\n})(CubismConfig || (CubismConfig = {}));\nconst LOG_LEVEL_VERBOSE = 0;\nconst LOG_LEVEL_WARNING = 1;\nconst LOG_LEVEL_ERROR = 2;\nconst LOG_LEVEL_NONE = 999;\nconst config = {\n  LOG_LEVEL_VERBOSE,\n  LOG_LEVEL_WARNING,\n  LOG_LEVEL_ERROR,\n  LOG_LEVEL_NONE,\n  /**\n   * Global log level.\n   * @default config.LOG_LEVEL_WARNING\n   */\n  logLevel: LOG_LEVEL_WARNING,\n  /**\n   * Enabling sound for motions.\n   */\n  sound: true,\n  /**\n   * Deferring motion and corresponding sound until both are loaded.\n   */\n  motionSync: true,\n  /**\n   * Default fading duration for motions without such value specified.\n   */\n  motionFadingDuration: 500,\n  /**\n   * Default fading duration for idle motions without such value specified.\n   */\n  idleMotionFadingDuration: 2e3,\n  /**\n   * Default fading duration for expressions without such value specified.\n   */\n  expressionFadingDuration: 500,\n  /**\n   * If false, expression will be reset to default when playing non-idle motions.\n   */\n  preserveExpressionOnMotion: true,\n  cubism4: CubismConfig\n};\nconst VERSION = \"v0.5.0-beta\";\nconst logger = {\n  log(tag, ...messages) {\n    if (config.logLevel <= config.LOG_LEVEL_VERBOSE) {\n      console.log(`[${tag}]`, ...messages);\n    }\n  },\n  warn(tag, ...messages) {\n    if (config.logLevel <= config.LOG_LEVEL_WARNING) {\n      console.warn(`[${tag}]`, ...messages);\n    }\n  },\n  error(tag, ...messages) {\n    if (config.logLevel <= config.LOG_LEVEL_ERROR) {\n      console.error(`[${tag}]`, ...messages);\n    }\n  }\n};\nfunction clamp(num, lower, upper) {\n  return num < lower ? lower : num > upper ? upper : num;\n}\nfunction rand(min, max) {\n  return Math.random() * (max - min) + min;\n}\nfunction copyProperty(type, from, to, fromKey, toKey) {\n  const value = from[fromKey];\n  if (value !== null && typeof value === type) {\n    to[toKey] = value;\n  }\n}\nfunction copyArray(type, from, to, fromKey, toKey) {\n  const array = from[fromKey];\n  if (Array.isArray(array)) {\n    to[toKey] = array.filter((item) => item !== null && typeof item === type);\n  }\n}\nfunction applyMixins(derivedCtor, baseCtors) {\n  baseCtors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      if (name !== \"constructor\") {\n        Object.defineProperty(\n          derivedCtor.prototype,\n          name,\n          Object.getOwnPropertyDescriptor(baseCtor.prototype, name)\n        );\n      }\n    });\n  });\n}\nfunction folderName(url) {\n  let lastSlashIndex = url.lastIndexOf(\"/\");\n  if (lastSlashIndex != -1) {\n    url = url.slice(0, lastSlashIndex);\n  }\n  lastSlashIndex = url.lastIndexOf(\"/\");\n  if (lastSlashIndex !== -1) {\n    url = url.slice(lastSlashIndex + 1);\n  }\n  return url;\n}\nfunction remove(array, item) {\n  const index = array.indexOf(item);\n  if (index !== -1) {\n    array.splice(index, 1);\n  }\n}\nclass ExpressionManager extends utils.EventEmitter {\n  constructor(settings, options) {\n    super();\n    /**\n     * Tag for logging.\n     */\n    __publicField(this, \"tag\");\n    /**\n     * The ModelSettings reference.\n     */\n    __publicField(this, \"settings\");\n    /**\n     * The Expressions. The structure is the same as {@link definitions}, initially there's only\n     * an empty array, which means all expressions will be `undefined`. When an Expression has\n     * been loaded, it'll fill the place in which it should be; when it fails to load,\n     * the place will be filled with `null`.\n     */\n    __publicField(this, \"expressions\", []);\n    /**\n     * An empty Expression to reset all the expression parameters.\n     */\n    __publicField(this, \"defaultExpression\");\n    /**\n     * Current Expression. This will not be overwritten by {@link ExpressionManager#defaultExpression}.\n     */\n    __publicField(this, \"currentExpression\");\n    /**\n     * The pending Expression.\n     */\n    __publicField(this, \"reserveExpressionIndex\", -1);\n    /**\n     * Flags the instance has been destroyed.\n     */\n    __publicField(this, \"destroyed\", false);\n    this.settings = settings;\n    this.tag = `ExpressionManager(${settings.name})`;\n  }\n  /**\n   * Should be called in the constructor of derived class.\n   */\n  init() {\n    this.defaultExpression = this.createExpression({}, void 0);\n    this.currentExpression = this.defaultExpression;\n    this.stopAllExpressions();\n  }\n  /**\n   * Loads an Expression. Errors in this method will not be thrown,\n   * but be emitted with an \"expressionLoadError\" event.\n   * @param index - Index of the expression in definitions.\n   * @return Promise that resolves with the Expression, or with undefined if it can't be loaded.\n   * @emits {@link ExpressionManagerEvents.expressionLoaded}\n   * @emits {@link ExpressionManagerEvents.expressionLoadError}\n   */\n  loadExpression(index) {\n    return __async(this, null, function* () {\n      if (!this.definitions[index]) {\n        logger.warn(this.tag, `Undefined expression at [${index}]`);\n        return void 0;\n      }\n      if (this.expressions[index] === null) {\n        logger.warn(\n          this.tag,\n          `Cannot set expression at [${index}] because it's already failed in loading.`\n        );\n        return void 0;\n      }\n      if (this.expressions[index]) {\n        return this.expressions[index];\n      }\n      const expression = yield this._loadExpression(index);\n      this.expressions[index] = expression;\n      return expression;\n    });\n  }\n  /**\n   * Loads the Expression. Will be implemented by Live2DFactory in order to avoid circular dependency.\n   * @ignore\n   */\n  _loadExpression(index) {\n    throw new Error(\"Not implemented.\");\n  }\n  /**\n   * Sets a random Expression that differs from current one.\n   * @return Promise that resolves with true if succeeded, with false otherwise.\n   */\n  setRandomExpression() {\n    return __async(this, null, function* () {\n      if (this.definitions.length) {\n        const availableIndices = [];\n        for (let i = 0; i < this.definitions.length; i++) {\n          if (this.expressions[i] !== null && this.expressions[i] !== this.currentExpression && i !== this.reserveExpressionIndex) {\n            availableIndices.push(i);\n          }\n        }\n        if (availableIndices.length) {\n          const index = Math.floor(Math.random() * availableIndices.length);\n          return this.setExpression(index);\n        }\n      }\n      return false;\n    });\n  }\n  /**\n   * Resets model's expression using {@link ExpressionManager#defaultExpression}.\n   */\n  resetExpression() {\n    this._setExpression(this.defaultExpression);\n  }\n  /**\n   * Restores model's expression to {@link currentExpression}.\n   */\n  restoreExpression() {\n    this._setExpression(this.currentExpression);\n  }\n  /**\n   * Sets an Expression.\n   * @param index - Either the index, or the name of the expression.\n   * @return Promise that resolves with true if succeeded, with false otherwise.\n   */\n  setExpression(index) {\n    return __async(this, null, function* () {\n      if (typeof index !== \"number\") {\n        index = this.getExpressionIndex(index);\n      }\n      if (!(index > -1 && index < this.definitions.length)) {\n        return false;\n      }\n      if (index === this.expressions.indexOf(this.currentExpression)) {\n        return false;\n      }\n      this.reserveExpressionIndex = index;\n      const expression = yield this.loadExpression(index);\n      if (!expression || this.reserveExpressionIndex !== index) {\n        return false;\n      }\n      this.reserveExpressionIndex = -1;\n      this.currentExpression = expression;\n      this._setExpression(expression);\n      return true;\n    });\n  }\n  /**\n   * Updates parameters of the core model.\n   * @return True if the parameters are actually updated.\n   */\n  update(model, now) {\n    if (!this.isFinished()) {\n      return this.updateParameters(model, now);\n    }\n    return false;\n  }\n  /**\n   * Destroys the instance.\n   * @emits {@link ExpressionManagerEvents.destroy}\n   */\n  destroy() {\n    this.destroyed = true;\n    this.emit(\"destroy\");\n    const self = this;\n    self.definitions = void 0;\n    self.expressions = void 0;\n  }\n}\nconst EPSILON = 0.01;\nconst MAX_SPEED = 40 / 7.5;\nconst ACCELERATION_TIME = 1 / (0.15 * 1e3);\nclass FocusController {\n  constructor() {\n    /** The focus position. */\n    __publicField(this, \"targetX\", 0);\n    /** The focus position. */\n    __publicField(this, \"targetY\", 0);\n    /** Current position. */\n    __publicField(this, \"x\", 0);\n    /** Current position. */\n    __publicField(this, \"y\", 0);\n    /** Current velocity. */\n    __publicField(this, \"vx\", 0);\n    /** Current velocity. */\n    __publicField(this, \"vy\", 0);\n  }\n  /**\n   * Sets the focus position.\n   * @param x - X position in range `[-1, 1]`.\n   * @param y - Y position in range `[-1, 1]`.\n   * @param instant - Should the focus position be instantly applied.\n   */\n  focus(x, y, instant = false) {\n    this.targetX = clamp(x, -1, 1);\n    this.targetY = clamp(y, -1, 1);\n    if (instant) {\n      this.x = this.targetX;\n      this.y = this.targetY;\n    }\n  }\n  /**\n   * Updates the interpolation.\n   * @param dt - Delta time in milliseconds.\n   */\n  update(dt) {\n    const dx = this.targetX - this.x;\n    const dy = this.targetY - this.y;\n    if (Math.abs(dx) < EPSILON && Math.abs(dy) < EPSILON)\n      return;\n    const d = Math.sqrt(__pow(dx, 2) + __pow(dy, 2));\n    const maxSpeed = MAX_SPEED / (1e3 / dt);\n    let ax = maxSpeed * (dx / d) - this.vx;\n    let ay = maxSpeed * (dy / d) - this.vy;\n    const a = Math.sqrt(__pow(ax, 2) + __pow(ay, 2));\n    const maxA = maxSpeed * ACCELERATION_TIME * dt;\n    if (a > maxA) {\n      ax *= maxA / a;\n      ay *= maxA / a;\n    }\n    this.vx += ax;\n    this.vy += ay;\n    const v = Math.sqrt(__pow(this.vx, 2) + __pow(this.vy, 2));\n    const maxV = 0.5 * (Math.sqrt(__pow(maxA, 2) + 8 * maxA * d) - maxA);\n    if (v > maxV) {\n      this.vx *= maxV / v;\n      this.vy *= maxV / v;\n    }\n    this.x += this.vx;\n    this.y += this.vy;\n  }\n}\nclass ModelSettings {\n  /**\n   * @param json - The settings JSON object.\n   * @param json.url - The `url` field must be defined to specify the settings file's URL.\n   */\n  constructor(json) {\n    __publicField(this, \"json\");\n    /**\n     * The model's name, typically used for displaying or logging. By default it's inferred from\n     * the URL by taking the folder name (the second to last component). In Cubism 2 it'll be overwritten\n     * by the `name` field of settings JSON.\n     */\n    __publicField(this, \"name\");\n    /**\n     * URL of the model settings file, used to resolve paths of the resource files defined in settings.\n     * This typically ends with `.model.json` in Cubism 2 and `.model3.json` in Cubism 4.\n     */\n    __publicField(this, \"url\");\n    /**\n     * Relative path of the pose file.\n     */\n    __publicField(this, \"pose\");\n    /**\n     * Relative path of the physics file.\n     */\n    __publicField(this, \"physics\");\n    this.json = json;\n    const url = json.url;\n    if (typeof url !== \"string\") {\n      throw new TypeError(\"The `url` field in settings JSON must be defined as a string.\");\n    }\n    this.url = url;\n    this.name = folderName(this.url);\n  }\n  /**\n   * Resolves a relative path using the {@link url}. This is used to resolve the resource files\n   * defined in the settings.\n   * @param path - Relative path.\n   * @return Resolved path.\n   */\n  resolveURL(path) {\n    return utils.url.resolve(this.url, path);\n  }\n  /**\n   * Replaces the resource files by running each file through the `replacer`.\n   * @param replacer - Invoked with two arguments: `(file, path)`, where `file` is the file definition,\n   * and `path` is its property path in the ModelSettings instance. A string must be returned to be the replacement.\n   *\n   * ```js\n   * modelSettings.replaceFiles((file, path) => {\n   *     // file = \"foo.moc\", path = \"moc\"\n   *     // file = \"foo.png\", path = \"textures[0]\"\n   *     // file = \"foo.mtn\", path = \"motions.idle[0].file\"\n   *     // file = \"foo.motion3.json\", path = \"motions.idle[0].File\"\n   *\n   *     return \"bar/\" + file;\n   * });\n   * ```\n   */\n  replaceFiles(replacer) {\n    this.moc = replacer(this.moc, \"moc\");\n    if (this.pose !== void 0) {\n      this.pose = replacer(this.pose, \"pose\");\n    }\n    if (this.physics !== void 0) {\n      this.physics = replacer(this.physics, \"physics\");\n    }\n    for (let i = 0; i < this.textures.length; i++) {\n      this.textures[i] = replacer(this.textures[i], `textures[${i}]`);\n    }\n  }\n  /**\n   * Retrieves all resource files defined in the settings.\n   * @return A flat array of the paths of all resource files.\n   *\n   * ```js\n   * modelSettings.getDefinedFiles();\n   * // returns: [\"foo.moc\", \"foo.png\", ...]\n   * ```\n   */\n  getDefinedFiles() {\n    const files = [];\n    this.replaceFiles((file) => {\n      files.push(file);\n      return file;\n    });\n    return files;\n  }\n  /**\n   * Validates that the files defined in the settings exist in given files. Each file will be\n   * resolved by {@link resolveURL} before comparison.\n   * @param files - A flat array of file paths.\n   * @return All the files which are defined in the settings and also exist in given files,\n   * *including the optional files*.\n   * @throws Error if any *essential* file is defined in settings but not included in given files.\n   */\n  validateFiles(files) {\n    const assertFileExists = (expectedFile, shouldThrow) => {\n      const actualPath = this.resolveURL(expectedFile);\n      if (!files.includes(actualPath)) {\n        if (shouldThrow) {\n          throw new Error(\n            `File \"${expectedFile}\" is defined in settings, but doesn't exist in given files`\n          );\n        }\n        return false;\n      }\n      return true;\n    };\n    const essentialFiles = [this.moc, ...this.textures];\n    essentialFiles.forEach((texture) => assertFileExists(texture, true));\n    const definedFiles = this.getDefinedFiles();\n    return definedFiles.filter((file) => assertFileExists(file, false));\n  }\n}\nvar MotionPriority = /* @__PURE__ */ ((MotionPriority2) => {\n  MotionPriority2[MotionPriority2[\"NONE\"] = 0] = \"NONE\";\n  MotionPriority2[MotionPriority2[\"IDLE\"] = 1] = \"IDLE\";\n  MotionPriority2[MotionPriority2[\"NORMAL\"] = 2] = \"NORMAL\";\n  MotionPriority2[MotionPriority2[\"FORCE\"] = 3] = \"FORCE\";\n  return MotionPriority2;\n})(MotionPriority || {});\nclass MotionState {\n  constructor() {\n    /**\n     * Tag for logging.\n     */\n    __publicField(this, \"tag\");\n    /**\n     * When enabled, the states will be dumped to the logger when an exception occurs.\n     */\n    __publicField(this, \"debug\", false);\n    /**\n     * Priority of the current motion. Will be `MotionPriority.NONE` if there's no playing motion.\n     */\n    __publicField(this, \"currentPriority\", 0);\n    /**\n     * Priority of the reserved motion, which is still in loading and will be played once loaded.\n     * Will be `MotionPriority.NONE` if there's no reserved motion.\n     */\n    __publicField(this, \"reservePriority\", 0);\n    /**\n     * Group of current motion.\n     */\n    __publicField(this, \"currentGroup\");\n    /**\n     * Index of current motion in its group.\n     */\n    __publicField(this, \"currentIndex\");\n    /**\n     * Group of the reserved motion.\n     */\n    __publicField(this, \"reservedGroup\");\n    /**\n     * Index of the reserved motion in its group.\n     */\n    __publicField(this, \"reservedIndex\");\n    /**\n     * Group of the reserved idle motion.\n     */\n    __publicField(this, \"reservedIdleGroup\");\n    /**\n     * Index of the reserved idle motion in its group.\n     */\n    __publicField(this, \"reservedIdleIndex\");\n  }\n  /**\n   * Reserves the playback for a motion.\n   * @param group - The motion group.\n   * @param index - Index in the motion group.\n   * @param priority - The priority to be applied.\n   * @return True if the reserving has succeeded.\n   */\n  reserve(group, index, priority) {\n    if (priority <= 0) {\n      logger.log(this.tag, `Cannot start a motion with MotionPriority.NONE.`);\n      return false;\n    }\n    if (group === this.currentGroup && index === this.currentIndex) {\n      logger.log(this.tag, `Motion is already playing.`, this.dump(group, index));\n      return false;\n    }\n    if (group === this.reservedGroup && index === this.reservedIndex || group === this.reservedIdleGroup && index === this.reservedIdleIndex) {\n      logger.log(this.tag, `Motion is already reserved.`, this.dump(group, index));\n      return false;\n    }\n    if (priority === 1) {\n      if (this.currentPriority !== 0) {\n        logger.log(\n          this.tag,\n          `Cannot start idle motion because another motion is playing.`,\n          this.dump(group, index)\n        );\n        return false;\n      }\n      if (this.reservedIdleGroup !== void 0) {\n        logger.log(\n          this.tag,\n          `Cannot start idle motion because another idle motion has reserved.`,\n          this.dump(group, index)\n        );\n        return false;\n      }\n      this.setReservedIdle(group, index);\n    } else {\n      if (priority < 3) {\n        if (priority <= this.currentPriority) {\n          logger.log(\n            this.tag,\n            \"Cannot start motion because another motion is playing as an equivalent or higher priority.\",\n            this.dump(group, index)\n          );\n          return false;\n        }\n        if (priority <= this.reservePriority) {\n          logger.log(\n            this.tag,\n            \"Cannot start motion because another motion has reserved as an equivalent or higher priority.\",\n            this.dump(group, index)\n          );\n          return false;\n        }\n      }\n      this.setReserved(group, index, priority);\n    }\n    return true;\n  }\n  /**\n   * Requests the playback for a motion.\n   * @param motion - The Motion, can be undefined.\n   * @param group - The motion group.\n   * @param index - Index in the motion group.\n   * @param priority - The priority to be applied.\n   * @return True if the request has been approved, i.e. the motion is allowed to play.\n   */\n  start(motion, group, index, priority) {\n    if (priority === 1) {\n      this.setReservedIdle(void 0, void 0);\n      if (this.currentPriority !== 0) {\n        logger.log(\n          this.tag,\n          \"Cannot start idle motion because another motion is playing.\",\n          this.dump(group, index)\n        );\n        return false;\n      }\n    } else {\n      if (group !== this.reservedGroup || index !== this.reservedIndex) {\n        logger.log(\n          this.tag,\n          \"Cannot start motion because another motion has taken the place.\",\n          this.dump(group, index)\n        );\n        return false;\n      }\n      this.setReserved(\n        void 0,\n        void 0,\n        0\n        /* NONE */\n      );\n    }\n    if (!motion) {\n      return false;\n    }\n    this.setCurrent(group, index, priority);\n    return true;\n  }\n  /**\n   * Notifies the motion playback has finished.\n   */\n  complete() {\n    this.setCurrent(\n      void 0,\n      void 0,\n      0\n      /* NONE */\n    );\n  }\n  /**\n   * Sets the current motion.\n   */\n  setCurrent(group, index, priority) {\n    this.currentPriority = priority;\n    this.currentGroup = group;\n    this.currentIndex = index;\n  }\n  /**\n   * Sets the reserved motion.\n   */\n  setReserved(group, index, priority) {\n    this.reservePriority = priority;\n    this.reservedGroup = group;\n    this.reservedIndex = index;\n  }\n  /**\n   * Sets the reserved idle motion.\n   */\n  setReservedIdle(group, index) {\n    this.reservedIdleGroup = group;\n    this.reservedIdleIndex = index;\n  }\n  /**\n   * Checks if a Motion is currently playing or has reserved.\n   * @return True if active.\n   */\n  isActive(group, index) {\n    return group === this.currentGroup && index === this.currentIndex || group === this.reservedGroup && index === this.reservedIndex || group === this.reservedIdleGroup && index === this.reservedIdleIndex;\n  }\n  /**\n   * Resets the state.\n   */\n  reset() {\n    this.setCurrent(\n      void 0,\n      void 0,\n      0\n      /* NONE */\n    );\n    this.setReserved(\n      void 0,\n      void 0,\n      0\n      /* NONE */\n    );\n    this.setReservedIdle(void 0, void 0);\n  }\n  /**\n   * Checks if an idle motion should be requests to play.\n   */\n  shouldRequestIdleMotion() {\n    return this.currentGroup === void 0 && this.reservedIdleGroup === void 0;\n  }\n  /**\n   * Checks if the model's expression should be overridden by the motion.\n   */\n  shouldOverrideExpression() {\n    return !config.preserveExpressionOnMotion && this.currentPriority > 1;\n  }\n  /**\n   * Dumps the state for debugging.\n   */\n  dump(requestedGroup, requestedIndex) {\n    if (this.debug) {\n      const keys = [\n        \"currentPriority\",\n        \"reservePriority\",\n        \"currentGroup\",\n        \"currentIndex\",\n        \"reservedGroup\",\n        \"reservedIndex\",\n        \"reservedIdleGroup\",\n        \"reservedIdleIndex\"\n      ];\n      return `\n<Requested> group = \"${requestedGroup}\", index = ${requestedIndex}\n` + keys.map((key) => \"[\" + key + \"] \" + this[key]).join(\"\\n\");\n    }\n    return \"\";\n  }\n}\nconst TAG$2 = \"SoundManager\";\nconst VOLUME = 0.5;\nclass SoundManager {\n  /**\n   * Global volume that applies to all the sounds.\n   */\n  static get volume() {\n    return this._volume;\n  }\n  static set volume(value) {\n    this._volume = (value > 1 ? 1 : value < 0 ? 0 : value) || 0;\n    this.audios.forEach((audio) => audio.volume = this._volume);\n  }\n  // TODO: return an ID?\n  /**\n   * Creates an audio element and adds it to the {@link audios}.\n   * @param file - URL of the sound file.\n   * @param onFinish - Callback invoked when the playback has finished.\n   * @param onError - Callback invoked when error occurs.\n   * @return Created audio element.\n   */\n  static add(file, onFinish, onError) {\n    const audio = new Audio(file);\n    audio.volume = this._volume;\n    audio.preload = \"auto\";\n    audio.addEventListener(\"ended\", () => {\n      this.dispose(audio);\n      onFinish == null ? void 0 : onFinish();\n    });\n    audio.addEventListener(\"error\", (e) => {\n      this.dispose(audio);\n      logger.warn(TAG$2, `Error occurred on \"${file}\"`, e.error);\n      onError == null ? void 0 : onError(e.error);\n    });\n    this.audios.push(audio);\n    return audio;\n  }\n  /**\n   * Plays the sound.\n   * @param audio - An audio element.\n   * @return Promise that resolves when the audio is ready to play, rejects when error occurs.\n   */\n  static play(audio) {\n    return new Promise((resolve, reject) => {\n      var _a;\n      (_a = audio.play()) == null ? void 0 : _a.catch((e) => {\n        audio.dispatchEvent(new ErrorEvent(\"error\", { error: e }));\n        reject(e);\n      });\n      if (audio.readyState === audio.HAVE_ENOUGH_DATA) {\n        resolve();\n      } else {\n        audio.addEventListener(\"canplaythrough\", resolve);\n      }\n    });\n  }\n  /**\n   * Disposes an audio element and removes it from {@link audios}.\n   * @param audio - An audio element.\n   */\n  static dispose(audio) {\n    audio.pause();\n    audio.removeAttribute(\"src\");\n    remove(this.audios, audio);\n  }\n  /**\n   * Destroys all managed audios.\n   */\n  static destroy() {\n    for (let i = this.audios.length - 1; i >= 0; i--) {\n      this.dispose(this.audios[i]);\n    }\n  }\n}\n/**\n * Audio elements playing or pending to play. Finished audios will be removed automatically.\n */\n__publicField(SoundManager, \"audios\", []);\n__publicField(SoundManager, \"_volume\", VOLUME);\nvar MotionPreloadStrategy = /* @__PURE__ */ ((MotionPreloadStrategy2) => {\n  MotionPreloadStrategy2[\"ALL\"] = \"ALL\";\n  MotionPreloadStrategy2[\"IDLE\"] = \"IDLE\";\n  MotionPreloadStrategy2[\"NONE\"] = \"NONE\";\n  return MotionPreloadStrategy2;\n})(MotionPreloadStrategy || {});\nclass MotionManager extends utils.EventEmitter {\n  constructor(settings, options) {\n    super();\n    /**\n     * Tag for logging.\n     */\n    __publicField(this, \"tag\");\n    /**\n     * The ModelSettings reference.\n     */\n    __publicField(this, \"settings\");\n    /**\n     * The Motions. The structure is the same as {@link definitions}, initially each group contains\n     * an empty array, which means all motions will be `undefined`. When a Motion has been loaded,\n     * it'll fill the place in which it should be; when it fails to load, the place will be filled\n     * with `null`.\n     */\n    __publicField(this, \"motionGroups\", {});\n    /**\n     * Maintains the state of this MotionManager.\n     */\n    __publicField(this, \"state\", new MotionState());\n    /**\n     * Audio element of the current motion if a sound file is defined with it.\n     */\n    __publicField(this, \"currentAudio\");\n    /**\n     * Flags there's a motion playing.\n     */\n    __publicField(this, \"playing\", false);\n    /**\n     * Flags the instances has been destroyed.\n     */\n    __publicField(this, \"destroyed\", false);\n    this.settings = settings;\n    this.tag = `MotionManager(${settings.name})`;\n    this.state.tag = this.tag;\n  }\n  /**\n   * Should be called in the constructor of derived class.\n   */\n  init(options) {\n    if (options == null ? void 0 : options.idleMotionGroup) {\n      this.groups.idle = options.idleMotionGroup;\n    }\n    this.setupMotions(options);\n    this.stopAllMotions();\n  }\n  /**\n   * Sets up motions from the definitions, and preloads them according to the preload strategy.\n   */\n  setupMotions(options) {\n    for (const group of Object.keys(this.definitions)) {\n      this.motionGroups[group] = [];\n    }\n    let groups;\n    switch (options == null ? void 0 : options.motionPreload) {\n      case \"NONE\":\n        return;\n      case \"ALL\":\n        groups = Object.keys(this.definitions);\n        break;\n      case \"IDLE\":\n      default:\n        groups = [this.groups.idle];\n        break;\n    }\n    for (const group of groups) {\n      if (this.definitions[group]) {\n        for (let i = 0; i < this.definitions[group].length; i++) {\n          this.loadMotion(group, i).then();\n        }\n      }\n    }\n  }\n  /**\n   * Loads a Motion in a motion group. Errors in this method will not be thrown,\n   * but be emitted with a \"motionLoadError\" event.\n   * @param group - The motion group.\n   * @param index - Index in the motion group.\n   * @return Promise that resolves with the Motion, or with undefined if it can't be loaded.\n   * @emits {@link MotionManagerEvents.motionLoaded}\n   * @emits {@link MotionManagerEvents.motionLoadError}\n   */\n  loadMotion(group, index) {\n    return __async(this, null, function* () {\n      var _a;\n      if (!((_a = this.definitions[group]) == null ? void 0 : _a[index])) {\n        logger.warn(this.tag, `Undefined motion at \"${group}\"[${index}]`);\n        return void 0;\n      }\n      if (this.motionGroups[group][index] === null) {\n        logger.warn(\n          this.tag,\n          `Cannot start motion at \"${group}\"[${index}] because it's already failed in loading.`\n        );\n        return void 0;\n      }\n      if (this.motionGroups[group][index]) {\n        return this.motionGroups[group][index];\n      }\n      const motion = yield this._loadMotion(group, index);\n      if (this.destroyed) {\n        return;\n      }\n      this.motionGroups[group][index] = motion != null ? motion : null;\n      return motion;\n    });\n  }\n  /**\n   * Loads the Motion. Will be implemented by Live2DFactory in order to avoid circular dependency.\n   * @ignore\n   */\n  _loadMotion(group, index) {\n    throw new Error(\"Not implemented.\");\n  }\n  /**\n   * Starts a motion as given priority.\n   * @param group - The motion group.\n   * @param index - Index in the motion group.\n   * @param priority - The priority to be applied.\n   * @return Promise that resolves with true if the motion is successfully started, with false otherwise.\n   */\n  startMotion(_0, _1) {\n    return __async(this, arguments, function* (group, index, priority = MotionPriority.NORMAL) {\n      var _a;\n      if (!this.state.reserve(group, index, priority)) {\n        return false;\n      }\n      const definition = (_a = this.definitions[group]) == null ? void 0 : _a[index];\n      if (!definition) {\n        return false;\n      }\n      if (this.currentAudio) {\n        SoundManager.dispose(this.currentAudio);\n      }\n      let audio;\n      if (config.sound) {\n        const soundURL = this.getSoundFile(definition);\n        if (soundURL) {\n          try {\n            audio = SoundManager.add(\n              this.settings.resolveURL(soundURL),\n              () => this.currentAudio = void 0,\n              () => this.currentAudio = void 0\n            );\n            this.currentAudio = audio;\n          } catch (e) {\n            logger.warn(this.tag, \"Failed to create audio\", soundURL, e);\n          }\n        }\n      }\n      const motion = yield this.loadMotion(group, index);\n      if (audio) {\n        const readyToPlay = SoundManager.play(audio).catch(\n          (e) => logger.warn(this.tag, \"Failed to play audio\", audio.src, e)\n        );\n        if (config.motionSync) {\n          yield readyToPlay;\n        }\n      }\n      if (!this.state.start(motion, group, index, priority)) {\n        if (audio) {\n          SoundManager.dispose(audio);\n          this.currentAudio = void 0;\n        }\n        return false;\n      }\n      logger.log(this.tag, \"Start motion:\", this.getMotionName(definition));\n      this.emit(\"motionStart\", group, index, audio);\n      if (this.state.shouldOverrideExpression()) {\n        this.expressionManager && this.expressionManager.resetExpression();\n      }\n      this.playing = true;\n      this._startMotion(motion);\n      return true;\n    });\n  }\n  /**\n   * Starts a random Motion as given priority.\n   * @param group - The motion group.\n   * @param priority - The priority to be applied.\n   * @return Promise that resolves with true if the motion is successfully started, with false otherwise.\n   */\n  startRandomMotion(group, priority) {\n    return __async(this, null, function* () {\n      const groupDefs = this.definitions[group];\n      if (groupDefs == null ? void 0 : groupDefs.length) {\n        const availableIndices = [];\n        for (let i = 0; i < groupDefs.length; i++) {\n          if (this.motionGroups[group][i] !== null && !this.state.isActive(group, i)) {\n            availableIndices.push(i);\n          }\n        }\n        if (availableIndices.length) {\n          const index = Math.floor(Math.random() * availableIndices.length);\n          return this.startMotion(group, availableIndices[index], priority);\n        }\n      }\n      return false;\n    });\n  }\n  /**\n   * Stops all playing motions as well as the sound.\n   */\n  stopAllMotions() {\n    this._stopAllMotions();\n    this.state.reset();\n    if (this.currentAudio) {\n      SoundManager.dispose(this.currentAudio);\n      this.currentAudio = void 0;\n    }\n  }\n  /**\n   * Updates parameters of the core model.\n   * @param model - The core model.\n   * @param now - Current time in milliseconds.\n   * @return True if the parameters have been actually updated.\n   */\n  update(model, now) {\n    var _a;\n    if (this.isFinished()) {\n      if (this.playing) {\n        this.playing = false;\n        this.emit(\"motionFinish\");\n      }\n      if (this.state.shouldOverrideExpression()) {\n        (_a = this.expressionManager) == null ? void 0 : _a.restoreExpression();\n      }\n      this.state.complete();\n      if (this.state.shouldRequestIdleMotion()) {\n        this.startRandomMotion(this.groups.idle, MotionPriority.IDLE);\n      }\n    }\n    return this.updateParameters(model, now);\n  }\n  /**\n   * Destroys the instance.\n   * @emits {@link MotionManagerEvents.destroy}\n   */\n  destroy() {\n    var _a;\n    this.destroyed = true;\n    this.emit(\"destroy\");\n    this.stopAllMotions();\n    (_a = this.expressionManager) == null ? void 0 : _a.destroy();\n    const self = this;\n    self.definitions = void 0;\n    self.motionGroups = void 0;\n  }\n}\nconst tempBounds = { x: 0, y: 0, width: 0, height: 0 };\nclass InternalModel extends utils.EventEmitter {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"focusController\", new FocusController());\n    __publicField(this, \"pose\");\n    __publicField(this, \"physics\");\n    /**\n     * Original canvas width of the model. Note this doesn't represent the model's real size,\n     * as the model can overflow from its canvas.\n     */\n    __publicField(this, \"originalWidth\", 0);\n    /**\n     * Original canvas height of the model. Note this doesn't represent the model's real size,\n     * as the model can overflow from its canvas.\n     */\n    __publicField(this, \"originalHeight\", 0);\n    /**\n     * Canvas width of the model, scaled by the `width` of the model's layout.\n     */\n    __publicField(this, \"width\", 0);\n    /**\n     * Canvas height of the model, scaled by the `height` of the model's layout.\n     */\n    __publicField(this, \"height\", 0);\n    /**\n     * Local transformation, calculated from the model's layout.\n     */\n    __publicField(this, \"localTransform\", new Matrix());\n    /**\n     * The final matrix to draw the model.\n     */\n    __publicField(this, \"drawingMatrix\", new Matrix());\n    // TODO: change structure\n    /**\n     * The hit area definitions, keyed by their names.\n     */\n    __publicField(this, \"hitAreas\", {});\n    /**\n     * Flags whether `gl.UNPACK_FLIP_Y_WEBGL` should be enabled when binding the textures.\n     */\n    __publicField(this, \"textureFlipY\", false);\n    /**\n     * WebGL viewport when drawing the model. The format is `[x, y, width, height]`.\n     */\n    __publicField(this, \"viewport\", [0, 0, 0, 0]);\n    /**\n     * Flags this instance has been destroyed.\n     */\n    __publicField(this, \"destroyed\", false);\n  }\n  /**\n   * Should be called in the constructor of derived class.\n   */\n  init() {\n    this.setupLayout();\n    this.setupHitAreas();\n  }\n  /**\n   * Sets up the model's size and local transform by the model's layout.\n   */\n  setupLayout() {\n    const self = this;\n    const size = this.getSize();\n    self.originalWidth = size[0];\n    self.originalHeight = size[1];\n    const layout = Object.assign(\n      {\n        width: LOGICAL_WIDTH,\n        height: LOGICAL_HEIGHT\n      },\n      this.getLayout()\n    );\n    this.localTransform.scale(layout.width / LOGICAL_WIDTH, layout.height / LOGICAL_HEIGHT);\n    self.width = this.originalWidth * this.localTransform.a;\n    self.height = this.originalHeight * this.localTransform.d;\n    const offsetX = layout.x !== void 0 && layout.x - layout.width / 2 || layout.centerX !== void 0 && layout.centerX || layout.left !== void 0 && layout.left - layout.width / 2 || layout.right !== void 0 && layout.right + layout.width / 2 || 0;\n    const offsetY = layout.y !== void 0 && layout.y - layout.height / 2 || layout.centerY !== void 0 && layout.centerY || layout.top !== void 0 && layout.top - layout.height / 2 || layout.bottom !== void 0 && layout.bottom + layout.height / 2 || 0;\n    this.localTransform.translate(this.width * offsetX, -this.height * offsetY);\n  }\n  /**\n   * Sets up the hit areas by their definitions in settings.\n   */\n  setupHitAreas() {\n    const definitions = this.getHitAreaDefs().filter((hitArea) => hitArea.index >= 0);\n    for (const def of definitions) {\n      this.hitAreas[def.name] = def;\n    }\n  }\n  /**\n   * Hit-test on the model.\n   * @param x - Position in model canvas.\n   * @param y - Position in model canvas.\n   * @return The names of the *hit* hit areas. Can be empty if none is hit.\n   */\n  hitTest(x, y) {\n    return Object.keys(this.hitAreas).filter((hitAreaName) => this.isHit(hitAreaName, x, y));\n  }\n  /**\n   * Hit-test for a single hit area.\n   * @param hitAreaName - The hit area's name.\n   * @param x - Position in model canvas.\n   * @param y - Position in model canvas.\n   * @return True if hit.\n   */\n  isHit(hitAreaName, x, y) {\n    if (!this.hitAreas[hitAreaName]) {\n      return false;\n    }\n    const drawIndex = this.hitAreas[hitAreaName].index;\n    const bounds = this.getDrawableBounds(drawIndex, tempBounds);\n    return bounds.x <= x && x <= bounds.x + bounds.width && bounds.y <= y && y <= bounds.y + bounds.height;\n  }\n  /**\n   * Gets a drawable's bounds.\n   * @param index - Index of the drawable.\n   * @param bounds - Object to store the output values.\n   * @return The bounds in model canvas space.\n   */\n  getDrawableBounds(index, bounds) {\n    const vertices = this.getDrawableVertices(index);\n    let left = vertices[0];\n    let right = vertices[0];\n    let top = vertices[1];\n    let bottom = vertices[1];\n    for (let i = 0; i < vertices.length; i += 2) {\n      const vx = vertices[i];\n      const vy = vertices[i + 1];\n      left = Math.min(vx, left);\n      right = Math.max(vx, right);\n      top = Math.min(vy, top);\n      bottom = Math.max(vy, bottom);\n    }\n    bounds != null ? bounds : bounds = {};\n    bounds.x = left;\n    bounds.y = top;\n    bounds.width = right - left;\n    bounds.height = bottom - top;\n    return bounds;\n  }\n  /**\n   * Updates the model's transform.\n   * @param transform - The world transform.\n   */\n  updateTransform(transform) {\n    this.drawingMatrix.copyFrom(transform).append(this.localTransform);\n  }\n  /**\n   * Updates the model's parameters.\n   * @param dt - Elapsed time in milliseconds from last frame.\n   * @param now - Current time in milliseconds.\n   */\n  update(dt, now) {\n    this.focusController.update(dt);\n  }\n  /**\n   * Destroys the model and all related resources.\n   * @emits {@link InternalModelEvents.destroy | destroy}\n   */\n  destroy() {\n    this.destroyed = true;\n    this.emit(\"destroy\");\n    this.motionManager.destroy();\n    this.motionManager = void 0;\n  }\n}\nconst TAG$1 = \"XHRLoader\";\nclass NetworkError extends Error {\n  constructor(message, url, status, aborted = false) {\n    super(message);\n    this.url = url;\n    this.status = status;\n    this.aborted = aborted;\n  }\n}\nconst _XHRLoader = class _XHRLoader {\n  /**\n   * Creates a managed XHR.\n   * @param target - If provided, the XHR will be canceled when receiving an \"destroy\" event from the target.\n   * @param url - The URL.\n   * @param type - The XHR response type.\n   * @param onload - Load listener.\n   * @param onerror - Error handler.\n   */\n  static createXHR(target, url, type, onload, onerror) {\n    const xhr = new XMLHttpRequest();\n    _XHRLoader.allXhrSet.add(xhr);\n    if (target) {\n      let xhrSet = _XHRLoader.xhrMap.get(target);\n      if (!xhrSet) {\n        xhrSet = /* @__PURE__ */ new Set([xhr]);\n        _XHRLoader.xhrMap.set(target, xhrSet);\n      } else {\n        xhrSet.add(xhr);\n      }\n      if (!target.listeners(\"destroy\").includes(_XHRLoader.cancelXHRs)) {\n        target.once(\"destroy\", _XHRLoader.cancelXHRs);\n      }\n    }\n    xhr.open(\"GET\", url);\n    xhr.responseType = type;\n    xhr.onload = () => {\n      if ((xhr.status === 200 || xhr.status === 0) && xhr.response) {\n        onload(xhr.response);\n      } else {\n        xhr.onerror();\n      }\n    };\n    xhr.onerror = () => {\n      logger.warn(\n        TAG$1,\n        `Failed to load resource as ${xhr.responseType} (Status ${xhr.status}): ${url}`\n      );\n      onerror(new NetworkError(\"Network error.\", url, xhr.status));\n    };\n    xhr.onabort = () => onerror(new NetworkError(\"Aborted.\", url, xhr.status, true));\n    xhr.onloadend = () => {\n      var _a;\n      _XHRLoader.allXhrSet.delete(xhr);\n      if (target) {\n        (_a = _XHRLoader.xhrMap.get(target)) == null ? void 0 : _a.delete(xhr);\n      }\n    };\n    return xhr;\n  }\n  /**\n   * Cancels all XHRs related to this target.\n   */\n  static cancelXHRs() {\n    var _a;\n    (_a = _XHRLoader.xhrMap.get(this)) == null ? void 0 : _a.forEach((xhr) => {\n      xhr.abort();\n      _XHRLoader.allXhrSet.delete(xhr);\n    });\n    _XHRLoader.xhrMap.delete(this);\n  }\n  /**\n   * Release all XHRs.\n   */\n  static release() {\n    _XHRLoader.allXhrSet.forEach((xhr) => xhr.abort());\n    _XHRLoader.allXhrSet.clear();\n    _XHRLoader.xhrMap = /* @__PURE__ */ new WeakMap();\n  }\n};\n/**\n * All the created XHRs, keyed by their owners respectively.\n */\n__publicField(_XHRLoader, \"xhrMap\", /* @__PURE__ */ new WeakMap());\n/**\n * All the created XHRs as a flat array.\n */\n__publicField(_XHRLoader, \"allXhrSet\", /* @__PURE__ */ new Set());\n/**\n * Middleware for Live2DLoader.\n */\n__publicField(_XHRLoader, \"loader\", (context, next) => {\n  return new Promise((resolve, reject) => {\n    const xhr = _XHRLoader.createXHR(\n      context.target,\n      context.settings ? context.settings.resolveURL(context.url) : context.url,\n      context.type,\n      (data) => {\n        context.result = data;\n        resolve();\n      },\n      reject\n    );\n    xhr.send();\n  });\n});\nlet XHRLoader = _XHRLoader;\nfunction runMiddlewares(middleware, context) {\n  let index = -1;\n  return dispatch(0);\n  function dispatch(i, err) {\n    if (err)\n      return Promise.reject(err);\n    if (i <= index)\n      return Promise.reject(new Error(\"next() called multiple times\"));\n    index = i;\n    const fn = middleware[i];\n    if (!fn)\n      return Promise.resolve();\n    try {\n      return Promise.resolve(fn(context, dispatch.bind(null, i + 1)));\n    } catch (err2) {\n      return Promise.reject(err2);\n    }\n  }\n}\nclass Live2DLoader {\n  /**\n   * Loads a resource.\n   * @return Promise that resolves with the loaded data in a format that's consistent with the specified `type`.\n   */\n  static load(context) {\n    return runMiddlewares(this.middlewares, context).then(() => context.result);\n  }\n}\n__publicField(Live2DLoader, \"middlewares\", [XHRLoader.loader]);\nfunction createTexture(url, options = {}) {\n  var _a;\n  const textureOptions = { resourceOptions: { crossorigin: options.crossOrigin } };\n  if (Texture.fromURL) {\n    return Texture.fromURL(url, textureOptions).catch((e) => {\n      if (e instanceof Error) {\n        throw e;\n      }\n      const err = new Error(\"Texture loading error\");\n      err.event = e;\n      throw err;\n    });\n  }\n  textureOptions.resourceOptions.autoLoad = false;\n  const texture = Texture.from(url, textureOptions);\n  if (texture.baseTexture.valid) {\n    return Promise.resolve(texture);\n  }\n  const resource = texture.baseTexture.resource;\n  (_a = resource._live2d_load) != null ? _a : resource._live2d_load = new Promise((resolve, reject) => {\n    const errorHandler = (event) => {\n      resource.source.removeEventListener(\"error\", errorHandler);\n      const err = new Error(\"Texture loading error\");\n      err.event = event;\n      reject(err);\n    };\n    resource.source.addEventListener(\"error\", errorHandler);\n    resource.load().then(() => resolve(texture)).catch(errorHandler);\n  });\n  return resource._live2d_load;\n}\nfunction noop() {\n}\nconst TAG = \"Live2DFactory\";\nconst urlToJSON = (context, next) => __async(void 0, null, function* () {\n  if (typeof context.source === \"string\") {\n    const data = yield Live2DLoader.load({\n      url: context.source,\n      type: \"json\",\n      target: context.live2dModel\n    });\n    data.url = context.source;\n    context.source = data;\n    context.live2dModel.emit(\"settingsJSONLoaded\", data);\n  }\n  return next();\n});\nconst jsonToSettings = (context, next) => __async(void 0, null, function* () {\n  if (context.source instanceof ModelSettings) {\n    context.settings = context.source;\n    return next();\n  } else if (typeof context.source === \"object\") {\n    const runtime = Live2DFactory.findRuntime(context.source);\n    if (runtime) {\n      const settings = runtime.createModelSettings(context.source);\n      context.settings = settings;\n      context.live2dModel.emit(\"settingsLoaded\", settings);\n      return next();\n    }\n  }\n  throw new TypeError(\"Unknown settings format.\");\n});\nconst waitUntilReady = (context, next) => {\n  if (context.settings) {\n    const runtime = Live2DFactory.findRuntime(context.settings);\n    if (runtime) {\n      return runtime.ready().then(next);\n    }\n  }\n  return next();\n};\nconst setupOptionals = (context, next) => __async(void 0, null, function* () {\n  yield next();\n  const internalModel = context.internalModel;\n  if (internalModel) {\n    const settings = context.settings;\n    const runtime = Live2DFactory.findRuntime(settings);\n    if (runtime) {\n      const tasks = [];\n      if (settings.pose) {\n        tasks.push(\n          Live2DLoader.load({\n            settings,\n            url: settings.pose,\n            type: \"json\",\n            target: internalModel\n          }).then((data) => {\n            internalModel.pose = runtime.createPose(internalModel.coreModel, data);\n            context.live2dModel.emit(\"poseLoaded\", internalModel.pose);\n          }).catch((e) => {\n            context.live2dModel.emit(\"poseLoadError\", e);\n            logger.warn(TAG, \"Failed to load pose.\", e);\n          })\n        );\n      }\n      if (settings.physics) {\n        tasks.push(\n          Live2DLoader.load({\n            settings,\n            url: settings.physics,\n            type: \"json\",\n            target: internalModel\n          }).then((data) => {\n            internalModel.physics = runtime.createPhysics(\n              internalModel.coreModel,\n              data\n            );\n            context.live2dModel.emit(\"physicsLoaded\", internalModel.physics);\n          }).catch((e) => {\n            context.live2dModel.emit(\"physicsLoadError\", e);\n            logger.warn(TAG, \"Failed to load physics.\", e);\n          })\n        );\n      }\n      if (tasks.length) {\n        yield Promise.all(tasks);\n      }\n    }\n  }\n});\nconst setupEssentials = (context, next) => __async(void 0, null, function* () {\n  if (context.settings) {\n    const live2DModel = context.live2dModel;\n    const loadingTextures = Promise.all(\n      context.settings.textures.map((tex) => {\n        const url = context.settings.resolveURL(tex);\n        return createTexture(url, { crossOrigin: context.options.crossOrigin });\n      })\n    );\n    loadingTextures.catch(noop);\n    yield next();\n    if (context.internalModel) {\n      live2DModel.internalModel = context.internalModel;\n      live2DModel.emit(\"modelLoaded\", context.internalModel);\n    } else {\n      throw new TypeError(\"Missing internal model.\");\n    }\n    live2DModel.textures = yield loadingTextures;\n    live2DModel.emit(\"textureLoaded\", live2DModel.textures);\n  } else {\n    throw new TypeError(\"Missing settings.\");\n  }\n});\nconst createInternalModel = (context, next) => __async(void 0, null, function* () {\n  const settings = context.settings;\n  if (settings instanceof ModelSettings) {\n    const runtime = Live2DFactory.findRuntime(settings);\n    if (!runtime) {\n      throw new TypeError(\"Unknown model settings.\");\n    }\n    const modelData = yield Live2DLoader.load({\n      settings,\n      url: settings.moc,\n      type: \"arraybuffer\",\n      target: context.live2dModel\n    });\n    if (!runtime.isValidMoc(modelData)) {\n      throw new Error(\"Invalid moc data\");\n    }\n    const coreModel = runtime.createCoreModel(modelData);\n    context.internalModel = runtime.createInternalModel(coreModel, settings, context.options);\n    return next();\n  }\n  throw new TypeError(\"Missing settings.\");\n});\nconst _ZipLoader = class _ZipLoader {\n  static unzip(reader, settings) {\n    return __async(this, null, function* () {\n      const filePaths = yield _ZipLoader.getFilePaths(reader);\n      const requiredFilePaths = [];\n      for (const definedFile of settings.getDefinedFiles()) {\n        const actualPath = decodeURI(utils.url.resolve(settings.url, definedFile));\n        if (filePaths.includes(actualPath)) {\n          requiredFilePaths.push(actualPath);\n        }\n      }\n      const files = yield _ZipLoader.getFiles(reader, requiredFilePaths);\n      for (let i = 0; i < files.length; i++) {\n        const path = requiredFilePaths[i];\n        const file = files[i];\n        Object.defineProperty(file, \"webkitRelativePath\", {\n          value: path\n        });\n      }\n      return files;\n    });\n  }\n  static createSettings(reader) {\n    return __async(this, null, function* () {\n      const filePaths = yield _ZipLoader.getFilePaths(reader);\n      const settingsFilePath = filePaths.find(\n        (path) => path.endsWith(\"model.json\") || path.endsWith(\"model3.json\")\n      );\n      if (!settingsFilePath) {\n        throw new Error(\"Settings file not found\");\n      }\n      const settingsText = yield _ZipLoader.readText(reader, settingsFilePath);\n      if (!settingsText) {\n        throw new Error(\"Empty settings file: \" + settingsFilePath);\n      }\n      const settingsJSON = JSON.parse(settingsText);\n      settingsJSON.url = settingsFilePath;\n      const runtime = _ZipLoader.live2dFactory.findRuntime(settingsJSON);\n      if (!runtime) {\n        throw new Error(\"Unknown settings JSON\");\n      }\n      return runtime.createModelSettings(settingsJSON);\n    });\n  }\n  static zipReader(data, url) {\n    return __async(this, null, function* () {\n      throw new Error(\"Not implemented\");\n    });\n  }\n  static getFilePaths(reader) {\n    return __async(this, null, function* () {\n      throw new Error(\"Not implemented\");\n    });\n  }\n  static getFiles(reader, paths) {\n    return __async(this, null, function* () {\n      throw new Error(\"Not implemented\");\n    });\n  }\n  static readText(reader, path) {\n    return __async(this, null, function* () {\n      throw new Error(\"Not implemented\");\n    });\n  }\n  static releaseReader(reader) {\n  }\n};\n// will be set by Live2DFactory\n__publicField(_ZipLoader, \"live2dFactory\");\n__publicField(_ZipLoader, \"ZIP_PROTOCOL\", \"zip://\");\n__publicField(_ZipLoader, \"uid\", 0);\n__publicField(_ZipLoader, \"factory\", (context, next) => __async(_ZipLoader, null, function* () {\n  const source = context.source;\n  let sourceURL;\n  let zipBlob;\n  let settings;\n  if (typeof source === \"string\" && (source.endsWith(\".zip\") || source.startsWith(_ZipLoader.ZIP_PROTOCOL))) {\n    if (source.startsWith(_ZipLoader.ZIP_PROTOCOL)) {\n      sourceURL = source.slice(_ZipLoader.ZIP_PROTOCOL.length);\n    } else {\n      sourceURL = source;\n    }\n    zipBlob = yield Live2DLoader.load({\n      url: sourceURL,\n      type: \"blob\",\n      target: context.live2dModel\n    });\n  } else if (Array.isArray(source) && source.length === 1 && source[0] instanceof File && source[0].name.endsWith(\".zip\")) {\n    zipBlob = source[0];\n    sourceURL = URL.createObjectURL(zipBlob);\n    settings = source.settings;\n  }\n  if (zipBlob) {\n    if (!zipBlob.size) {\n      throw new Error(\"Empty zip file\");\n    }\n    const reader = yield _ZipLoader.zipReader(zipBlob, sourceURL);\n    if (!settings) {\n      settings = yield _ZipLoader.createSettings(reader);\n    }\n    settings._objectURL = _ZipLoader.ZIP_PROTOCOL + _ZipLoader.uid + \"/\" + settings.url;\n    const files = yield _ZipLoader.unzip(reader, settings);\n    files.settings = settings;\n    context.source = files;\n    if (sourceURL.startsWith(\"blob:\")) {\n      context.live2dModel.once(\"modelLoaded\", (internalModel) => {\n        internalModel.once(\"destroy\", function() {\n          URL.revokeObjectURL(sourceURL);\n        });\n      });\n    }\n    _ZipLoader.releaseReader(reader);\n  }\n  return next();\n}));\nlet ZipLoader = _ZipLoader;\nconst _FileLoader = class _FileLoader {\n  /**\n   * Resolves the path of a resource file to the object URL.\n   * @param settingsURL - Object URL of the settings file.\n   * @param filePath - Resource file path.\n   * @return Resolved object URL.\n   */\n  static resolveURL(settingsURL, filePath) {\n    var _a;\n    const resolved = (_a = _FileLoader.filesMap[settingsURL]) == null ? void 0 : _a[filePath];\n    if (resolved === void 0) {\n      throw new Error(\"Cannot find this file from uploaded files: \" + filePath);\n    }\n    return resolved;\n  }\n  /**\n   * Consumes the files by storing their object URLs. Files not defined in the settings will be ignored.\n   */\n  static upload(files, settings) {\n    return __async(this, null, function* () {\n      const fileMap = {};\n      for (const definedFile of settings.getDefinedFiles()) {\n        const actualPath = decodeURI(utils.url.resolve(settings.url, definedFile));\n        const actualFile = files.find((file) => file.webkitRelativePath === actualPath);\n        if (actualFile) {\n          fileMap[definedFile] = URL.createObjectURL(actualFile);\n        }\n      }\n      _FileLoader.filesMap[settings._objectURL] = fileMap;\n    });\n  }\n  /**\n   * Creates a ModelSettings by given files.\n   * @return Promise that resolves with the created ModelSettings.\n   */\n  static createSettings(files) {\n    return __async(this, null, function* () {\n      const settingsFile = files.find(\n        (file) => file.name.endsWith(\"model.json\") || file.name.endsWith(\"model3.json\")\n      );\n      if (!settingsFile) {\n        throw new TypeError(\"Settings file not found\");\n      }\n      const settingsText = yield _FileLoader.readText(settingsFile);\n      const settingsJSON = JSON.parse(settingsText);\n      settingsJSON.url = settingsFile.webkitRelativePath;\n      const runtime = Live2DFactory.findRuntime(settingsJSON);\n      if (!runtime) {\n        throw new Error(\"Unknown settings JSON\");\n      }\n      const settings = runtime.createModelSettings(settingsJSON);\n      settings._objectURL = URL.createObjectURL(settingsFile);\n      return settings;\n    });\n  }\n  /**\n   * Reads a file as text in UTF-8.\n   */\n  static readText(file) {\n    return __async(this, null, function* () {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = reject;\n        reader.readAsText(file, \"utf8\");\n      });\n    });\n  }\n};\n// will be set by Live2DFactory\n__publicField(_FileLoader, \"live2dFactory\");\n/**\n * Stores all the object URLs of uploaded files.\n */\n__publicField(_FileLoader, \"filesMap\", {});\n/**\n * Middleware for Live2DFactory.\n */\n__publicField(_FileLoader, \"factory\", (context, next) => __async(_FileLoader, null, function* () {\n  if (Array.isArray(context.source) && context.source[0] instanceof File) {\n    const files = context.source;\n    let settings = files.settings;\n    if (!settings) {\n      settings = yield _FileLoader.createSettings(files);\n    } else if (!settings._objectURL) {\n      throw new Error('\"_objectURL\" must be specified in ModelSettings');\n    }\n    settings.validateFiles(files.map((file) => encodeURI(file.webkitRelativePath)));\n    yield _FileLoader.upload(files, settings);\n    settings.resolveURL = function(url) {\n      return _FileLoader.resolveURL(this._objectURL, url);\n    };\n    context.source = settings;\n    context.live2dModel.once(\"modelLoaded\", (internalModel) => {\n      internalModel.once(\"destroy\", function() {\n        const objectURL = this.settings._objectURL;\n        URL.revokeObjectURL(objectURL);\n        if (_FileLoader.filesMap[objectURL]) {\n          for (const resourceObjectURL of Object.values(\n            _FileLoader.filesMap[objectURL]\n          )) {\n            URL.revokeObjectURL(resourceObjectURL);\n          }\n        }\n        delete _FileLoader.filesMap[objectURL];\n      });\n    });\n  }\n  return next();\n}));\nlet FileLoader = _FileLoader;\nconst _Live2DFactory = class _Live2DFactory {\n  /**\n   * Registers a Live2DRuntime.\n   */\n  static registerRuntime(runtime) {\n    _Live2DFactory.runtimes.push(runtime);\n    _Live2DFactory.runtimes.sort((a, b) => b.version - a.version);\n  }\n  /**\n   * Finds a runtime that matches given source.\n   * @param source - Either a settings JSON object or a ModelSettings instance.\n   * @return The Live2DRuntime, or undefined if not found.\n   */\n  static findRuntime(source) {\n    for (const runtime of _Live2DFactory.runtimes) {\n      if (runtime.test(source)) {\n        return runtime;\n      }\n    }\n  }\n  /**\n   * Sets up a Live2DModel, populating it with all defined resources.\n   * @param live2dModel - The Live2DModel instance.\n   * @param source - Can be one of: settings file URL, settings JSON object, ModelSettings instance.\n   * @param options - Options for the process.\n   * @return Promise that resolves when all resources have been loaded, rejects when error occurs.\n   */\n  static setupLive2DModel(live2dModel, source, options) {\n    return __async(this, null, function* () {\n      const textureLoaded = new Promise((resolve) => live2dModel.once(\"textureLoaded\", resolve));\n      const modelLoaded = new Promise((resolve) => live2dModel.once(\"modelLoaded\", resolve));\n      const readyEventEmitted = Promise.all([textureLoaded, modelLoaded]).then(\n        () => live2dModel.emit(\"ready\")\n      );\n      yield runMiddlewares(_Live2DFactory.live2DModelMiddlewares, {\n        live2dModel,\n        source,\n        options: options || {}\n      });\n      yield readyEventEmitted;\n      live2dModel.emit(\"load\");\n    });\n  }\n  /**\n   * Loads a Motion and registers the task to {@link motionTasksMap}. The task will be automatically\n   * canceled when its owner - the MotionManager instance - has been destroyed.\n   * @param motionManager - MotionManager that owns this Motion.\n   * @param group - The motion group.\n   * @param index - Index in the motion group.\n   * @return Promise that resolves with the Motion, or with undefined if it can't be loaded.\n   */\n  static loadMotion(motionManager, group, index) {\n    var _a, _b;\n    const handleError = (e) => motionManager.emit(\"motionLoadError\", group, index, e);\n    try {\n      const definition = (_a = motionManager.definitions[group]) == null ? void 0 : _a[index];\n      if (!definition) {\n        return Promise.resolve(void 0);\n      }\n      if (!motionManager.listeners(\"destroy\").includes(_Live2DFactory.releaseTasks)) {\n        motionManager.once(\"destroy\", _Live2DFactory.releaseTasks);\n      }\n      let tasks = _Live2DFactory.motionTasksMap.get(motionManager);\n      if (!tasks) {\n        tasks = {};\n        _Live2DFactory.motionTasksMap.set(motionManager, tasks);\n      }\n      let taskGroup = tasks[group];\n      if (!taskGroup) {\n        taskGroup = [];\n        tasks[group] = taskGroup;\n      }\n      const path = motionManager.getMotionFile(definition);\n      (_b = taskGroup[index]) != null ? _b : taskGroup[index] = Live2DLoader.load({\n        url: path,\n        settings: motionManager.settings,\n        type: motionManager.motionDataType,\n        target: motionManager\n      }).then((data) => {\n        var _a2;\n        const taskGroup2 = (_a2 = _Live2DFactory.motionTasksMap.get(motionManager)) == null ? void 0 : _a2[group];\n        if (taskGroup2) {\n          delete taskGroup2[index];\n        }\n        const motion = motionManager.createMotion(data, group, definition);\n        motionManager.emit(\"motionLoaded\", group, index, motion);\n        return motion;\n      }).catch((e) => {\n        logger.warn(motionManager.tag, `Failed to load motion: ${path}\n`, e);\n        handleError(e);\n      });\n      return taskGroup[index];\n    } catch (e) {\n      logger.warn(motionManager.tag, `Failed to load motion at \"${group}\"[${index}]\n`, e);\n      handleError(e);\n    }\n    return Promise.resolve(void 0);\n  }\n  /**\n   * Loads an Expression and registers the task to {@link expressionTasksMap}. The task will be automatically\n   * canceled when its owner - the ExpressionManager instance - has been destroyed.\n   * @param expressionManager - ExpressionManager that owns this Expression.\n   * @param index - Index of the Expression.\n   * @return Promise that resolves with the Expression, or with undefined if it can't be loaded.\n   */\n  static loadExpression(expressionManager, index) {\n    var _a;\n    const handleError = (e) => expressionManager.emit(\"expressionLoadError\", index, e);\n    try {\n      const definition = expressionManager.definitions[index];\n      if (!definition) {\n        return Promise.resolve(void 0);\n      }\n      if (!expressionManager.listeners(\"destroy\").includes(_Live2DFactory.releaseTasks)) {\n        expressionManager.once(\"destroy\", _Live2DFactory.releaseTasks);\n      }\n      let tasks = _Live2DFactory.expressionTasksMap.get(expressionManager);\n      if (!tasks) {\n        tasks = [];\n        _Live2DFactory.expressionTasksMap.set(expressionManager, tasks);\n      }\n      const path = expressionManager.getExpressionFile(definition);\n      (_a = tasks[index]) != null ? _a : tasks[index] = Live2DLoader.load({\n        url: path,\n        settings: expressionManager.settings,\n        type: \"json\",\n        target: expressionManager\n      }).then((data) => {\n        const tasks2 = _Live2DFactory.expressionTasksMap.get(expressionManager);\n        if (tasks2) {\n          delete tasks2[index];\n        }\n        const expression = expressionManager.createExpression(data, definition);\n        expressionManager.emit(\"expressionLoaded\", index, expression);\n        return expression;\n      }).catch((e) => {\n        logger.warn(expressionManager.tag, `Failed to load expression: ${path}\n`, e);\n        handleError(e);\n      });\n      return tasks[index];\n    } catch (e) {\n      logger.warn(expressionManager.tag, `Failed to load expression at [${index}]\n`, e);\n      handleError(e);\n    }\n    return Promise.resolve(void 0);\n  }\n  static releaseTasks() {\n    if (this instanceof MotionManager) {\n      _Live2DFactory.motionTasksMap.delete(this);\n    } else {\n      _Live2DFactory.expressionTasksMap.delete(this);\n    }\n  }\n};\n/**\n * All registered runtimes, sorted by versions in descending order.\n */\n__publicField(_Live2DFactory, \"runtimes\", []);\n__publicField(_Live2DFactory, \"urlToJSON\", urlToJSON);\n__publicField(_Live2DFactory, \"jsonToSettings\", jsonToSettings);\n__publicField(_Live2DFactory, \"waitUntilReady\", waitUntilReady);\n__publicField(_Live2DFactory, \"setupOptionals\", setupOptionals);\n__publicField(_Live2DFactory, \"setupEssentials\", setupEssentials);\n__publicField(_Live2DFactory, \"createInternalModel\", createInternalModel);\n/**\n * Middlewares to run through when setting up a Live2DModel.\n */\n__publicField(_Live2DFactory, \"live2DModelMiddlewares\", [\n  ZipLoader.factory,\n  FileLoader.factory,\n  urlToJSON,\n  jsonToSettings,\n  waitUntilReady,\n  setupOptionals,\n  setupEssentials,\n  createInternalModel\n]);\n/**\n * load tasks of each motion. The structure of each value in this map\n * is the same as respective {@link MotionManager.definitions}.\n */\n__publicField(_Live2DFactory, \"motionTasksMap\", /* @__PURE__ */ new WeakMap());\n/**\n * Load tasks of each expression.\n */\n__publicField(_Live2DFactory, \"expressionTasksMap\", /* @__PURE__ */ new WeakMap());\nlet Live2DFactory = _Live2DFactory;\nMotionManager.prototype[\"_loadMotion\"] = function(group, index) {\n  return Live2DFactory.loadMotion(this, group, index);\n};\nExpressionManager.prototype[\"_loadExpression\"] = function(index) {\n  return Live2DFactory.loadExpression(this, index);\n};\nFileLoader[\"live2dFactory\"] = Live2DFactory;\nZipLoader[\"live2dFactory\"] = Live2DFactory;\nconst _Automator = class _Automator {\n  constructor(model, {\n    autoUpdate = true,\n    autoHitTest = true,\n    autoFocus = true,\n    autoInteract,\n    ticker\n  } = {}) {\n    __publicField(this, \"model\");\n    __publicField(this, \"destroyed\", false);\n    __publicField(this, \"_ticker\");\n    __publicField(this, \"_autoUpdate\", false);\n    __publicField(this, \"_autoHitTest\", false);\n    __publicField(this, \"_autoFocus\", false);\n    if (!ticker) {\n      if (_Automator.defaultTicker) {\n        ticker = _Automator.defaultTicker;\n      } else if (typeof PIXI !== \"undefined\") {\n        ticker = PIXI.Ticker.shared;\n      }\n    }\n    if (autoInteract !== void 0) {\n      autoHitTest = autoInteract;\n      autoFocus = autoInteract;\n      logger.warn(\n        model.tag,\n        \"options.autoInteract is deprecated since v0.5.0, use autoHitTest and autoFocus instead.\"\n      );\n    }\n    this.model = model;\n    this.ticker = ticker;\n    this.autoUpdate = autoUpdate;\n    this.autoHitTest = autoHitTest;\n    this.autoFocus = autoFocus;\n    if (autoHitTest || autoFocus) {\n      this.model.eventMode = \"static\";\n    }\n  }\n  get ticker() {\n    return this._ticker;\n  }\n  set ticker(ticker) {\n    var _a;\n    if (this._ticker) {\n      this._ticker.remove(onTickerUpdate, this);\n    }\n    this._ticker = ticker;\n    if (this._autoUpdate) {\n      (_a = this._ticker) == null ? void 0 : _a.add(onTickerUpdate, this);\n    }\n  }\n  /**\n   * @see {@link AutomatorOptions.autoUpdate}\n   */\n  get autoUpdate() {\n    return this._autoUpdate;\n  }\n  set autoUpdate(autoUpdate) {\n    var _a;\n    if (this.destroyed) {\n      return;\n    }\n    if (autoUpdate) {\n      if (this._ticker) {\n        this._ticker.add(onTickerUpdate, this);\n        this._autoUpdate = true;\n      } else {\n        logger.warn(\n          this.model.tag,\n          \"No Ticker to be used for automatic updates. Either set option.ticker when creating Live2DModel, or expose PIXI to global scope (window.PIXI = PIXI).\"\n        );\n      }\n    } else {\n      (_a = this._ticker) == null ? void 0 : _a.remove(onTickerUpdate, this);\n      this._autoUpdate = false;\n    }\n  }\n  /**\n   * @see {@link AutomatorOptions.autoHitTest}\n   */\n  get autoHitTest() {\n    return this._autoHitTest;\n  }\n  set autoHitTest(autoHitTest) {\n    if (autoHitTest !== this.autoHitTest) {\n      if (autoHitTest) {\n        this.model.on(\"pointertap\", onTap, this);\n      } else {\n        this.model.off(\"pointertap\", onTap, this);\n      }\n      this._autoHitTest = autoHitTest;\n    }\n  }\n  /**\n   * @see {@link AutomatorOptions.autoFocus}\n   */\n  get autoFocus() {\n    return this._autoFocus;\n  }\n  set autoFocus(autoFocus) {\n    if (autoFocus !== this.autoFocus) {\n      if (autoFocus) {\n        this.model.on(\"globalpointermove\", onPointerMove, this);\n      } else {\n        this.model.off(\"globalpointermove\", onPointerMove, this);\n      }\n      this._autoFocus = autoFocus;\n    }\n  }\n  /**\n   * @see {@link AutomatorOptions.autoInteract}\n   */\n  get autoInteract() {\n    return this._autoHitTest && this._autoFocus;\n  }\n  set autoInteract(autoInteract) {\n    this.autoHitTest = autoInteract;\n    this.autoFocus = autoInteract;\n  }\n  onTickerUpdate() {\n    const deltaMS = this.ticker.deltaMS;\n    this.model.update(deltaMS);\n  }\n  onTap(event) {\n    this.model.tap(event.global.x, event.global.y);\n  }\n  onPointerMove(event) {\n    this.model.focus(event.global.x, event.global.y);\n  }\n  destroy() {\n    this.autoFocus = false;\n    this.autoHitTest = false;\n    this.autoUpdate = false;\n    this.ticker = void 0;\n    this.destroyed = true;\n  }\n};\n__publicField(_Automator, \"defaultTicker\");\nlet Automator = _Automator;\nfunction onTickerUpdate() {\n  this.onTickerUpdate();\n}\nfunction onTap(event) {\n  this.onTap(event);\n}\nfunction onPointerMove(event) {\n  this.onPointerMove(event);\n}\nclass Live2DTransform extends Transform {\n}\nconst tempPoint = new Point();\nconst tempMatrix$1 = new Matrix();\nclass Live2DModel extends Container {\n  constructor(options) {\n    super();\n    /**\n     * Tag for logging.\n     */\n    __publicField(this, \"tag\", \"Live2DModel(uninitialized)\");\n    /**\n     * The internal model. Though typed as non-nullable, it'll be undefined until the \"ready\" event is emitted.\n     */\n    __publicField(this, \"internalModel\");\n    /**\n     * Pixi textures.\n     */\n    __publicField(this, \"textures\", []);\n    /** @override */\n    __publicField(this, \"transform\", new Live2DTransform());\n    /**\n     * The anchor behaves like the one in `PIXI.Sprite`, where `(0, 0)` means the top left\n     * and `(1, 1)` means the bottom right.\n     */\n    __publicField(this, \"anchor\", new ObservablePoint(this.onAnchorChange, this, 0, 0));\n    // cast the type because it breaks the casting of Live2DModel\n    /**\n     * An ID of Gl context that syncs with `renderer.CONTEXT_UID`. Used to check if the GL context has changed.\n     */\n    __publicField(this, \"glContextID\", -1);\n    /**\n     * Elapsed time in milliseconds since created.\n     */\n    __publicField(this, \"elapsedTime\", 0);\n    /**\n     * Elapsed time in milliseconds from last frame to this frame.\n     */\n    __publicField(this, \"deltaTime\", 0);\n    __publicField(this, \"automator\");\n    this.automator = new Automator(this, options);\n    this.once(\"modelLoaded\", () => this.init(options));\n  }\n  /**\n   * Creates a Live2DModel from given source.\n   * @param source - Can be one of: settings file URL, settings JSON object, ModelSettings instance.\n   * @param options - Options for the creation.\n   * @return Promise that resolves with the Live2DModel.\n   */\n  static from(source, options) {\n    const model = new this(options);\n    return Live2DFactory.setupLive2DModel(model, source, options).then(() => model);\n  }\n  /**\n   * Synchronous version of `Live2DModel.from()`. This method immediately returns a Live2DModel instance,\n   * whose resources have not been loaded. Therefore this model can't be manipulated or rendered\n   * until the \"load\" event has been emitted.\n   *\n   * ```js\n   * // no `await` here as it's not a Promise\n   * const model = Live2DModel.fromSync('shizuku.model.json');\n   *\n   * // these will cause errors!\n   * // app.stage.addChild(model);\n   * // model.motion('tap_body');\n   *\n   * model.once('load', () => {\n   *     // now it's safe\n   *     app.stage.addChild(model);\n   *     model.motion('tap_body');\n   * });\n   * ```\n   */\n  static fromSync(source, options) {\n    const model = new this(options);\n    Live2DFactory.setupLive2DModel(model, source, options).then(options == null ? void 0 : options.onLoad).catch(options == null ? void 0 : options.onError);\n    return model;\n  }\n  /**\n   * Registers the class of `PIXI.Ticker` for auto updating.\n   * @deprecated Use {@link Live2DModelOptions.ticker} instead.\n   */\n  static registerTicker(tickerClass) {\n    Automator[\"defaultTicker\"] = tickerClass.shared;\n  }\n  // TODO: rename\n  /**\n   * A handler of the \"modelLoaded\" event, invoked when the internal model has been loaded.\n   */\n  init(options) {\n    this.tag = `Live2DModel(${this.internalModel.settings.name})`;\n  }\n  /**\n   * A callback that observes {@link anchor}, invoked when the anchor's values have been changed.\n   */\n  onAnchorChange() {\n    this.pivot.set(\n      this.anchor.x * this.internalModel.width,\n      this.anchor.y * this.internalModel.height\n    );\n  }\n  /**\n   * Shorthand to start a motion.\n   * @param group - The motion group.\n   * @param index - The index in this group. If not presented, a random motion will be started.\n   * @param priority - The motion priority. Defaults to `MotionPriority.NORMAL`.\n   * @return Promise that resolves with true if the motion is successfully started, with false otherwise.\n   */\n  motion(group, index, priority) {\n    return index === void 0 ? this.internalModel.motionManager.startRandomMotion(group, priority) : this.internalModel.motionManager.startMotion(group, index, priority);\n  }\n  /**\n   * Shorthand to set an expression.\n   * @param id - Either the index, or the name of the expression. If not presented, a random expression will be set.\n   * @return Promise that resolves with true if succeeded, with false otherwise.\n   */\n  expression(id) {\n    if (this.internalModel.motionManager.expressionManager) {\n      return id === void 0 ? this.internalModel.motionManager.expressionManager.setRandomExpression() : this.internalModel.motionManager.expressionManager.setExpression(id);\n    }\n    return Promise.resolve(false);\n  }\n  /**\n   * Updates the focus position. This will not cause the model to immediately look at the position,\n   * instead the movement will be interpolated.\n   * @param x - Position in world space.\n   * @param y - Position in world space.\n   * @param instant - Should the focus position be instantly applied.\n   */\n  focus(x, y, instant = false) {\n    tempPoint.x = x;\n    tempPoint.y = y;\n    this.toModelPosition(tempPoint, tempPoint, true);\n    const tx = tempPoint.x / this.internalModel.originalWidth * 2 - 1;\n    const ty = tempPoint.y / this.internalModel.originalHeight * 2 - 1;\n    const radian = Math.atan2(ty, tx);\n    this.internalModel.focusController.focus(Math.cos(radian), -Math.sin(radian), instant);\n  }\n  /**\n   * Tap on the model. This will perform a hit-testing, and emit a \"hit\" event\n   * if at least one of the hit areas is hit.\n   * @param x - Position in world space.\n   * @param y - Position in world space.\n   * @emits {@link Live2DModelEvents.hit}\n   */\n  tap(x, y) {\n    const hitAreaNames = this.hitTest(x, y);\n    if (hitAreaNames.length) {\n      logger.log(this.tag, `Hit`, hitAreaNames);\n      this.emit(\"hit\", hitAreaNames);\n    }\n  }\n  /**\n   * Hit-test on the model.\n   * @param x - Position in world space.\n   * @param y - Position in world space.\n   * @return The names of the *hit* hit areas. Can be empty if none is hit.\n   */\n  hitTest(x, y) {\n    tempPoint.x = x;\n    tempPoint.y = y;\n    this.toModelPosition(tempPoint, tempPoint);\n    return this.internalModel.hitTest(tempPoint.x, tempPoint.y);\n  }\n  /**\n   * Calculates the position in the canvas of original, unscaled Live2D model.\n   * @param position - A Point in world space.\n   * @param result - A Point to store the new value. Defaults to a new Point.\n   * @param skipUpdate - True to skip the update transform.\n   * @return The Point in model canvas space.\n   */\n  toModelPosition(position, result = position.clone(), skipUpdate) {\n    if (!skipUpdate) {\n      this._recursivePostUpdateTransform();\n      if (!this.parent) {\n        this.parent = this._tempDisplayObjectParent;\n        this.displayObjectUpdateTransform();\n        this.parent = null;\n      } else {\n        this.displayObjectUpdateTransform();\n      }\n    }\n    this.transform.worldTransform.applyInverse(position, result);\n    this.internalModel.localTransform.applyInverse(result, result);\n    return result;\n  }\n  /**\n   * A method required by `PIXI.InteractionManager` to perform hit-testing.\n   * @param point - A Point in world space.\n   * @return True if the point is inside this model.\n   */\n  containsPoint(point) {\n    return this.getBounds(true).contains(point.x, point.y);\n  }\n  /** @override */\n  _calculateBounds() {\n    this._bounds.addFrame(\n      this.transform,\n      0,\n      0,\n      this.internalModel.width,\n      this.internalModel.height\n    );\n  }\n  /**\n   * Updates the model. Note this method just updates the timer,\n   * and the actual update will be done right before rendering the model.\n   * @param dt - The elapsed time in milliseconds since last frame.\n   */\n  update(dt) {\n    this.deltaTime += dt;\n    this.elapsedTime += dt;\n  }\n  _render(renderer) {\n    renderer.batch.reset();\n    renderer.geometry.reset();\n    renderer.shader.reset();\n    renderer.state.reset();\n    let shouldUpdateTexture = false;\n    if (this.glContextID !== renderer.CONTEXT_UID) {\n      this.glContextID = renderer.CONTEXT_UID;\n      this.internalModel.updateWebGLContext(renderer.gl, this.glContextID);\n      shouldUpdateTexture = true;\n    }\n    for (let i = 0; i < this.textures.length; i++) {\n      const texture = this.textures[i];\n      if (!texture.valid) {\n        continue;\n      }\n      if (shouldUpdateTexture || !texture.baseTexture._glTextures[this.glContextID]) {\n        renderer.gl.pixelStorei(\n          WebGLRenderingContext.UNPACK_FLIP_Y_WEBGL,\n          this.internalModel.textureFlipY\n        );\n        renderer.texture.bind(texture.baseTexture, 0);\n      }\n      this.internalModel.bindTexture(\n        i,\n        texture.baseTexture._glTextures[this.glContextID].texture\n      );\n      texture.baseTexture.touched = renderer.textureGC.count;\n    }\n    const viewport = renderer.framebuffer.viewport;\n    this.internalModel.viewport = [viewport.x, viewport.y, viewport.width, viewport.height];\n    if (this.deltaTime) {\n      this.internalModel.update(this.deltaTime, this.elapsedTime);\n      this.deltaTime = 0;\n    }\n    const internalTransform = tempMatrix$1.copyFrom(renderer.globalUniforms.uniforms.projectionMatrix).append(this.worldTransform);\n    this.internalModel.updateTransform(internalTransform);\n    this.internalModel.draw(renderer.gl);\n    renderer.state.reset();\n    renderer.texture.reset();\n  }\n  /**\n   * Destroys the model and all related resources. This takes the same options and also\n   * behaves the same as `PIXI.Container#destroy`.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @param [options.children=false] - if set to true, all the children will have their destroy\n   *  method called as well. 'options' will be passed on to those calls.\n   * @param [options.texture=false] - Only used for child Sprites if options.children is set to true\n   *  Should it destroy the texture of the child sprite\n   * @param [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n   *  Should it destroy the base texture of the child sprite\n   */\n  destroy(options) {\n    this.emit(\"destroy\");\n    if (options == null ? void 0 : options.texture) {\n      this.textures.forEach((texture) => texture.destroy(options.baseTexture));\n    }\n    this.automator.destroy();\n    this.internalModel.destroy();\n    super.destroy(options);\n  }\n}\nif (!window.Live2D) {\n  throw new Error(\n    \"Could not find Cubism 2 runtime. This plugin requires live2d.min.js to be loaded.\"\n  );\n}\nconst originalUpdateParam = Live2DMotion.prototype.updateParam;\nLive2DMotion.prototype.updateParam = function(model, entry) {\n  originalUpdateParam.call(this, model, entry);\n  if (entry.isFinished() && this.onFinishHandler) {\n    this.onFinishHandler(this);\n    delete this.onFinishHandler;\n  }\n};\nclass Live2DExpression extends AMotion {\n  constructor(json) {\n    super();\n    __publicField(this, \"params\", []);\n    this.setFadeIn(json.fade_in > 0 ? json.fade_in : config.expressionFadingDuration);\n    this.setFadeOut(json.fade_out > 0 ? json.fade_out : config.expressionFadingDuration);\n    if (Array.isArray(json.params)) {\n      json.params.forEach((param) => {\n        const calc = param.calc || \"add\";\n        if (calc === \"add\") {\n          const defaultValue = param.def || 0;\n          param.val -= defaultValue;\n        } else if (calc === \"mult\") {\n          const defaultValue = param.def || 1;\n          param.val /= defaultValue;\n        }\n        this.params.push({\n          calc,\n          val: param.val,\n          id: param.id\n        });\n      });\n    }\n  }\n  /** @override */\n  updateParamExe(model, time, weight, motionQueueEnt) {\n    this.params.forEach((param) => {\n      model.setParamFloat(param.id, param.val * weight);\n    });\n  }\n}\nclass Cubism2ExpressionManager extends ExpressionManager {\n  constructor(settings, options) {\n    var _a;\n    super(settings, options);\n    __publicField(this, \"queueManager\", new MotionQueueManager());\n    __publicField(this, \"definitions\");\n    this.definitions = (_a = this.settings.expressions) != null ? _a : [];\n    this.init();\n  }\n  isFinished() {\n    return this.queueManager.isFinished();\n  }\n  getExpressionIndex(name) {\n    return this.definitions.findIndex((def) => def.name === name);\n  }\n  getExpressionFile(definition) {\n    return definition.file;\n  }\n  createExpression(data, definition) {\n    return new Live2DExpression(data);\n  }\n  _setExpression(motion) {\n    return this.queueManager.startMotion(motion);\n  }\n  stopAllExpressions() {\n    this.queueManager.stopAllMotions();\n  }\n  updateParameters(model, dt) {\n    return this.queueManager.updateParam(model);\n  }\n}\nclass Cubism2MotionManager extends MotionManager {\n  constructor(settings, options) {\n    super(settings, options);\n    __publicField(this, \"definitions\");\n    __publicField(this, \"groups\", { idle: \"idle\" });\n    __publicField(this, \"motionDataType\", \"arraybuffer\");\n    __publicField(this, \"queueManager\", new MotionQueueManager());\n    __publicField(this, \"expressionManager\");\n    this.definitions = this.settings.motions;\n    this.init(options);\n  }\n  init(options) {\n    super.init(options);\n    if (this.settings.expressions) {\n      this.expressionManager = new Cubism2ExpressionManager(this.settings, options);\n    }\n  }\n  isFinished() {\n    return this.queueManager.isFinished();\n  }\n  createMotion(data, group, definition) {\n    const motion = Live2DMotion.loadMotion(data);\n    const defaultFadingDuration = group === this.groups.idle ? config.idleMotionFadingDuration : config.motionFadingDuration;\n    motion.setFadeIn(definition.fade_in > 0 ? definition.fade_in : defaultFadingDuration);\n    motion.setFadeOut(definition.fade_out > 0 ? definition.fade_out : defaultFadingDuration);\n    return motion;\n  }\n  getMotionFile(definition) {\n    return definition.file;\n  }\n  getMotionName(definition) {\n    return definition.file;\n  }\n  getSoundFile(definition) {\n    return definition.sound;\n  }\n  _startMotion(motion, onFinish) {\n    motion.onFinishHandler = onFinish;\n    this.queueManager.stopAllMotions();\n    return this.queueManager.startMotion(motion);\n  }\n  _stopAllMotions() {\n    this.queueManager.stopAllMotions();\n  }\n  updateParameters(model, now) {\n    return this.queueManager.updateParam(model);\n  }\n  destroy() {\n    super.destroy();\n    this.queueManager = void 0;\n  }\n}\nclass Live2DEyeBlink {\n  constructor(coreModel) {\n    __publicField(this, \"leftParam\");\n    __publicField(this, \"rightParam\");\n    __publicField(this, \"blinkInterval\", 4e3);\n    __publicField(this, \"closingDuration\", 100);\n    __publicField(this, \"closedDuration\", 50);\n    __publicField(this, \"openingDuration\", 150);\n    __publicField(this, \"eyeState\", 0);\n    __publicField(this, \"eyeParamValue\", 1);\n    __publicField(this, \"closedTimer\", 0);\n    __publicField(this, \"nextBlinkTimeLeft\", this.blinkInterval);\n    this.coreModel = coreModel;\n    this.leftParam = coreModel.getParamIndex(\"PARAM_EYE_L_OPEN\");\n    this.rightParam = coreModel.getParamIndex(\"PARAM_EYE_R_OPEN\");\n  }\n  setEyeParams(value) {\n    this.eyeParamValue = clamp(value, 0, 1);\n    this.coreModel.setParamFloat(this.leftParam, this.eyeParamValue);\n    this.coreModel.setParamFloat(this.rightParam, this.eyeParamValue);\n  }\n  update(dt) {\n    switch (this.eyeState) {\n      case 0:\n        this.nextBlinkTimeLeft -= dt;\n        if (this.nextBlinkTimeLeft < 0) {\n          this.eyeState = 1;\n          this.nextBlinkTimeLeft = this.blinkInterval + this.closingDuration + this.closedDuration + this.openingDuration + rand(0, 2e3);\n        }\n        break;\n      case 1:\n        this.setEyeParams(this.eyeParamValue + dt / this.closingDuration);\n        if (this.eyeParamValue <= 0) {\n          this.eyeState = 2;\n          this.closedTimer = 0;\n        }\n        break;\n      case 2:\n        this.closedTimer += dt;\n        if (this.closedTimer >= this.closedDuration) {\n          this.eyeState = 3;\n        }\n        break;\n      case 3:\n        this.setEyeParams(this.eyeParamValue + dt / this.openingDuration);\n        if (this.eyeParamValue >= 1) {\n          this.eyeState = 0;\n        }\n    }\n  }\n}\nconst tempMatrixArray = new Float32Array([\n  1,\n  0,\n  0,\n  0,\n  0,\n  1,\n  0,\n  0,\n  0,\n  0,\n  1,\n  0,\n  0,\n  0,\n  0,\n  1\n]);\nclass Cubism2InternalModel extends InternalModel {\n  constructor(coreModel, settings, options) {\n    super();\n    __publicField(this, \"settings\");\n    __publicField(this, \"coreModel\");\n    __publicField(this, \"motionManager\");\n    __publicField(this, \"eyeBlink\");\n    // parameter indices, cached for better performance\n    __publicField(this, \"eyeballXParamIndex\");\n    __publicField(this, \"eyeballYParamIndex\");\n    __publicField(this, \"angleXParamIndex\");\n    __publicField(this, \"angleYParamIndex\");\n    __publicField(this, \"angleZParamIndex\");\n    __publicField(this, \"bodyAngleXParamIndex\");\n    __publicField(this, \"breathParamIndex\");\n    __publicField(this, \"textureFlipY\", true);\n    /**\n     * Number of the drawables in this model.\n     */\n    __publicField(this, \"drawDataCount\", 0);\n    /**\n     * If true, the face culling will always be disabled when drawing the model,\n     * regardless of the model's internal flags.\n     */\n    __publicField(this, \"disableCulling\", false);\n    __publicField(this, \"hasDrawn\", false);\n    this.coreModel = coreModel;\n    this.settings = settings;\n    this.motionManager = new Cubism2MotionManager(settings, options);\n    this.eyeBlink = new Live2DEyeBlink(coreModel);\n    this.eyeballXParamIndex = coreModel.getParamIndex(\"PARAM_EYE_BALL_X\");\n    this.eyeballYParamIndex = coreModel.getParamIndex(\"PARAM_EYE_BALL_Y\");\n    this.angleXParamIndex = coreModel.getParamIndex(\"PARAM_ANGLE_X\");\n    this.angleYParamIndex = coreModel.getParamIndex(\"PARAM_ANGLE_Y\");\n    this.angleZParamIndex = coreModel.getParamIndex(\"PARAM_ANGLE_Z\");\n    this.bodyAngleXParamIndex = coreModel.getParamIndex(\"PARAM_BODY_ANGLE_X\");\n    this.breathParamIndex = coreModel.getParamIndex(\"PARAM_BREATH\");\n    this.init();\n  }\n  init() {\n    super.init();\n    if (this.settings.initParams) {\n      this.settings.initParams.forEach(\n        ({ id, value }) => this.coreModel.setParamFloat(id, value)\n      );\n    }\n    if (this.settings.initOpacities) {\n      this.settings.initOpacities.forEach(\n        ({ id, value }) => this.coreModel.setPartsOpacity(id, value)\n      );\n    }\n    this.coreModel.saveParam();\n    const arr = this.coreModel.getModelContext()._$aS;\n    if (arr == null ? void 0 : arr.length) {\n      this.drawDataCount = arr.length;\n    }\n    let culling = this.coreModel.drawParamWebGL.culling;\n    Object.defineProperty(this.coreModel.drawParamWebGL, \"culling\", {\n      set: (v) => culling = v,\n      // always return false when disabled\n      get: () => this.disableCulling ? false : culling\n    });\n    const clipManager = this.coreModel.getModelContext().clipManager;\n    const originalSetupClip = clipManager.setupClip;\n    clipManager.setupClip = (modelContext, drawParam) => {\n      originalSetupClip.call(clipManager, modelContext, drawParam);\n      drawParam.gl.viewport(...this.viewport);\n    };\n  }\n  getSize() {\n    return [this.coreModel.getCanvasWidth(), this.coreModel.getCanvasHeight()];\n  }\n  getLayout() {\n    const layout = {};\n    if (this.settings.layout) {\n      for (const [key, value] of Object.entries(this.settings.layout)) {\n        let commonKey = key;\n        if (key === \"center_x\") {\n          commonKey = \"centerX\";\n        } else if (key === \"center_y\") {\n          commonKey = \"centerY\";\n        }\n        layout[commonKey] = value;\n      }\n    }\n    return layout;\n  }\n  updateWebGLContext(gl, glContextID) {\n    const drawParamWebGL = this.coreModel.drawParamWebGL;\n    drawParamWebGL.firstDraw = true;\n    drawParamWebGL.setGL(gl);\n    drawParamWebGL.glno = glContextID;\n    for (const [key, value] of Object.entries(drawParamWebGL)) {\n      if (value instanceof WebGLBuffer) {\n        drawParamWebGL[key] = null;\n      }\n    }\n    const clipManager = this.coreModel.getModelContext().clipManager;\n    clipManager.curFrameNo = glContextID;\n    const framebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);\n    clipManager.getMaskRenderTexture();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n  }\n  bindTexture(index, texture) {\n    this.coreModel.setTexture(index, texture);\n  }\n  getHitAreaDefs() {\n    var _a;\n    return ((_a = this.settings.hitAreas) == null ? void 0 : _a.map((hitArea) => ({\n      id: hitArea.id,\n      name: hitArea.name,\n      index: this.coreModel.getDrawDataIndex(hitArea.id)\n    }))) || [];\n  }\n  getDrawableIDs() {\n    const modelContext = this.coreModel.getModelContext();\n    const ids = [];\n    for (let i = 0; i < this.drawDataCount; i++) {\n      const drawData = modelContext.getDrawData(i);\n      if (drawData) {\n        ids.push(drawData.getDrawDataID().id);\n      }\n    }\n    return ids;\n  }\n  getDrawableIndex(id) {\n    return this.coreModel.getDrawDataIndex(id);\n  }\n  getDrawableVertices(drawIndex) {\n    if (typeof drawIndex === \"string\") {\n      drawIndex = this.coreModel.getDrawDataIndex(drawIndex);\n      if (drawIndex === -1)\n        throw new TypeError(\"Unable to find drawable ID: \" + drawIndex);\n    }\n    return this.coreModel.getTransformedPoints(drawIndex).slice();\n  }\n  hitTest(x, y) {\n    if (!this.hasDrawn) {\n      logger.warn(\n        \"Trying to hit-test a Cubism 2 model that has not been rendered yet. The result will always be empty since the draw data is not ready.\"\n      );\n    }\n    return super.hitTest(x, y);\n  }\n  update(dt, now) {\n    var _a, _b, _c, _d;\n    super.update(dt, now);\n    const model = this.coreModel;\n    this.emit(\"beforeMotionUpdate\");\n    const motionUpdated = this.motionManager.update(this.coreModel, now);\n    this.emit(\"afterMotionUpdate\");\n    model.saveParam();\n    (_a = this.motionManager.expressionManager) == null ? void 0 : _a.update(model, now);\n    if (!motionUpdated) {\n      (_b = this.eyeBlink) == null ? void 0 : _b.update(dt);\n    }\n    this.updateFocus();\n    this.updateNaturalMovements(dt, now);\n    (_c = this.physics) == null ? void 0 : _c.update(now);\n    (_d = this.pose) == null ? void 0 : _d.update(dt);\n    this.emit(\"beforeModelUpdate\");\n    model.update();\n    model.loadParam();\n  }\n  updateFocus() {\n    this.coreModel.addToParamFloat(this.eyeballXParamIndex, this.focusController.x);\n    this.coreModel.addToParamFloat(this.eyeballYParamIndex, this.focusController.y);\n    this.coreModel.addToParamFloat(this.angleXParamIndex, this.focusController.x * 30);\n    this.coreModel.addToParamFloat(this.angleYParamIndex, this.focusController.y * 30);\n    this.coreModel.addToParamFloat(\n      this.angleZParamIndex,\n      this.focusController.x * this.focusController.y * -30\n    );\n    this.coreModel.addToParamFloat(this.bodyAngleXParamIndex, this.focusController.x * 10);\n  }\n  updateNaturalMovements(dt, now) {\n    const t = now / 1e3 * 2 * Math.PI;\n    this.coreModel.addToParamFloat(this.angleXParamIndex, 15 * Math.sin(t / 6.5345) * 0.5);\n    this.coreModel.addToParamFloat(this.angleYParamIndex, 8 * Math.sin(t / 3.5345) * 0.5);\n    this.coreModel.addToParamFloat(this.angleZParamIndex, 10 * Math.sin(t / 5.5345) * 0.5);\n    this.coreModel.addToParamFloat(this.bodyAngleXParamIndex, 4 * Math.sin(t / 15.5345) * 0.5);\n    this.coreModel.setParamFloat(this.breathParamIndex, 0.5 + 0.5 * Math.sin(t / 3.2345));\n  }\n  draw(gl) {\n    const disableCulling = this.disableCulling;\n    if (gl.getParameter(gl.FRAMEBUFFER_BINDING)) {\n      this.disableCulling = true;\n    }\n    const matrix = this.drawingMatrix;\n    tempMatrixArray[0] = matrix.a;\n    tempMatrixArray[1] = matrix.b;\n    tempMatrixArray[4] = matrix.c;\n    tempMatrixArray[5] = matrix.d;\n    tempMatrixArray[12] = matrix.tx;\n    tempMatrixArray[13] = matrix.ty;\n    this.coreModel.setMatrix(tempMatrixArray);\n    this.coreModel.draw();\n    this.hasDrawn = true;\n    this.disableCulling = disableCulling;\n  }\n  destroy() {\n    super.destroy();\n    this.coreModel = void 0;\n  }\n}\nclass Cubism2ModelSettings extends ModelSettings {\n  constructor(json) {\n    super(json);\n    // files\n    __publicField(this, \"moc\");\n    __publicField(this, \"textures\");\n    // metadata\n    __publicField(this, \"layout\");\n    __publicField(this, \"hitAreas\");\n    __publicField(this, \"initParams\");\n    __publicField(this, \"initOpacities\");\n    // motions\n    __publicField(this, \"expressions\");\n    __publicField(this, \"motions\", {});\n    if (!Cubism2ModelSettings.isValidJSON(json)) {\n      throw new TypeError(\"Invalid JSON.\");\n    }\n    this.moc = json.model;\n    copyArray(\"string\", json, this, \"textures\", \"textures\");\n    this.copy(json);\n  }\n  /**\n   * Checks if a JSON object is valid model settings.\n   * @param json\n   */\n  static isValidJSON(json) {\n    var _a;\n    return !!json && typeof json.model === \"string\" && ((_a = json.textures) == null ? void 0 : _a.length) > 0 && // textures must be an array of strings\n    json.textures.every((item) => typeof item === \"string\");\n  }\n  /**\n   * Validates and copies *optional* properties from raw JSON.\n   */\n  copy(json) {\n    copyProperty(\"string\", json, this, \"name\", \"name\");\n    copyProperty(\"string\", json, this, \"pose\", \"pose\");\n    copyProperty(\"string\", json, this, \"physics\", \"physics\");\n    copyProperty(\"object\", json, this, \"layout\", \"layout\");\n    copyProperty(\"object\", json, this, \"motions\", \"motions\");\n    copyArray(\"object\", json, this, \"hit_areas\", \"hitAreas\");\n    copyArray(\"object\", json, this, \"expressions\", \"expressions\");\n    copyArray(\"object\", json, this, \"init_params\", \"initParams\");\n    copyArray(\"object\", json, this, \"init_opacities\", \"initOpacities\");\n  }\n  replaceFiles(replace) {\n    super.replaceFiles(replace);\n    for (const [group, motions] of Object.entries(this.motions)) {\n      for (let i = 0; i < motions.length; i++) {\n        motions[i].file = replace(motions[i].file, `motions.${group}[${i}].file`);\n        if (motions[i].sound !== void 0) {\n          motions[i].sound = replace(motions[i].sound, `motions.${group}[${i}].sound`);\n        }\n      }\n    }\n    if (this.expressions) {\n      for (let i = 0; i < this.expressions.length; i++) {\n        this.expressions[i].file = replace(\n          this.expressions[i].file,\n          `expressions[${i}].file`\n        );\n      }\n    }\n  }\n}\nconst SRC_TYPE_MAP = {\n  x: PhysicsHair.Src.SRC_TO_X,\n  y: PhysicsHair.Src.SRC_TO_Y,\n  angle: PhysicsHair.Src.SRC_TO_G_ANGLE\n};\nconst TARGET_TYPE_MAP = {\n  x: PhysicsHair.Src.SRC_TO_X,\n  y: PhysicsHair.Src.SRC_TO_Y,\n  angle: PhysicsHair.Src.SRC_TO_G_ANGLE\n};\nclass Live2DPhysics {\n  constructor(coreModel, json) {\n    __publicField(this, \"physicsHairs\", []);\n    this.coreModel = coreModel;\n    if (json.physics_hair) {\n      this.physicsHairs = json.physics_hair.map((definition) => {\n        const physicsHair = new PhysicsHair();\n        physicsHair.setup(\n          definition.setup.length,\n          definition.setup.regist,\n          definition.setup.mass\n        );\n        definition.src.forEach(({ id, ptype, scale, weight }) => {\n          const type = SRC_TYPE_MAP[ptype];\n          if (type) {\n            physicsHair.addSrcParam(type, id, scale, weight);\n          }\n        });\n        definition.targets.forEach(({ id, ptype, scale, weight }) => {\n          const type = TARGET_TYPE_MAP[ptype];\n          if (type) {\n            physicsHair.addTargetParam(type, id, scale, weight);\n          }\n        });\n        return physicsHair;\n      });\n    }\n  }\n  update(elapsed) {\n    this.physicsHairs.forEach((physicsHair) => physicsHair.update(this.coreModel, elapsed));\n  }\n}\nclass Live2DPartsParam {\n  constructor(id) {\n    __publicField(this, \"paramIndex\", -1);\n    __publicField(this, \"partsIndex\", -1);\n    __publicField(this, \"link\", []);\n    this.id = id;\n  }\n  initIndex(model) {\n    this.paramIndex = model.getParamIndex(\"VISIBLE:\" + this.id);\n    this.partsIndex = model.getPartsDataIndex(PartsDataID.getID(this.id));\n    model.setParamFloat(this.paramIndex, 1);\n  }\n}\nclass Live2DPose {\n  constructor(coreModel, json) {\n    __publicField(this, \"opacityAnimDuration\", 500);\n    __publicField(this, \"partsGroups\", []);\n    this.coreModel = coreModel;\n    if (json.parts_visible) {\n      this.partsGroups = json.parts_visible.map(\n        ({ group }) => group.map(({ id, link }) => {\n          const parts = new Live2DPartsParam(id);\n          if (link) {\n            parts.link = link.map((l) => new Live2DPartsParam(l));\n          }\n          return parts;\n        })\n      );\n      this.init();\n    }\n  }\n  init() {\n    this.partsGroups.forEach((group) => {\n      group.forEach((parts) => {\n        parts.initIndex(this.coreModel);\n        if (parts.paramIndex >= 0) {\n          const visible = this.coreModel.getParamFloat(parts.paramIndex) !== 0;\n          this.coreModel.setPartsOpacity(parts.partsIndex, visible ? 1 : 0);\n          this.coreModel.setParamFloat(parts.paramIndex, visible ? 1 : 0);\n          if (parts.link.length > 0) {\n            parts.link.forEach((p) => p.initIndex(this.coreModel));\n          }\n        }\n      });\n    });\n  }\n  normalizePartsOpacityGroup(partsGroup, dt) {\n    const model = this.coreModel;\n    const phi = 0.5;\n    const maxBackOpacity = 0.15;\n    let visibleOpacity = 1;\n    let visibleIndex = partsGroup.findIndex(\n      ({ paramIndex, partsIndex }) => partsIndex >= 0 && model.getParamFloat(paramIndex) !== 0\n    );\n    if (visibleIndex >= 0) {\n      const originalOpacity = model.getPartsOpacity(partsGroup[visibleIndex].partsIndex);\n      visibleOpacity = clamp(originalOpacity + dt / this.opacityAnimDuration, 0, 1);\n    } else {\n      visibleIndex = 0;\n      visibleOpacity = 1;\n    }\n    partsGroup.forEach(({ partsIndex }, index) => {\n      if (partsIndex >= 0) {\n        if (visibleIndex == index) {\n          model.setPartsOpacity(partsIndex, visibleOpacity);\n        } else {\n          let opacity = model.getPartsOpacity(partsIndex);\n          let a1;\n          if (visibleOpacity < phi) {\n            a1 = visibleOpacity * (phi - 1) / phi + 1;\n          } else {\n            a1 = (1 - visibleOpacity) * phi / (1 - phi);\n          }\n          const backOp = (1 - a1) * (1 - visibleOpacity);\n          if (backOp > maxBackOpacity) {\n            a1 = 1 - maxBackOpacity / (1 - visibleOpacity);\n          }\n          if (opacity > a1) {\n            opacity = a1;\n          }\n          model.setPartsOpacity(partsIndex, opacity);\n        }\n      }\n    });\n  }\n  copyOpacity(partsGroup) {\n    const model = this.coreModel;\n    partsGroup.forEach(({ partsIndex, link }) => {\n      if (partsIndex >= 0 && link) {\n        const opacity = model.getPartsOpacity(partsIndex);\n        link.forEach(({ partsIndex: partsIndex2 }) => {\n          if (partsIndex2 >= 0) {\n            model.setPartsOpacity(partsIndex2, opacity);\n          }\n        });\n      }\n    });\n  }\n  update(dt) {\n    this.partsGroups.forEach((partGroup) => {\n      this.normalizePartsOpacityGroup(partGroup, dt);\n      this.copyOpacity(partGroup);\n    });\n  }\n}\nLive2DFactory.registerRuntime({\n  version: 2,\n  test(source) {\n    return source instanceof Cubism2ModelSettings || Cubism2ModelSettings.isValidJSON(source);\n  },\n  ready() {\n    return Promise.resolve();\n  },\n  isValidMoc(modelData) {\n    if (modelData.byteLength < 3) {\n      return false;\n    }\n    const view = new Int8Array(modelData, 0, 3);\n    return String.fromCharCode(...view) === \"moc\";\n  },\n  createModelSettings(json) {\n    return new Cubism2ModelSettings(json);\n  },\n  createCoreModel(data) {\n    const model = Live2DModelWebGL.loadModel(data);\n    const error = Live2D.getError();\n    if (error)\n      throw error;\n    return model;\n  },\n  createInternalModel(coreModel, settings, options) {\n    return new Cubism2InternalModel(coreModel, settings, options);\n  },\n  createPose(coreModel, data) {\n    return new Live2DPose(coreModel, data);\n  },\n  createPhysics(coreModel, data) {\n    return new Live2DPhysics(coreModel, data);\n  }\n});\nif (!window.Live2DCubismCore) {\n  throw new Error(\n    \"Could not find Cubism 4 runtime. This plugin requires live2dcubismcore.js to be loaded.\"\n  );\n}\nclass CubismVector2 {\n  /**\n   * コンストラクタ\n   */\n  constructor(x, y) {\n    this.x = x || 0;\n    this.y = y || 0;\n  }\n  /**\n   * ベクトルの加算\n   *\n   * @param vector2 加算するベクトル値\n   * @return 加算結果 ベクトル値\n   */\n  add(vector2) {\n    const ret = new CubismVector2(0, 0);\n    ret.x = this.x + vector2.x;\n    ret.y = this.y + vector2.y;\n    return ret;\n  }\n  /**\n   * ベクトルの減算\n   *\n   * @param vector2 減算するベクトル値\n   * @return 減算結果 ベクトル値\n   */\n  substract(vector2) {\n    const ret = new CubismVector2(0, 0);\n    ret.x = this.x - vector2.x;\n    ret.y = this.y - vector2.y;\n    return ret;\n  }\n  /**\n   * ベクトルの乗算\n   *\n   * @param vector2 乗算するベクトル値\n   * @return 乗算結果 ベクトル値\n   */\n  multiply(vector2) {\n    const ret = new CubismVector2(0, 0);\n    ret.x = this.x * vector2.x;\n    ret.y = this.y * vector2.y;\n    return ret;\n  }\n  /**\n   * ベクトルの乗算(スカラー)\n   *\n   * @param scalar 乗算するスカラー値\n   * @return 乗算結果 ベクトル値\n   */\n  multiplyByScaler(scalar) {\n    return this.multiply(new CubismVector2(scalar, scalar));\n  }\n  /**\n   * ベクトルの除算\n   *\n   * @param vector2 除算するベクトル値\n   * @return 除算結果 ベクトル値\n   */\n  division(vector2) {\n    const ret = new CubismVector2(0, 0);\n    ret.x = this.x / vector2.x;\n    ret.y = this.y / vector2.y;\n    return ret;\n  }\n  /**\n   * ベクトルの除算(スカラー)\n   *\n   * @param scalar 除算するスカラー値\n   * @return 除算結果 ベクトル値\n   */\n  divisionByScalar(scalar) {\n    return this.division(new CubismVector2(scalar, scalar));\n  }\n  /**\n   * ベクトルの長さを取得する\n   *\n   * @return ベクトルの長さ\n   */\n  getLength() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n  /**\n   * ベクトルの距離の取得\n   *\n   * @param a 点\n   * @return ベクトルの距離\n   */\n  getDistanceWith(a) {\n    return Math.sqrt(\n      (this.x - a.x) * (this.x - a.x) + (this.y - a.y) * (this.y - a.y)\n    );\n  }\n  /**\n   * ドット積の計算\n   *\n   * @param a 値\n   * @return 結果\n   */\n  dot(a) {\n    return this.x * a.x + this.y * a.y;\n  }\n  /**\n   * 正規化の適用\n   */\n  normalize() {\n    const length = Math.pow(this.x * this.x + this.y * this.y, 0.5);\n    this.x = this.x / length;\n    this.y = this.y / length;\n  }\n  /**\n   * 等しさの確認（等しいか？）\n   *\n   * 値が等しいか？\n   *\n   * @param rhs 確認する値\n   * @return true 値は等しい\n   * @return false 値は等しくない\n   */\n  isEqual(rhs) {\n    return this.x == rhs.x && this.y == rhs.y;\n  }\n  /**\n   * 等しさの確認（等しくないか？）\n   *\n   * 値が等しくないか？\n   *\n   * @param rhs 確認する値\n   * @return true 値は等しくない\n   * @return false 値は等しい\n   */\n  isNotEqual(rhs) {\n    return !this.isEqual(rhs);\n  }\n}\nconst _CubismMath = class _CubismMath {\n  /**\n   * 第一引数の値を最小値と最大値の範囲に収めた値を返す\n   *\n   * @param value 収められる値\n   * @param min   範囲の最小値\n   * @param max   範囲の最大値\n   * @return 最小値と最大値の範囲に収めた値\n   */\n  static range(value, min, max) {\n    if (value < min) {\n      value = min;\n    } else if (value > max) {\n      value = max;\n    }\n    return value;\n  }\n  /**\n   * サイン関数の値を求める\n   *\n   * @param x 角度値（ラジアン）\n   * @return サイン関数sin(x)の値\n   */\n  static sin(x) {\n    return Math.sin(x);\n  }\n  /**\n   * コサイン関数の値を求める\n   *\n   * @param x 角度値(ラジアン)\n   * @return コサイン関数cos(x)の値\n   */\n  static cos(x) {\n    return Math.cos(x);\n  }\n  /**\n   * 値の絶対値を求める\n   *\n   * @param x 絶対値を求める値\n   * @return 値の絶対値\n   */\n  static abs(x) {\n    return Math.abs(x);\n  }\n  /**\n   * 平方根(ルート)を求める\n   * @param x -> 平方根を求める値\n   * @return 値の平方根\n   */\n  static sqrt(x) {\n    return Math.sqrt(x);\n  }\n  /**\n   * 立方根を求める\n   * @param x -> 立方根を求める値\n   * @return 値の立方根\n   */\n  static cbrt(x) {\n    if (x === 0) {\n      return x;\n    }\n    let cx = x;\n    const isNegativeNumber = cx < 0;\n    if (isNegativeNumber) {\n      cx = -cx;\n    }\n    let ret;\n    if (cx === Infinity) {\n      ret = Infinity;\n    } else {\n      ret = Math.exp(Math.log(cx) / 3);\n      ret = (cx / (ret * ret) + 2 * ret) / 3;\n    }\n    return isNegativeNumber ? -ret : ret;\n  }\n  /**\n   * イージング処理されたサインを求める\n   * フェードイン・アウト時のイージングに利用できる\n   *\n   * @param value イージングを行う値\n   * @return イージング処理されたサイン値\n   */\n  static getEasingSine(value) {\n    if (value < 0) {\n      return 0;\n    } else if (value > 1) {\n      return 1;\n    }\n    return 0.5 - 0.5 * this.cos(value * Math.PI);\n  }\n  /**\n   * 大きい方の値を返す\n   *\n   * @param left 左辺の値\n   * @param right 右辺の値\n   * @return 大きい方の値\n   */\n  static max(left, right) {\n    return left > right ? left : right;\n  }\n  /**\n   * 小さい方の値を返す\n   *\n   * @param left  左辺の値\n   * @param right 右辺の値\n   * @return 小さい方の値\n   */\n  static min(left, right) {\n    return left > right ? right : left;\n  }\n  /**\n   * 角度値をラジアン値に変換する\n   *\n   * @param degrees   角度値\n   * @return 角度値から変換したラジアン値\n   */\n  static degreesToRadian(degrees) {\n    return degrees / 180 * Math.PI;\n  }\n  /**\n   * ラジアン値を角度値に変換する\n   *\n   * @param radian    ラジアン値\n   * @return ラジアン値から変換した角度値\n   */\n  static radianToDegrees(radian) {\n    return radian * 180 / Math.PI;\n  }\n  /**\n   * ２つのベクトルからラジアン値を求める\n   *\n   * @param from  始点ベクトル\n   * @param to    終点ベクトル\n   * @return ラジアン値から求めた方向ベクトル\n   */\n  static directionToRadian(from, to) {\n    const q1 = Math.atan2(to.y, to.x);\n    const q2 = Math.atan2(from.y, from.x);\n    let ret = q1 - q2;\n    while (ret < -Math.PI) {\n      ret += Math.PI * 2;\n    }\n    while (ret > Math.PI) {\n      ret -= Math.PI * 2;\n    }\n    return ret;\n  }\n  /**\n   * ２つのベクトルから角度値を求める\n   *\n   * @param from  始点ベクトル\n   * @param to    終点ベクトル\n   * @return 角度値から求めた方向ベクトル\n   */\n  static directionToDegrees(from, to) {\n    const radian = this.directionToRadian(from, to);\n    let degree = this.radianToDegrees(radian);\n    if (to.x - from.x > 0) {\n      degree = -degree;\n    }\n    return degree;\n  }\n  /**\n   * ラジアン値を方向ベクトルに変換する。\n   *\n   * @param totalAngle    ラジアン値\n   * @return ラジアン値から変換した方向ベクトル\n   */\n  static radianToDirection(totalAngle) {\n    const ret = new CubismVector2();\n    ret.x = this.sin(totalAngle);\n    ret.y = this.cos(totalAngle);\n    return ret;\n  }\n  /**\n   * 三次方程式の三次項の係数が0になったときに補欠的に二次方程式の解をもとめる。\n   * a * x^2 + b * x + c = 0\n   *\n   * @param   a -> 二次項の係数値\n   * @param   b -> 一次項の係数値\n   * @param   c -> 定数項の値\n   * @return  二次方程式の解\n   */\n  static quadraticEquation(a, b, c) {\n    if (this.abs(a) < _CubismMath.Epsilon) {\n      if (this.abs(b) < _CubismMath.Epsilon) {\n        return -c;\n      }\n      return -c / b;\n    }\n    return -(b + this.sqrt(b * b - 4 * a * c)) / (2 * a);\n  }\n  /**\n   * カルダノの公式によってベジェのt値に該当する３次方程式の解を求める。\n   * 重解になったときには0.0～1.0の値になる解を返す。\n   *\n   * a * x^3 + b * x^2 + c * x + d = 0\n   *\n   * @param   a -> 三次項の係数値\n   * @param   b -> 二次項の係数値\n   * @param   c -> 一次項の係数値\n   * @param   d -> 定数項の値\n   * @return  0.0～1.0の間にある解\n   */\n  static cardanoAlgorithmForBezier(a, b, c, d) {\n    if (this.sqrt(a) < _CubismMath.Epsilon) {\n      return this.range(this.quadraticEquation(b, c, d), 0, 1);\n    }\n    const ba = b / a;\n    const ca = c / a;\n    const da = d / a;\n    const p = (3 * ca - ba * ba) / 3;\n    const p3 = p / 3;\n    const q = (2 * ba * ba * ba - 9 * ba * ca + 27 * da) / 27;\n    const q2 = q / 2;\n    const discriminant = q2 * q2 + p3 * p3 * p3;\n    const center = 0.5;\n    const threshold = center + 0.01;\n    if (discriminant < 0) {\n      const mp3 = -p / 3;\n      const mp33 = mp3 * mp3 * mp3;\n      const r = this.sqrt(mp33);\n      const t = -q / (2 * r);\n      const cosphi = this.range(t, -1, 1);\n      const phi = Math.acos(cosphi);\n      const crtr = this.cbrt(r);\n      const t1 = 2 * crtr;\n      const root12 = t1 * this.cos(phi / 3) - ba / 3;\n      if (this.abs(root12 - center) < threshold) {\n        return this.range(root12, 0, 1);\n      }\n      const root2 = t1 * this.cos((phi + 2 * Math.PI) / 3) - ba / 3;\n      if (this.abs(root2 - center) < threshold) {\n        return this.range(root2, 0, 1);\n      }\n      const root3 = t1 * this.cos((phi + 4 * Math.PI) / 3) - ba / 3;\n      return this.range(root3, 0, 1);\n    }\n    if (discriminant == 0) {\n      let u12;\n      if (q2 < 0) {\n        u12 = this.cbrt(-q2);\n      } else {\n        u12 = -this.cbrt(q2);\n      }\n      const root12 = 2 * u12 - ba / 3;\n      if (this.abs(root12 - center) < threshold) {\n        return this.range(root12, 0, 1);\n      }\n      const root2 = -u12 - ba / 3;\n      return this.range(root2, 0, 1);\n    }\n    const sd = this.sqrt(discriminant);\n    const u1 = this.cbrt(sd - q2);\n    const v1 = this.cbrt(sd + q2);\n    const root1 = u1 - v1 - ba / 3;\n    return this.range(root1, 0, 1);\n  }\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n  }\n};\n_CubismMath.Epsilon = 1e-5;\nlet CubismMath = _CubismMath;\nclass CubismMatrix44 {\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    this._tr = new Float32Array(16);\n    this.loadIdentity();\n  }\n  /**\n   * 受け取った２つの行列の乗算を行う。\n   *\n   * @param a 行列a\n   * @param b 行列b\n   * @return 乗算結果の行列\n   */\n  static multiply(a, b, dst) {\n    const c = new Float32Array([\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0\n    ]);\n    const n = 4;\n    for (let i = 0; i < n; ++i) {\n      for (let j = 0; j < n; ++j) {\n        for (let k = 0; k < n; ++k) {\n          c[j + i * 4] += a[k + i * 4] * b[j + k * 4];\n        }\n      }\n    }\n    for (let i = 0; i < 16; ++i) {\n      dst[i] = c[i];\n    }\n  }\n  /**\n   * 単位行列に初期化する\n   */\n  loadIdentity() {\n    const c = new Float32Array([\n      1,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0,\n      0,\n      0,\n      0,\n      1\n    ]);\n    this.setMatrix(c);\n  }\n  /**\n   * 行列を設定\n   *\n   * @param tr 16個の浮動小数点数で表される4x4の行列\n   */\n  setMatrix(tr) {\n    for (let i = 0; i < 16; ++i) {\n      this._tr[i] = tr[i];\n    }\n  }\n  /**\n   * 行列を浮動小数点数の配列で取得\n   *\n   * @return 16個の浮動小数点数で表される4x4の行列\n   */\n  getArray() {\n    return this._tr;\n  }\n  /**\n   * X軸の拡大率を取得\n   * @return X軸の拡大率\n   */\n  getScaleX() {\n    return this._tr[0];\n  }\n  /**\n   * Y軸の拡大率を取得する\n   *\n   * @return Y軸の拡大率\n   */\n  getScaleY() {\n    return this._tr[5];\n  }\n  /**\n   * X軸の移動量を取得\n   * @return X軸の移動量\n   */\n  getTranslateX() {\n    return this._tr[12];\n  }\n  /**\n   * Y軸の移動量を取得\n   * @return Y軸の移動量\n   */\n  getTranslateY() {\n    return this._tr[13];\n  }\n  /**\n   * X軸の値を現在の行列で計算\n   *\n   * @param src X軸の値\n   * @return 現在の行列で計算されたX軸の値\n   */\n  transformX(src) {\n    return this._tr[0] * src + this._tr[12];\n  }\n  /**\n   * Y軸の値を現在の行列で計算\n   *\n   * @param src Y軸の値\n   * @return 現在の行列で計算されたY軸の値\n   */\n  transformY(src) {\n    return this._tr[5] * src + this._tr[13];\n  }\n  /**\n   * X軸の値を現在の行列で逆計算\n   */\n  invertTransformX(src) {\n    return (src - this._tr[12]) / this._tr[0];\n  }\n  /**\n   * Y軸の値を現在の行列で逆計算\n   */\n  invertTransformY(src) {\n    return (src - this._tr[13]) / this._tr[5];\n  }\n  /**\n   * 現在の行列の位置を起点にして移動\n   *\n   * 現在の行列の位置を起点にして相対的に移動する。\n   *\n   * @param x X軸の移動量\n   * @param y Y軸の移動量\n   */\n  translateRelative(x, y) {\n    const tr1 = new Float32Array([\n      1,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0,\n      x,\n      y,\n      0,\n      1\n    ]);\n    CubismMatrix44.multiply(tr1, this._tr, this._tr);\n  }\n  /**\n   * 現在の行列の位置を移動\n   *\n   * 現在の行列の位置を指定した位置へ移動する\n   *\n   * @param x X軸の移動量\n   * @param y y軸の移動量\n   */\n  translate(x, y) {\n    this._tr[12] = x;\n    this._tr[13] = y;\n  }\n  /**\n   * 現在の行列のX軸の位置を指定した位置へ移動する\n   *\n   * @param x X軸の移動量\n   */\n  translateX(x) {\n    this._tr[12] = x;\n  }\n  /**\n   * 現在の行列のY軸の位置を指定した位置へ移動する\n   *\n   * @param y Y軸の移動量\n   */\n  translateY(y) {\n    this._tr[13] = y;\n  }\n  /**\n   * 現在の行列の拡大率を相対的に設定する\n   *\n   * @param x X軸の拡大率\n   * @param y Y軸の拡大率\n   */\n  scaleRelative(x, y) {\n    const tr1 = new Float32Array([\n      x,\n      0,\n      0,\n      0,\n      0,\n      y,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0,\n      0,\n      0,\n      0,\n      1\n    ]);\n    CubismMatrix44.multiply(tr1, this._tr, this._tr);\n  }\n  /**\n   * 現在の行列の拡大率を指定した倍率に設定する\n   *\n   * @param x X軸の拡大率\n   * @param y Y軸の拡大率\n   */\n  scale(x, y) {\n    this._tr[0] = x;\n    this._tr[5] = y;\n  }\n  /**\n   * 現在の行列に行列を乗算\n   *\n   * @param m 行列\n   */\n  multiplyByMatrix(m) {\n    CubismMatrix44.multiply(m.getArray(), this._tr, this._tr);\n  }\n  /**\n   * オブジェクトのコピーを生成する\n   */\n  clone() {\n    const cloneMatrix = new CubismMatrix44();\n    for (let i = 0; i < this._tr.length; i++) {\n      cloneMatrix._tr[i] = this._tr[i];\n    }\n    return cloneMatrix;\n  }\n  // 4x4行列データ\n}\nclass CubismRenderer {\n  /**\n   * レンダラの初期化処理を実行する\n   * 引数に渡したモデルからレンダラの初期化処理に必要な情報を取り出すことができる\n   * @param model モデルのインスタンス\n   */\n  initialize(model) {\n    this._model = model;\n  }\n  /**\n   * モデルを描画する\n   */\n  drawModel() {\n    if (this.getModel() == null)\n      return;\n    this.saveProfile();\n    this.doDrawModel();\n    this.restoreProfile();\n  }\n  /**\n   * Model-View-Projection 行列をセットする\n   * 配列は複製されるので、元の配列は外で破棄して良い\n   * @param matrix44 Model-View-Projection 行列\n   */\n  setMvpMatrix(matrix44) {\n    this._mvpMatrix4x4.setMatrix(matrix44.getArray());\n  }\n  /**\n   * Model-View-Projection 行列を取得する\n   * @return Model-View-Projection 行列\n   */\n  getMvpMatrix() {\n    return this._mvpMatrix4x4;\n  }\n  /**\n   * モデルの色をセットする\n   * 各色0.0~1.0の間で指定する（1.0が標準の状態）\n   * @param red 赤チャンネルの値\n   * @param green 緑チャンネルの値\n   * @param blue 青チャンネルの値\n   * @param alpha αチャンネルの値\n   */\n  setModelColor(red, green, blue, alpha) {\n    if (red < 0) {\n      red = 0;\n    } else if (red > 1) {\n      red = 1;\n    }\n    if (green < 0) {\n      green = 0;\n    } else if (green > 1) {\n      green = 1;\n    }\n    if (blue < 0) {\n      blue = 0;\n    } else if (blue > 1) {\n      blue = 1;\n    }\n    if (alpha < 0) {\n      alpha = 0;\n    } else if (alpha > 1) {\n      alpha = 1;\n    }\n    this._modelColor.R = red;\n    this._modelColor.G = green;\n    this._modelColor.B = blue;\n    this._modelColor.A = alpha;\n  }\n  /**\n   * モデルの色を取得する\n   * 各色0.0~1.0の間で指定する(1.0が標準の状態)\n   *\n   * @return RGBAのカラー情報\n   */\n  getModelColor() {\n    return Object.assign({}, this._modelColor);\n  }\n  /**\n   * 乗算済みαの有効・無効をセットする\n   * 有効にするならtrue、無効にするならfalseをセットする\n   */\n  setIsPremultipliedAlpha(enable) {\n    this._isPremultipliedAlpha = enable;\n  }\n  /**\n   * 乗算済みαの有効・無効を取得する\n   * @return true 乗算済みのα有効\n   * @return false 乗算済みのα無効\n   */\n  isPremultipliedAlpha() {\n    return this._isPremultipliedAlpha;\n  }\n  /**\n   * カリング（片面描画）の有効・無効をセットする。\n   * 有効にするならtrue、無効にするならfalseをセットする\n   */\n  setIsCulling(culling) {\n    this._isCulling = culling;\n  }\n  /**\n   * カリング（片面描画）の有効・無効を取得する。\n   * @return true カリング有効\n   * @return false カリング無効\n   */\n  isCulling() {\n    return this._isCulling;\n  }\n  /**\n   * テクスチャの異方性フィルタリングのパラメータをセットする\n   * パラメータ値の影響度はレンダラの実装に依存する\n   * @param n パラメータの値\n   */\n  setAnisotropy(n) {\n    this._anisotropy = n;\n  }\n  /**\n   * テクスチャの異方性フィルタリングのパラメータをセットする\n   * @return 異方性フィルタリングのパラメータ\n   */\n  getAnisotropy() {\n    return this._anisotropy;\n  }\n  /**\n   * レンダリングするモデルを取得する\n   * @return レンダリングするモデル\n   */\n  getModel() {\n    return this._model;\n  }\n  /**\n   * マスク描画の方式を変更する。\n   * falseの場合、マスクを1枚のテクスチャに分割してレンダリングする（デフォルト）\n   * 高速だが、マスク個数の上限が36に限定され、質も荒くなる\n   * trueの場合、パーツ描画の前にその都度必要なマスクを描き直す\n   * レンダリング品質は高いが描画処理負荷は増す\n   * @param high 高精細マスクに切り替えるか？\n   */\n  useHighPrecisionMask(high) {\n    this._useHighPrecisionMask = high;\n  }\n  /**\n   * マスクの描画方式を取得する\n   * @return true 高精細方式\n   * @return false デフォルト\n   */\n  isUsingHighPrecisionMask() {\n    return this._useHighPrecisionMask;\n  }\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    this._isCulling = false;\n    this._isPremultipliedAlpha = false;\n    this._anisotropy = 0;\n    this._modelColor = new CubismTextureColor();\n    this._useHighPrecisionMask = false;\n    this._mvpMatrix4x4 = new CubismMatrix44();\n    this._mvpMatrix4x4.loadIdentity();\n  }\n  // falseの場合、マスクを纏めて描画する trueの場合、マスクはパーツ描画ごとに書き直す\n}\nvar CubismBlendMode = /* @__PURE__ */ ((CubismBlendMode2) => {\n  CubismBlendMode2[CubismBlendMode2[\"CubismBlendMode_Normal\"] = 0] = \"CubismBlendMode_Normal\";\n  CubismBlendMode2[CubismBlendMode2[\"CubismBlendMode_Additive\"] = 1] = \"CubismBlendMode_Additive\";\n  CubismBlendMode2[CubismBlendMode2[\"CubismBlendMode_Multiplicative\"] = 2] = \"CubismBlendMode_Multiplicative\";\n  return CubismBlendMode2;\n})(CubismBlendMode || {});\nclass CubismTextureColor {\n  /**\n   * コンストラクタ\n   */\n  constructor(r = 1, g = 1, b = 1, a = 1) {\n    this.R = r;\n    this.G = g;\n    this.B = b;\n    this.A = a;\n  }\n  // αチャンネル\n}\nlet s_isStarted = false;\nlet s_isInitialized = false;\nlet s_option = void 0;\nconst Constant = {\n  vertexOffset: 0,\n  // メッシュ頂点のオフセット値\n  vertexStep: 2\n  // メッシュ頂点のステップ値\n};\nclass CubismFramework {\n  /**\n   * Cubism FrameworkのAPIを使用可能にする。\n   *  APIを実行する前に必ずこの関数を実行すること。\n   *  一度準備が完了して以降は、再び実行しても内部処理がスキップされます。\n   *\n   * @param    option      Optionクラスのインスタンス\n   *\n   * @return   準備処理が完了したらtrueが返ります。\n   */\n  static startUp(option) {\n    if (s_isStarted) {\n      CubismLogInfo(\"CubismFramework.startUp() is already done.\");\n      return s_isStarted;\n    }\n    if (Live2DCubismCore._isStarted) {\n      s_isStarted = true;\n      return true;\n    }\n    Live2DCubismCore._isStarted = true;\n    s_option = option;\n    if (s_option) {\n      Live2DCubismCore.Logging.csmSetLogFunction(s_option.logFunction);\n    }\n    s_isStarted = true;\n    if (s_isStarted) {\n      const version = Live2DCubismCore.Version.csmGetVersion();\n      const major = (version & 4278190080) >> 24;\n      const minor = (version & 16711680) >> 16;\n      const patch = version & 65535;\n      const versionNumber = version;\n      CubismLogInfo(\n        `Live2D Cubism Core version: {0}.{1}.{2} ({3})`,\n        (\"00\" + major).slice(-2),\n        (\"00\" + minor).slice(-2),\n        (\"0000\" + patch).slice(-4),\n        versionNumber\n      );\n    }\n    CubismLogInfo(\"CubismFramework.startUp() is complete.\");\n    return s_isStarted;\n  }\n  /**\n   * StartUp()で初期化したCubismFrameworkの各パラメータをクリアします。\n   * Dispose()したCubismFrameworkを再利用する際に利用してください。\n   */\n  static cleanUp() {\n    s_isStarted = false;\n    s_isInitialized = false;\n    s_option = void 0;\n  }\n  /**\n   * Cubism Framework内のリソースを初期化してモデルを表示可能な状態にします。<br>\n   *     再度Initialize()するには先にDispose()を実行する必要があります。\n   *\n   * @param memorySize 初期化時メモリ量 [byte(s)]\n   *    複数モデル表示時などにモデルが更新されない際に使用してください。\n   *    指定する際は必ず1024*1024*16 byte(16MB)以上の値を指定してください。\n   *    それ以外はすべて1024*1024*16 byteに丸めます。\n   */\n  static initialize(memorySize = 0) {\n    if (!s_isStarted) {\n      CubismLogWarning(\"CubismFramework is not started.\");\n      return;\n    }\n    if (s_isInitialized) {\n      CubismLogWarning(\n        \"CubismFramework.initialize() skipped, already initialized.\"\n      );\n      return;\n    }\n    Live2DCubismCore.Memory.initializeAmountOfMemory(memorySize);\n    s_isInitialized = true;\n    CubismLogInfo(\"CubismFramework.initialize() is complete.\");\n  }\n  /**\n   * Cubism Framework内の全てのリソースを解放します。\n   *      ただし、外部で確保されたリソースについては解放しません。\n   *      外部で適切に破棄する必要があります。\n   */\n  static dispose() {\n    if (!s_isStarted) {\n      CubismLogWarning(\"CubismFramework is not started.\");\n      return;\n    }\n    if (!s_isInitialized) {\n      CubismLogWarning(\"CubismFramework.dispose() skipped, not initialized.\");\n      return;\n    }\n    CubismRenderer.staticRelease();\n    s_isInitialized = false;\n    CubismLogInfo(\"CubismFramework.dispose() is complete.\");\n  }\n  /**\n   * Cubism FrameworkのAPIを使用する準備が完了したかどうか\n   * @return APIを使用する準備が完了していればtrueが返ります。\n   */\n  static isStarted() {\n    return s_isStarted;\n  }\n  /**\n   * Cubism Frameworkのリソース初期化がすでに行われているかどうか\n   * @return リソース確保が完了していればtrueが返ります\n   */\n  static isInitialized() {\n    return s_isInitialized;\n  }\n  /**\n   * Core APIにバインドしたログ関数を実行する\n   *\n   * @praram message ログメッセージ\n   */\n  static coreLogFunction(message) {\n    if (!Live2DCubismCore.Logging.csmGetLogFunction()) {\n      return;\n    }\n    Live2DCubismCore.Logging.csmGetLogFunction()(message);\n  }\n  /**\n   * 現在のログ出力レベル設定の値を返す。\n   *\n   * @return  現在のログ出力レベル設定の値\n   */\n  static getLoggingLevel() {\n    if (s_option != null) {\n      return s_option.loggingLevel;\n    }\n    return 5;\n  }\n  /**\n   * 静的クラスとして使用する\n   * インスタンス化させない\n   */\n  constructor() {\n  }\n}\nvar LogLevel = /* @__PURE__ */ ((LogLevel2) => {\n  LogLevel2[LogLevel2[\"LogLevel_Verbose\"] = 0] = \"LogLevel_Verbose\";\n  LogLevel2[LogLevel2[\"LogLevel_Debug\"] = 1] = \"LogLevel_Debug\";\n  LogLevel2[LogLevel2[\"LogLevel_Info\"] = 2] = \"LogLevel_Info\";\n  LogLevel2[LogLevel2[\"LogLevel_Warning\"] = 3] = \"LogLevel_Warning\";\n  LogLevel2[LogLevel2[\"LogLevel_Error\"] = 4] = \"LogLevel_Error\";\n  LogLevel2[LogLevel2[\"LogLevel_Off\"] = 5] = \"LogLevel_Off\";\n  return LogLevel2;\n})(LogLevel || {});\nconst CSM_ASSERT = process.env.NODE_ENV === \"production\" ? () => {\n} : (expr) => console.assert(expr);\nfunction CubismLogDebug(fmt, ...args) {\n  CubismDebug.print(LogLevel.LogLevel_Debug, \"[CSM][D]\" + fmt + \"\\n\", args);\n}\nfunction CubismLogInfo(fmt, ...args) {\n  CubismDebug.print(LogLevel.LogLevel_Info, \"[CSM][I]\" + fmt + \"\\n\", args);\n}\nfunction CubismLogWarning(fmt, ...args) {\n  CubismDebug.print(LogLevel.LogLevel_Warning, \"[CSM][W]\" + fmt + \"\\n\", args);\n}\nfunction CubismLogError(fmt, ...args) {\n  CubismDebug.print(LogLevel.LogLevel_Error, \"[CSM][E]\" + fmt + \"\\n\", args);\n}\nclass CubismDebug {\n  /**\n   * ログを出力する。第一引数にログレベルを設定する。\n   * CubismFramework.initialize()時にオプションで設定されたログ出力レベルを下回る場合はログに出さない。\n   *\n   * @param logLevel ログレベルの設定\n   * @param format 書式付き文字列\n   * @param args 可変長引数\n   */\n  static print(logLevel, format, args) {\n    if (logLevel < CubismFramework.getLoggingLevel()) {\n      return;\n    }\n    const logPrint = CubismFramework.coreLogFunction;\n    if (!logPrint)\n      return;\n    const buffer = format.replace(/{(\\d+)}/g, (m, k) => {\n      return args[k];\n    });\n    logPrint(buffer);\n  }\n  /**\n   * データから指定した長さだけダンプ出力する。\n   * CubismFramework.initialize()時にオプションで設定されたログ出力レベルを下回る場合はログに出さない。\n   *\n   * @param logLevel ログレベルの設定\n   * @param data ダンプするデータ\n   * @param length ダンプする長さ\n   */\n  static dumpBytes(logLevel, data, length) {\n    for (let i = 0; i < length; i++) {\n      if (i % 16 == 0 && i > 0)\n        this.print(logLevel, \"\\n\");\n      else if (i % 8 == 0 && i > 0)\n        this.print(logLevel, \"  \");\n      this.print(logLevel, \"{0} \", [data[i] & 255]);\n    }\n    this.print(logLevel, \"\\n\");\n  }\n  /**\n   * private コンストラクタ\n   */\n  constructor() {\n  }\n}\nclass ACubismMotion {\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    this._fadeInSeconds = -1;\n    this._fadeOutSeconds = -1;\n    this._weight = 1;\n    this._offsetSeconds = 0;\n    this._firedEventValues = [];\n  }\n  /**\n   * デストラクタ相当の処理\n   */\n  release() {\n    this._weight = 0;\n  }\n  /**\n   * モデルのパラメータ\n   * @param model 対象のモデル\n   * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション\n   * @param userTimeSeconds デルタ時間の積算値[秒]\n   */\n  updateParameters(model, motionQueueEntry, userTimeSeconds) {\n    if (!motionQueueEntry.isAvailable() || motionQueueEntry.isFinished()) {\n      return;\n    }\n    if (!motionQueueEntry.isStarted()) {\n      motionQueueEntry.setIsStarted(true);\n      motionQueueEntry.setStartTime(userTimeSeconds - this._offsetSeconds);\n      motionQueueEntry.setFadeInStartTime(userTimeSeconds);\n      const duration = this.getDuration();\n      if (motionQueueEntry.getEndTime() < 0) {\n        motionQueueEntry.setEndTime(\n          duration <= 0 ? -1 : motionQueueEntry.getStartTime() + duration\n        );\n      }\n    }\n    let fadeWeight = this._weight;\n    const fadeIn = this._fadeInSeconds == 0 ? 1 : CubismMath.getEasingSine(\n      (userTimeSeconds - motionQueueEntry.getFadeInStartTime()) / this._fadeInSeconds\n    );\n    const fadeOut = this._fadeOutSeconds == 0 || motionQueueEntry.getEndTime() < 0 ? 1 : CubismMath.getEasingSine(\n      (motionQueueEntry.getEndTime() - userTimeSeconds) / this._fadeOutSeconds\n    );\n    fadeWeight = fadeWeight * fadeIn * fadeOut;\n    motionQueueEntry.setState(userTimeSeconds, fadeWeight);\n    CSM_ASSERT(0 <= fadeWeight && fadeWeight <= 1);\n    this.doUpdateParameters(\n      model,\n      userTimeSeconds,\n      fadeWeight,\n      motionQueueEntry\n    );\n    if (motionQueueEntry.getEndTime() > 0 && motionQueueEntry.getEndTime() < userTimeSeconds) {\n      motionQueueEntry.setIsFinished(true);\n    }\n  }\n  /**\n   * フェードインの時間を設定する\n   * @param fadeInSeconds フェードインにかかる時間[秒]\n   */\n  setFadeInTime(fadeInSeconds) {\n    this._fadeInSeconds = fadeInSeconds;\n  }\n  /**\n   * フェードアウトの時間を設定する\n   * @param fadeOutSeconds フェードアウトにかかる時間[秒]\n   */\n  setFadeOutTime(fadeOutSeconds) {\n    this._fadeOutSeconds = fadeOutSeconds;\n  }\n  /**\n   * フェードアウトにかかる時間の取得\n   * @return フェードアウトにかかる時間[秒]\n   */\n  getFadeOutTime() {\n    return this._fadeOutSeconds;\n  }\n  /**\n   * フェードインにかかる時間の取得\n   * @return フェードインにかかる時間[秒]\n   */\n  getFadeInTime() {\n    return this._fadeInSeconds;\n  }\n  /**\n   * モーション適用の重みの設定\n   * @param weight 重み（0.0 - 1.0）\n   */\n  setWeight(weight) {\n    this._weight = weight;\n  }\n  /**\n   * モーション適用の重みの取得\n   * @return 重み（0.0 - 1.0）\n   */\n  getWeight() {\n    return this._weight;\n  }\n  /**\n   * モーションの長さの取得\n   * @return モーションの長さ[秒]\n   *\n   * @note ループの時は「-1」。\n   *       ループでない場合は、オーバーライドする。\n   *       正の値の時は取得される時間で終了する。\n   *       「-1」の時は外部から停止命令がない限り終わらない処理となる。\n   */\n  getDuration() {\n    return -1;\n  }\n  /**\n   * モーションのループ1回分の長さの取得\n   * @return モーションのループ一回分の長さ[秒]\n   *\n   * @note ループしない場合は、getDuration()と同じ値を返す\n   *       ループ一回分の長さが定義できない場合(プログラム的に動き続けるサブクラスなど)の場合は「-1」を返す\n   */\n  getLoopDuration() {\n    return -1;\n  }\n  /**\n   * モーション再生の開始時刻の設定\n   * @param offsetSeconds モーション再生の開始時刻[秒]\n   */\n  setOffsetTime(offsetSeconds) {\n    this._offsetSeconds = offsetSeconds;\n  }\n  /**\n   * モデルのパラメータ更新\n   *\n   * イベント発火のチェック。\n   * 入力する時間は呼ばれるモーションタイミングを０とした秒数で行う。\n   *\n   * @param beforeCheckTimeSeconds 前回のイベントチェック時間[秒]\n   * @param motionTimeSeconds 今回の再生時間[秒]\n   */\n  getFiredEvent(beforeCheckTimeSeconds, motionTimeSeconds) {\n    return this._firedEventValues;\n  }\n  /**\n   * モーション再生終了コールバックの登録\n   *\n   * モーション再生終了コールバックを登録する。\n   * isFinishedフラグを設定するタイミングで呼び出される。\n   * 以下の状態の際には呼び出されない:\n   *   1. 再生中のモーションが「ループ」として設定されているとき\n   *   2. コールバックが登録されていない時\n   *\n   * @param onFinishedMotionHandler モーション再生終了コールバック関数\n   */\n  setFinishedMotionHandler(onFinishedMotionHandler) {\n    this._onFinishedMotion = onFinishedMotionHandler;\n  }\n  /**\n   * モーション再生終了コールバックの取得\n   *\n   * モーション再生終了コールバックを取得する。\n   *\n   * @return 登録されているモーション再生終了コールバック関数\n   */\n  getFinishedMotionHandler() {\n    return this._onFinishedMotion;\n  }\n  /**\n   * 透明度のカーブが存在するかどうかを確認する\n   *\n   * @returns true  -> キーが存在する\n   *          false -> キーが存在しない\n   */\n  isExistModelOpacity() {\n    return false;\n  }\n  /**\n   * 透明度のカーブのインデックスを返す\n   *\n   * @returns success:透明度のカーブのインデックス\n   */\n  getModelOpacityIndex() {\n    return -1;\n  }\n  /**\n   * 透明度のIdを返す\n   *\n   * @param index モーションカーブのインデックス\n   * @returns success:透明度のId\n   */\n  getModelOpacityId(index) {\n    return void 0;\n  }\n  /**\n   * 指定時間の透明度の値を返す\n   *\n   * @returns success:モーションの現在時間におけるOpacityの値\n   *\n   * @note  更新後の値を取るにはUpdateParameters() の後に呼び出す。\n   */\n  getModelOpacityValue() {\n    return 1;\n  }\n}\nconst DefaultFadeTime = 1;\nclass CubismExpressionMotion extends ACubismMotion {\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    super();\n    this._parameters = [];\n  }\n  /**\n   * インスタンスを作成する。\n   * @param json expファイルが読み込まれているバッファ\n   * @param size バッファのサイズ\n   * @return 作成されたインスタンス\n   */\n  static create(json) {\n    const expression = new CubismExpressionMotion();\n    expression.parse(json);\n    return expression;\n  }\n  /**\n   * モデルのパラメータの更新の実行\n   * @param model 対象のモデル\n   * @param userTimeSeconds デルタ時間の積算値[秒]\n   * @param weight モーションの重み\n   * @param motionQueueEntry CubismMotionQueueManagerで管理されているモーション\n   */\n  doUpdateParameters(model, userTimeSeconds, weight, motionQueueEntry) {\n    for (let i = 0; i < this._parameters.length; ++i) {\n      const parameter = this._parameters[i];\n      switch (parameter.blendType) {\n        case 0: {\n          model.addParameterValueById(\n            parameter.parameterId,\n            parameter.value,\n            weight\n          );\n          break;\n        }\n        case 1: {\n          model.multiplyParameterValueById(\n            parameter.parameterId,\n            parameter.value,\n            weight\n          );\n          break;\n        }\n        case 2: {\n          model.setParameterValueById(\n            parameter.parameterId,\n            parameter.value,\n            weight\n          );\n          break;\n        }\n      }\n    }\n  }\n  parse(json) {\n    this.setFadeInTime(\n      json.FadeInTime != void 0 ? json.FadeInTime : DefaultFadeTime\n    );\n    this.setFadeOutTime(\n      json.FadeOutTime != void 0 ? json.FadeOutTime : DefaultFadeTime\n    );\n    const parameterCount = (json.Parameters || []).length;\n    for (let i = 0; i < parameterCount; ++i) {\n      const param = json.Parameters[i];\n      const parameterId = param.Id;\n      const value = param.Value;\n      let blendType;\n      if (!param.Blend || param.Blend === \"Add\") {\n        blendType = 0;\n      } else if (param.Blend === \"Multiply\") {\n        blendType = 1;\n      } else if (param.Blend === \"Overwrite\") {\n        blendType = 2;\n      } else {\n        blendType = 0;\n      }\n      const item = {\n        parameterId,\n        blendType,\n        value\n      };\n      this._parameters.push(item);\n    }\n  }\n  // 表情のパラメータ情報リスト\n}\nclass CubismMotionQueueEntry {\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    this._autoDelete = false;\n    this._available = true;\n    this._finished = false;\n    this._started = false;\n    this._startTimeSeconds = -1;\n    this._fadeInStartTimeSeconds = 0;\n    this._endTimeSeconds = -1;\n    this._stateTimeSeconds = 0;\n    this._stateWeight = 0;\n    this._lastEventCheckSeconds = 0;\n    this._motionQueueEntryHandle = this;\n    this._fadeOutSeconds = 0;\n    this._isTriggeredFadeOut = false;\n  }\n  /**\n   * デストラクタ相当の処理\n   */\n  release() {\n    if (this._autoDelete && this._motion) {\n      this._motion.release();\n    }\n  }\n  /**\n   * フェードアウト時間と開始判定の設定\n   * @param fadeOutSeconds フェードアウトにかかる時間[秒]\n   */\n  setFadeOut(fadeOutSeconds) {\n    this._fadeOutSeconds = fadeOutSeconds;\n    this._isTriggeredFadeOut = true;\n  }\n  /**\n   * フェードアウトの開始\n   * @param fadeOutSeconds フェードアウトにかかる時間[秒]\n   * @param userTimeSeconds デルタ時間の積算値[秒]\n   */\n  startFadeOut(fadeOutSeconds, userTimeSeconds) {\n    const newEndTimeSeconds = userTimeSeconds + fadeOutSeconds;\n    this._isTriggeredFadeOut = true;\n    if (this._endTimeSeconds < 0 || newEndTimeSeconds < this._endTimeSeconds) {\n      this._endTimeSeconds = newEndTimeSeconds;\n    }\n  }\n  /**\n   * モーションの終了の確認\n   *\n   * @return true モーションが終了した\n   * @return false 終了していない\n   */\n  isFinished() {\n    return this._finished;\n  }\n  /**\n   * モーションの開始の確認\n   * @return true モーションが開始した\n   * @return false 開始していない\n   */\n  isStarted() {\n    return this._started;\n  }\n  /**\n   * モーションの開始時刻の取得\n   * @return モーションの開始時刻[秒]\n   */\n  getStartTime() {\n    return this._startTimeSeconds;\n  }\n  /**\n   * フェードインの開始時刻の取得\n   * @return フェードインの開始時刻[秒]\n   */\n  getFadeInStartTime() {\n    return this._fadeInStartTimeSeconds;\n  }\n  /**\n   * フェードインの終了時刻の取得\n   * @return フェードインの終了時刻の取得\n   */\n  getEndTime() {\n    return this._endTimeSeconds;\n  }\n  /**\n   * モーションの開始時刻の設定\n   * @param startTime モーションの開始時刻\n   */\n  setStartTime(startTime) {\n    this._startTimeSeconds = startTime;\n  }\n  /**\n   * フェードインの開始時刻の設定\n   * @param startTime フェードインの開始時刻[秒]\n   */\n  setFadeInStartTime(startTime) {\n    this._fadeInStartTimeSeconds = startTime;\n  }\n  /**\n   * フェードインの終了時刻の設定\n   * @param endTime フェードインの終了時刻[秒]\n   */\n  setEndTime(endTime) {\n    this._endTimeSeconds = endTime;\n  }\n  /**\n   * モーションの終了の設定\n   * @param f trueならモーションの終了\n   */\n  setIsFinished(f) {\n    this._finished = f;\n  }\n  /**\n   * モーション開始の設定\n   * @param f trueならモーションの開始\n   */\n  setIsStarted(f) {\n    this._started = f;\n  }\n  /**\n   * モーションの有効性の確認\n   * @return true モーションは有効\n   * @return false モーションは無効\n   */\n  isAvailable() {\n    return this._available;\n  }\n  /**\n   * モーションの有効性の設定\n   * @param v trueならモーションは有効\n   */\n  setIsAvailable(v) {\n    this._available = v;\n  }\n  /**\n   * モーションの状態の設定\n   * @param timeSeconds 現在時刻[秒]\n   * @param weight モーション尾重み\n   */\n  setState(timeSeconds, weight) {\n    this._stateTimeSeconds = timeSeconds;\n    this._stateWeight = weight;\n  }\n  /**\n   * モーションの現在時刻の取得\n   * @return モーションの現在時刻[秒]\n   */\n  getStateTime() {\n    return this._stateTimeSeconds;\n  }\n  /**\n   * モーションの重みの取得\n   * @return モーションの重み\n   */\n  getStateWeight() {\n    return this._stateWeight;\n  }\n  /**\n   * 最後にイベントの発火をチェックした時間を取得\n   *\n   * @return 最後にイベントの発火をチェックした時間[秒]\n   */\n  getLastCheckEventSeconds() {\n    return this._lastEventCheckSeconds;\n  }\n  /**\n   * 最後にイベントをチェックした時間を設定\n   * @param checkSeconds 最後にイベントをチェックした時間[秒]\n   */\n  setLastCheckEventSeconds(checkSeconds) {\n    this._lastEventCheckSeconds = checkSeconds;\n  }\n  /**\n   * フェードアウト開始判定の取得\n   * @return フェードアウト開始するかどうか\n   */\n  isTriggeredFadeOut() {\n    return this._isTriggeredFadeOut;\n  }\n  /**\n   * フェードアウト時間の取得\n   * @return フェードアウト時間[秒]\n   */\n  getFadeOutSeconds() {\n    return this._fadeOutSeconds;\n  }\n  // インスタンスごとに一意の値を持つ識別番号\n}\nclass CubismMotionQueueManager {\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    this._userTimeSeconds = 0;\n    this._eventCustomData = null;\n    this._motions = [];\n  }\n  /**\n   * デストラクタ\n   */\n  release() {\n    for (let i = 0; i < this._motions.length; ++i) {\n      if (this._motions[i]) {\n        this._motions[i].release();\n      }\n    }\n    this._motions = void 0;\n  }\n  /**\n   * 指定したモーションの開始\n   *\n   * 指定したモーションを開始する。同じタイプのモーションが既にある場合は、既存のモーションに終了フラグを立て、フェードアウトを開始させる。\n   *\n   * @param   motion          開始するモーション\n   * @param   autoDelete      再生が終了したモーションのインスタンスを削除するなら true\n   * @param   userTimeSeconds デルタ時間の積算値[秒]\n   * @return                      開始したモーションの識別番号を返す。個別のモーションが終了したか否かを判定するIsFinished()の引数で使用する。開始できない時は「-1」\n   */\n  startMotion(motion, autoDelete, userTimeSeconds) {\n    if (motion == null) {\n      return InvalidMotionQueueEntryHandleValue;\n    }\n    let motionQueueEntry;\n    for (let i = 0; i < this._motions.length; ++i) {\n      motionQueueEntry = this._motions[i];\n      if (motionQueueEntry == null) {\n        continue;\n      }\n      motionQueueEntry.setFadeOut(motionQueueEntry._motion.getFadeOutTime());\n    }\n    motionQueueEntry = new CubismMotionQueueEntry();\n    motionQueueEntry._autoDelete = autoDelete;\n    motionQueueEntry._motion = motion;\n    this._motions.push(motionQueueEntry);\n    return motionQueueEntry._motionQueueEntryHandle;\n  }\n  /**\n   * 全てのモーションの終了の確認\n   * @return true 全て終了している\n   * @return false 終了していない\n   */\n  isFinished() {\n    let i = 0;\n    while (i < this._motions.length) {\n      const motionQueueEntry = this._motions[i];\n      if (motionQueueEntry == null) {\n        this._motions.splice(i, 1);\n        continue;\n      }\n      const motion = motionQueueEntry._motion;\n      if (motion == null) {\n        motionQueueEntry.release();\n        this._motions.splice(i, 1);\n        continue;\n      }\n      if (!motionQueueEntry.isFinished()) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  }\n  /**\n   * 指定したモーションの終了の確認\n   * @param motionQueueEntryNumber モーションの識別番号\n   * @return true 全て終了している\n   * @return false 終了していない\n   */\n  isFinishedByHandle(motionQueueEntryNumber) {\n    for (let i = 0; i < this._motions.length; i++) {\n      const motionQueueEntry = this._motions[i];\n      if (motionQueueEntry == null) {\n        continue;\n      }\n      if (motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber && !motionQueueEntry.isFinished()) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * 全てのモーションを停止する\n   */\n  stopAllMotions() {\n    for (let i = 0; i < this._motions.length; i++) {\n      const motionQueueEntry = this._motions[i];\n      if (motionQueueEntry != null) {\n        motionQueueEntry.release();\n      }\n    }\n    this._motions = [];\n  }\n  /**\n     * 指定したCubismMotionQueueEntryの取得\n  \n     * @param   motionQueueEntryNumber  モーションの識別番号\n     * @return  指定したCubismMotionQueueEntry\n     * @return  null   見つからなかった\n     */\n  getCubismMotionQueueEntry(motionQueueEntryNumber) {\n    return this._motions.find(\n      (entry) => entry != null && entry._motionQueueEntryHandle == motionQueueEntryNumber\n    );\n  }\n  /**\n   * イベントを受け取るCallbackの登録\n   *\n   * @param callback コールバック関数\n   * @param customData コールバックに返されるデータ\n   */\n  setEventCallback(callback, customData = null) {\n    this._eventCallBack = callback;\n    this._eventCustomData = customData;\n  }\n  /**\n   * モーションを更新して、モデルにパラメータ値を反映する。\n   *\n   * @param   model   対象のモデル\n   * @param   userTimeSeconds   デルタ時間の積算値[秒]\n   * @return  true    モデルへパラメータ値の反映あり\n   * @return  false   モデルへパラメータ値の反映なし(モーションの変化なし)\n   */\n  doUpdateMotion(model, userTimeSeconds) {\n    let updated = false;\n    let i = 0;\n    while (i < this._motions.length) {\n      const motionQueueEntry = this._motions[i];\n      if (motionQueueEntry == null) {\n        this._motions.splice(i, 1);\n        continue;\n      }\n      const motion = motionQueueEntry._motion;\n      if (motion == null) {\n        motionQueueEntry.release();\n        this._motions.splice(i, 1);\n        continue;\n      }\n      motion.updateParameters(model, motionQueueEntry, userTimeSeconds);\n      updated = true;\n      const firedList = motion.getFiredEvent(\n        motionQueueEntry.getLastCheckEventSeconds() - motionQueueEntry.getStartTime(),\n        userTimeSeconds - motionQueueEntry.getStartTime()\n      );\n      for (let i2 = 0; i2 < firedList.length; ++i2) {\n        this._eventCallBack(this, firedList[i2], this._eventCustomData);\n      }\n      motionQueueEntry.setLastCheckEventSeconds(userTimeSeconds);\n      if (motionQueueEntry.isFinished()) {\n        motionQueueEntry.release();\n        this._motions.splice(i, 1);\n      } else {\n        if (motionQueueEntry.isTriggeredFadeOut()) {\n          motionQueueEntry.startFadeOut(\n            motionQueueEntry.getFadeOutSeconds(),\n            userTimeSeconds\n          );\n        }\n        i++;\n      }\n    }\n    return updated;\n  }\n  // コールバックに戻されるデータ\n}\nconst InvalidMotionQueueEntryHandleValue = -1;\nclass Cubism4ExpressionManager extends ExpressionManager {\n  constructor(settings, options) {\n    var _a;\n    super(settings, options);\n    __publicField(this, \"queueManager\", new CubismMotionQueueManager());\n    __publicField(this, \"definitions\");\n    this.definitions = (_a = settings.expressions) != null ? _a : [];\n    this.init();\n  }\n  isFinished() {\n    return this.queueManager.isFinished();\n  }\n  getExpressionIndex(name) {\n    return this.definitions.findIndex((def) => def.Name === name);\n  }\n  getExpressionFile(definition) {\n    return definition.File;\n  }\n  createExpression(data, definition) {\n    return CubismExpressionMotion.create(data);\n  }\n  _setExpression(motion) {\n    return this.queueManager.startMotion(motion, false, performance.now());\n  }\n  stopAllExpressions() {\n    this.queueManager.stopAllMotions();\n  }\n  updateParameters(model, now) {\n    return this.queueManager.doUpdateMotion(model, now);\n  }\n}\nvar CubismMotionCurveTarget = /* @__PURE__ */ ((CubismMotionCurveTarget2) => {\n  CubismMotionCurveTarget2[CubismMotionCurveTarget2[\"CubismMotionCurveTarget_Model\"] = 0] = \"CubismMotionCurveTarget_Model\";\n  CubismMotionCurveTarget2[CubismMotionCurveTarget2[\"CubismMotionCurveTarget_Parameter\"] = 1] = \"CubismMotionCurveTarget_Parameter\";\n  CubismMotionCurveTarget2[CubismMotionCurveTarget2[\"CubismMotionCurveTarget_PartOpacity\"] = 2] = \"CubismMotionCurveTarget_PartOpacity\";\n  return CubismMotionCurveTarget2;\n})(CubismMotionCurveTarget || {});\nvar CubismMotionSegmentType = /* @__PURE__ */ ((CubismMotionSegmentType2) => {\n  CubismMotionSegmentType2[CubismMotionSegmentType2[\"CubismMotionSegmentType_Linear\"] = 0] = \"CubismMotionSegmentType_Linear\";\n  CubismMotionSegmentType2[CubismMotionSegmentType2[\"CubismMotionSegmentType_Bezier\"] = 1] = \"CubismMotionSegmentType_Bezier\";\n  CubismMotionSegmentType2[CubismMotionSegmentType2[\"CubismMotionSegmentType_Stepped\"] = 2] = \"CubismMotionSegmentType_Stepped\";\n  CubismMotionSegmentType2[CubismMotionSegmentType2[\"CubismMotionSegmentType_InverseStepped\"] = 3] = \"CubismMotionSegmentType_InverseStepped\";\n  return CubismMotionSegmentType2;\n})(CubismMotionSegmentType || {});\nclass CubismMotionPoint {\n  constructor(time = 0, value = 0) {\n    this.time = time;\n    this.value = value;\n  }\n  // 値\n}\nclass CubismMotionSegment {\n  /**\n   * @brief コンストラクタ\n   *\n   * コンストラクタ。\n   */\n  constructor() {\n    this.basePointIndex = 0;\n    this.segmentType = 0;\n  }\n  // セグメントの種類\n}\nclass CubismMotionCurve {\n  constructor() {\n    this.id = \"\";\n    this.type = 0;\n    this.segmentCount = 0;\n    this.baseSegmentIndex = 0;\n    this.fadeInTime = 0;\n    this.fadeOutTime = 0;\n  }\n  // フェードアウトにかかる時間[秒]\n}\nclass CubismMotionEvent {\n  constructor() {\n    this.fireTime = 0;\n    this.value = \"\";\n  }\n}\nclass CubismMotionData {\n  constructor() {\n    this.duration = 0;\n    this.loop = false;\n    this.curveCount = 0;\n    this.eventCount = 0;\n    this.fps = 0;\n    this.curves = [];\n    this.segments = [];\n    this.points = [];\n    this.events = [];\n  }\n  // イベントのリスト\n}\nclass CubismMotionJson {\n  /**\n   * コンストラクタ\n   * @param json motion3.jsonが読み込まれているバッファ\n   */\n  constructor(json) {\n    this._json = json;\n  }\n  /**\n   * デストラクタ相当の処理\n   */\n  release() {\n    this._json = void 0;\n  }\n  /**\n   * モーションの長さを取得する\n   * @return モーションの長さ[秒]\n   */\n  getMotionDuration() {\n    return this._json.Meta.Duration;\n  }\n  /**\n   * モーションのループ情報の取得\n   * @return true ループする\n   * @return false ループしない\n   */\n  isMotionLoop() {\n    return this._json.Meta.Loop || false;\n  }\n  getEvaluationOptionFlag(flagType) {\n    if (0 == flagType) {\n      return !!this._json.Meta.AreBeziersRestricted;\n    }\n    return false;\n  }\n  /**\n   * モーションカーブの個数の取得\n   * @return モーションカーブの個数\n   */\n  getMotionCurveCount() {\n    return this._json.Meta.CurveCount;\n  }\n  /**\n   * モーションのフレームレートの取得\n   * @return フレームレート[FPS]\n   */\n  getMotionFps() {\n    return this._json.Meta.Fps;\n  }\n  /**\n   * モーションのセグメントの総合計の取得\n   * @return モーションのセグメントの取得\n   */\n  getMotionTotalSegmentCount() {\n    return this._json.Meta.TotalSegmentCount;\n  }\n  /**\n   * モーションのカーブの制御店の総合計の取得\n   * @return モーションのカーブの制御点の総合計\n   */\n  getMotionTotalPointCount() {\n    return this._json.Meta.TotalPointCount;\n  }\n  /**\n   * モーションのフェードイン時間の取得\n   * @return フェードイン時間[秒]\n   */\n  getMotionFadeInTime() {\n    return this._json.Meta.FadeInTime;\n  }\n  /**\n   * モーションのフェードアウト時間の取得\n   * @return フェードアウト時間[秒]\n   */\n  getMotionFadeOutTime() {\n    return this._json.Meta.FadeOutTime;\n  }\n  /**\n   * モーションのカーブの種類の取得\n   * @param curveIndex カーブのインデックス\n   * @return カーブの種類\n   */\n  getMotionCurveTarget(curveIndex) {\n    return this._json.Curves[curveIndex].Target;\n  }\n  /**\n   * モーションのカーブのIDの取得\n   * @param curveIndex カーブのインデックス\n   * @return カーブのID\n   */\n  getMotionCurveId(curveIndex) {\n    return this._json.Curves[curveIndex].Id;\n  }\n  /**\n   * モーションのカーブのフェードイン時間の取得\n   * @param curveIndex カーブのインデックス\n   * @return フェードイン時間[秒]\n   */\n  getMotionCurveFadeInTime(curveIndex) {\n    return this._json.Curves[curveIndex].FadeInTime;\n  }\n  /**\n   * モーションのカーブのフェードアウト時間の取得\n   * @param curveIndex カーブのインデックス\n   * @return フェードアウト時間[秒]\n   */\n  getMotionCurveFadeOutTime(curveIndex) {\n    return this._json.Curves[curveIndex].FadeOutTime;\n  }\n  /**\n   * モーションのカーブのセグメントの個数を取得する\n   * @param curveIndex カーブのインデックス\n   * @return モーションのカーブのセグメントの個数\n   */\n  getMotionCurveSegmentCount(curveIndex) {\n    return this._json.Curves[curveIndex].Segments.length;\n  }\n  /**\n   * モーションのカーブのセグメントの値の取得\n   * @param curveIndex カーブのインデックス\n   * @param segmentIndex セグメントのインデックス\n   * @return セグメントの値\n   */\n  getMotionCurveSegment(curveIndex, segmentIndex) {\n    return this._json.Curves[curveIndex].Segments[segmentIndex];\n  }\n  /**\n   * イベントの個数の取得\n   * @return イベントの個数\n   */\n  getEventCount() {\n    return this._json.Meta.UserDataCount || 0;\n  }\n  /**\n   *  イベントの総文字数の取得\n   * @return イベントの総文字数\n   */\n  getTotalEventValueSize() {\n    return this._json.Meta.TotalUserDataSize;\n  }\n  /**\n   * イベントの時間の取得\n   * @param userDataIndex イベントのインデックス\n   * @return イベントの時間[秒]\n   */\n  getEventTime(userDataIndex) {\n    return this._json.UserData[userDataIndex].Time;\n  }\n  /**\n   * イベントの取得\n   * @param userDataIndex イベントのインデックス\n   * @return イベントの文字列\n   */\n  getEventValue(userDataIndex) {\n    return this._json.UserData[userDataIndex].Value;\n  }\n  // motion3.jsonのデータ\n}\nvar EvaluationOptionFlag = /* @__PURE__ */ ((EvaluationOptionFlag2) => {\n  EvaluationOptionFlag2[EvaluationOptionFlag2[\"EvaluationOptionFlag_AreBeziersRistricted\"] = 0] = \"EvaluationOptionFlag_AreBeziersRistricted\";\n  return EvaluationOptionFlag2;\n})(EvaluationOptionFlag || {});\nconst EffectNameEyeBlink = \"EyeBlink\";\nconst EffectNameLipSync = \"LipSync\";\nconst TargetNameModel = \"Model\";\nconst TargetNameParameter = \"Parameter\";\nconst TargetNamePartOpacity = \"PartOpacity\";\nconst IdNameOpacity = \"Opacity\";\nconst UseOldBeziersCurveMotion = false;\nfunction lerpPoints(a, b, t) {\n  const result = new CubismMotionPoint();\n  result.time = a.time + (b.time - a.time) * t;\n  result.value = a.value + (b.value - a.value) * t;\n  return result;\n}\nfunction linearEvaluate(points, time) {\n  let t = (time - points[0].time) / (points[1].time - points[0].time);\n  if (t < 0) {\n    t = 0;\n  }\n  return points[0].value + (points[1].value - points[0].value) * t;\n}\nfunction bezierEvaluate(points, time) {\n  let t = (time - points[0].time) / (points[3].time - points[0].time);\n  if (t < 0) {\n    t = 0;\n  }\n  const p01 = lerpPoints(points[0], points[1], t);\n  const p12 = lerpPoints(points[1], points[2], t);\n  const p23 = lerpPoints(points[2], points[3], t);\n  const p012 = lerpPoints(p01, p12, t);\n  const p123 = lerpPoints(p12, p23, t);\n  return lerpPoints(p012, p123, t).value;\n}\nfunction bezierEvaluateCardanoInterpretation(points, time) {\n  const x = time;\n  const x1 = points[0].time;\n  const x2 = points[3].time;\n  const cx1 = points[1].time;\n  const cx2 = points[2].time;\n  const a = x2 - 3 * cx2 + 3 * cx1 - x1;\n  const b = 3 * cx2 - 6 * cx1 + 3 * x1;\n  const c = 3 * cx1 - 3 * x1;\n  const d = x1 - x;\n  const t = CubismMath.cardanoAlgorithmForBezier(a, b, c, d);\n  const p01 = lerpPoints(points[0], points[1], t);\n  const p12 = lerpPoints(points[1], points[2], t);\n  const p23 = lerpPoints(points[2], points[3], t);\n  const p012 = lerpPoints(p01, p12, t);\n  const p123 = lerpPoints(p12, p23, t);\n  return lerpPoints(p012, p123, t).value;\n}\nfunction steppedEvaluate(points, time) {\n  return points[0].value;\n}\nfunction inverseSteppedEvaluate(points, time) {\n  return points[1].value;\n}\nfunction evaluateCurve(motionData, index, time) {\n  const curve = motionData.curves[index];\n  let target = -1;\n  const totalSegmentCount = curve.baseSegmentIndex + curve.segmentCount;\n  let pointPosition = 0;\n  for (let i = curve.baseSegmentIndex; i < totalSegmentCount; ++i) {\n    pointPosition = motionData.segments[i].basePointIndex + (motionData.segments[i].segmentType == CubismMotionSegmentType.CubismMotionSegmentType_Bezier ? 3 : 1);\n    if (motionData.points[pointPosition].time > time) {\n      target = i;\n      break;\n    }\n  }\n  if (target == -1) {\n    return motionData.points[pointPosition].value;\n  }\n  const segment = motionData.segments[target];\n  return segment.evaluate(\n    motionData.points.slice(segment.basePointIndex),\n    time\n  );\n}\nclass CubismMotion extends ACubismMotion {\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    super();\n    this._eyeBlinkParameterIds = [];\n    this._lipSyncParameterIds = [];\n    this._sourceFrameRate = 30;\n    this._loopDurationSeconds = -1;\n    this._isLoop = false;\n    this._isLoopFadeIn = true;\n    this._lastWeight = 0;\n    this._modelOpacity = 1;\n  }\n  /**\n   * インスタンスを作成する\n   *\n   * @param json motion3.jsonが読み込まれているバッファ\n   * @param onFinishedMotionHandler モーション再生終了時に呼び出されるコールバック関数\n   * @return 作成されたインスタンス\n   */\n  static create(json, onFinishedMotionHandler) {\n    const ret = new CubismMotion();\n    ret.parse(json);\n    ret._sourceFrameRate = ret._motionData.fps;\n    ret._loopDurationSeconds = ret._motionData.duration;\n    ret._onFinishedMotion = onFinishedMotionHandler;\n    return ret;\n  }\n  /**\n   * モデルのパラメータの更新の実行\n   * @param model             対象のモデル\n   * @param userTimeSeconds   現在の時刻[秒]\n   * @param fadeWeight        モーションの重み\n   * @param motionQueueEntry  CubismMotionQueueManagerで管理されているモーション\n   */\n  doUpdateParameters(model, userTimeSeconds, fadeWeight, motionQueueEntry) {\n    if (this._modelCurveIdEyeBlink == null) {\n      this._modelCurveIdEyeBlink = EffectNameEyeBlink;\n    }\n    if (this._modelCurveIdLipSync == null) {\n      this._modelCurveIdLipSync = EffectNameLipSync;\n    }\n    if (this._modelCurveIdOpacity == null) {\n      this._modelCurveIdOpacity = IdNameOpacity;\n    }\n    let timeOffsetSeconds = userTimeSeconds - motionQueueEntry.getStartTime();\n    if (timeOffsetSeconds < 0) {\n      timeOffsetSeconds = 0;\n    }\n    let lipSyncValue = Number.MAX_VALUE;\n    let eyeBlinkValue = Number.MAX_VALUE;\n    const MaxTargetSize = 64;\n    let lipSyncFlags = 0;\n    let eyeBlinkFlags = 0;\n    if (this._eyeBlinkParameterIds.length > MaxTargetSize) {\n      CubismLogDebug(\n        \"too many eye blink targets : {0}\",\n        this._eyeBlinkParameterIds.length\n      );\n    }\n    if (this._lipSyncParameterIds.length > MaxTargetSize) {\n      CubismLogDebug(\n        \"too many lip sync targets : {0}\",\n        this._lipSyncParameterIds.length\n      );\n    }\n    const tmpFadeIn = this._fadeInSeconds <= 0 ? 1 : CubismMath.getEasingSine(\n      (userTimeSeconds - motionQueueEntry.getFadeInStartTime()) / this._fadeInSeconds\n    );\n    const tmpFadeOut = this._fadeOutSeconds <= 0 || motionQueueEntry.getEndTime() < 0 ? 1 : CubismMath.getEasingSine(\n      (motionQueueEntry.getEndTime() - userTimeSeconds) / this._fadeOutSeconds\n    );\n    let value;\n    let c, parameterIndex;\n    let time = timeOffsetSeconds;\n    if (this._isLoop) {\n      while (time > this._motionData.duration) {\n        time -= this._motionData.duration;\n      }\n    }\n    const curves = this._motionData.curves;\n    for (c = 0; c < this._motionData.curveCount && curves[c].type == CubismMotionCurveTarget.CubismMotionCurveTarget_Model; ++c) {\n      value = evaluateCurve(this._motionData, c, time);\n      if (curves[c].id == this._modelCurveIdEyeBlink) {\n        eyeBlinkValue = value;\n      } else if (curves[c].id == this._modelCurveIdLipSync) {\n        lipSyncValue = value;\n      } else if (curves[c].id == this._modelCurveIdOpacity) {\n        this._modelOpacity = value;\n        model.setModelOapcity(this.getModelOpacityValue());\n      }\n    }\n    for (; c < this._motionData.curveCount && curves[c].type == CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter; ++c) {\n      parameterIndex = model.getParameterIndex(curves[c].id);\n      if (parameterIndex == -1) {\n        continue;\n      }\n      const sourceValue = model.getParameterValueByIndex(parameterIndex);\n      value = evaluateCurve(this._motionData, c, time);\n      if (eyeBlinkValue != Number.MAX_VALUE) {\n        for (let i = 0; i < this._eyeBlinkParameterIds.length && i < MaxTargetSize; ++i) {\n          if (this._eyeBlinkParameterIds[i] == curves[c].id) {\n            value *= eyeBlinkValue;\n            eyeBlinkFlags |= 1 << i;\n            break;\n          }\n        }\n      }\n      if (lipSyncValue != Number.MAX_VALUE) {\n        for (let i = 0; i < this._lipSyncParameterIds.length && i < MaxTargetSize; ++i) {\n          if (this._lipSyncParameterIds[i] == curves[c].id) {\n            value += lipSyncValue;\n            lipSyncFlags |= 1 << i;\n            break;\n          }\n        }\n      }\n      let v;\n      if (curves[c].fadeInTime < 0 && curves[c].fadeOutTime < 0) {\n        v = sourceValue + (value - sourceValue) * fadeWeight;\n      } else {\n        let fin;\n        let fout;\n        if (curves[c].fadeInTime < 0) {\n          fin = tmpFadeIn;\n        } else {\n          fin = curves[c].fadeInTime == 0 ? 1 : CubismMath.getEasingSine(\n            (userTimeSeconds - motionQueueEntry.getFadeInStartTime()) / curves[c].fadeInTime\n          );\n        }\n        if (curves[c].fadeOutTime < 0) {\n          fout = tmpFadeOut;\n        } else {\n          fout = curves[c].fadeOutTime == 0 || motionQueueEntry.getEndTime() < 0 ? 1 : CubismMath.getEasingSine(\n            (motionQueueEntry.getEndTime() - userTimeSeconds) / curves[c].fadeOutTime\n          );\n        }\n        const paramWeight = this._weight * fin * fout;\n        v = sourceValue + (value - sourceValue) * paramWeight;\n      }\n      model.setParameterValueByIndex(parameterIndex, v, 1);\n    }\n    {\n      if (eyeBlinkValue != Number.MAX_VALUE) {\n        for (let i = 0; i < this._eyeBlinkParameterIds.length && i < MaxTargetSize; ++i) {\n          const sourceValue = model.getParameterValueById(\n            this._eyeBlinkParameterIds[i]\n          );\n          if (eyeBlinkFlags >> i & 1) {\n            continue;\n          }\n          const v = sourceValue + (eyeBlinkValue - sourceValue) * fadeWeight;\n          model.setParameterValueById(this._eyeBlinkParameterIds[i], v);\n        }\n      }\n      if (lipSyncValue != Number.MAX_VALUE) {\n        for (let i = 0; i < this._lipSyncParameterIds.length && i < MaxTargetSize; ++i) {\n          const sourceValue = model.getParameterValueById(\n            this._lipSyncParameterIds[i]\n          );\n          if (lipSyncFlags >> i & 1) {\n            continue;\n          }\n          const v = sourceValue + (lipSyncValue - sourceValue) * fadeWeight;\n          model.setParameterValueById(this._lipSyncParameterIds[i], v);\n        }\n      }\n    }\n    for (; c < this._motionData.curveCount && curves[c].type == CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity; ++c) {\n      value = evaluateCurve(this._motionData, c, time);\n      if (CubismConfig.setOpacityFromMotion) {\n        model.setPartOpacityById(curves[c].id, value);\n      } else {\n        parameterIndex = model.getParameterIndex(curves[c].id);\n        if (parameterIndex == -1) {\n          continue;\n        }\n        model.setParameterValueByIndex(parameterIndex, value);\n      }\n    }\n    if (timeOffsetSeconds >= this._motionData.duration) {\n      if (this._isLoop) {\n        motionQueueEntry.setStartTime(userTimeSeconds);\n        if (this._isLoopFadeIn) {\n          motionQueueEntry.setFadeInStartTime(userTimeSeconds);\n        }\n      } else {\n        if (this._onFinishedMotion) {\n          this._onFinishedMotion(this);\n        }\n        motionQueueEntry.setIsFinished(true);\n      }\n    }\n    this._lastWeight = fadeWeight;\n  }\n  /**\n   * ループ情報の設定\n   * @param loop ループ情報\n   */\n  setIsLoop(loop) {\n    this._isLoop = loop;\n  }\n  /**\n   * ループ情報の取得\n   * @return true ループする\n   * @return false ループしない\n   */\n  isLoop() {\n    return this._isLoop;\n  }\n  /**\n   * ループ時のフェードイン情報の設定\n   * @param loopFadeIn  ループ時のフェードイン情報\n   */\n  setIsLoopFadeIn(loopFadeIn) {\n    this._isLoopFadeIn = loopFadeIn;\n  }\n  /**\n   * ループ時のフェードイン情報の取得\n   *\n   * @return  true    する\n   * @return  false   しない\n   */\n  isLoopFadeIn() {\n    return this._isLoopFadeIn;\n  }\n  /**\n   * モーションの長さを取得する。\n   *\n   * @return  モーションの長さ[秒]\n   */\n  getDuration() {\n    return this._isLoop ? -1 : this._loopDurationSeconds;\n  }\n  /**\n   * モーションのループ時の長さを取得する。\n   *\n   * @return  モーションのループ時の長さ[秒]\n   */\n  getLoopDuration() {\n    return this._loopDurationSeconds;\n  }\n  /**\n   * パラメータに対するフェードインの時間を設定する。\n   *\n   * @param parameterId     パラメータID\n   * @param value           フェードインにかかる時間[秒]\n   */\n  setParameterFadeInTime(parameterId, value) {\n    const curves = this._motionData.curves;\n    for (let i = 0; i < this._motionData.curveCount; ++i) {\n      if (parameterId == curves[i].id) {\n        curves[i].fadeInTime = value;\n        return;\n      }\n    }\n  }\n  /**\n   * パラメータに対するフェードアウトの時間の設定\n   * @param parameterId     パラメータID\n   * @param value           フェードアウトにかかる時間[秒]\n   */\n  setParameterFadeOutTime(parameterId, value) {\n    const curves = this._motionData.curves;\n    for (let i = 0; i < this._motionData.curveCount; ++i) {\n      if (parameterId == curves[i].id) {\n        curves[i].fadeOutTime = value;\n        return;\n      }\n    }\n  }\n  /**\n   * パラメータに対するフェードインの時間の取得\n   * @param    parameterId     パラメータID\n   * @return   フェードインにかかる時間[秒]\n   */\n  getParameterFadeInTime(parameterId) {\n    const curves = this._motionData.curves;\n    for (let i = 0; i < this._motionData.curveCount; ++i) {\n      if (parameterId == curves[i].id) {\n        return curves[i].fadeInTime;\n      }\n    }\n    return -1;\n  }\n  /**\n   * パラメータに対するフェードアウトの時間を取得\n   *\n   * @param   parameterId     パラメータID\n   * @return   フェードアウトにかかる時間[秒]\n   */\n  getParameterFadeOutTime(parameterId) {\n    const curves = this._motionData.curves;\n    for (let i = 0; i < this._motionData.curveCount; ++i) {\n      if (parameterId == curves[i].id) {\n        return curves[i].fadeOutTime;\n      }\n    }\n    return -1;\n  }\n  /**\n   * 自動エフェクトがかかっているパラメータIDリストの設定\n   * @param eyeBlinkParameterIds    自動まばたきがかかっているパラメータIDのリスト\n   * @param lipSyncParameterIds     リップシンクがかかっているパラメータIDのリスト\n   */\n  setEffectIds(eyeBlinkParameterIds, lipSyncParameterIds) {\n    this._eyeBlinkParameterIds = eyeBlinkParameterIds;\n    this._lipSyncParameterIds = lipSyncParameterIds;\n  }\n  /**\n   * デストラクタ相当の処理\n   */\n  release() {\n    this._motionData = void 0;\n  }\n  /**\n   * motion3.jsonをパースする。\n   *\n   * @param motionJson  motion3.jsonが読み込まれているバッファ\n   */\n  parse(motionJson) {\n    this._motionData = new CubismMotionData();\n    const json = new CubismMotionJson(motionJson);\n    this._motionData.duration = json.getMotionDuration();\n    this._motionData.loop = json.isMotionLoop();\n    this._motionData.curveCount = json.getMotionCurveCount();\n    this._motionData.fps = json.getMotionFps();\n    this._motionData.eventCount = json.getEventCount();\n    const areBeziersRestructed = json.getEvaluationOptionFlag(\n      EvaluationOptionFlag.EvaluationOptionFlag_AreBeziersRistricted\n    );\n    const fadeInSeconds = json.getMotionFadeInTime();\n    const fadeOutSeconds = json.getMotionFadeOutTime();\n    if (fadeInSeconds !== void 0) {\n      this._fadeInSeconds = fadeInSeconds < 0 ? 1 : fadeInSeconds;\n    } else {\n      this._fadeInSeconds = 1;\n    }\n    if (fadeOutSeconds !== void 0) {\n      this._fadeOutSeconds = fadeOutSeconds < 0 ? 1 : fadeOutSeconds;\n    } else {\n      this._fadeOutSeconds = 1;\n    }\n    this._motionData.curves = Array.from({\n      length: this._motionData.curveCount\n    }).map(() => new CubismMotionCurve());\n    this._motionData.segments = Array.from({\n      length: json.getMotionTotalSegmentCount()\n    }).map(() => new CubismMotionSegment());\n    this._motionData.events = Array.from({\n      length: this._motionData.eventCount\n    }).map(() => new CubismMotionEvent());\n    this._motionData.points = [];\n    let totalPointCount = 0;\n    let totalSegmentCount = 0;\n    for (let curveCount = 0; curveCount < this._motionData.curveCount; ++curveCount) {\n      const curve = this._motionData.curves[curveCount];\n      switch (json.getMotionCurveTarget(curveCount)) {\n        case TargetNameModel:\n          curve.type = CubismMotionCurveTarget.CubismMotionCurveTarget_Model;\n          break;\n        case TargetNameParameter:\n          curve.type = CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter;\n          break;\n        case TargetNamePartOpacity:\n          curve.type = CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity;\n          break;\n        default:\n          CubismLogWarning(\n            'Warning : Unable to get segment type from Curve! The number of \"CurveCount\" may be incorrect!'\n          );\n      }\n      curve.id = json.getMotionCurveId(curveCount);\n      curve.baseSegmentIndex = totalSegmentCount;\n      const fadeInTime = json.getMotionCurveFadeInTime(curveCount);\n      const fadeOutTime = json.getMotionCurveFadeOutTime(curveCount);\n      curve.fadeInTime = fadeInTime !== void 0 ? fadeInTime : -1;\n      curve.fadeOutTime = fadeOutTime !== void 0 ? fadeOutTime : -1;\n      for (let segmentPosition = 0; segmentPosition < json.getMotionCurveSegmentCount(curveCount); ) {\n        if (segmentPosition == 0) {\n          this._motionData.segments[totalSegmentCount].basePointIndex = totalPointCount;\n          this._motionData.points[totalPointCount] = new CubismMotionPoint(\n            json.getMotionCurveSegment(curveCount, segmentPosition),\n            json.getMotionCurveSegment(curveCount, segmentPosition + 1)\n          );\n          totalPointCount += 1;\n          segmentPosition += 2;\n        } else {\n          this._motionData.segments[totalSegmentCount].basePointIndex = totalPointCount - 1;\n        }\n        const segment = json.getMotionCurveSegment(\n          curveCount,\n          segmentPosition\n        );\n        switch (segment) {\n          case CubismMotionSegmentType.CubismMotionSegmentType_Linear: {\n            this._motionData.segments[totalSegmentCount].segmentType = CubismMotionSegmentType.CubismMotionSegmentType_Linear;\n            this._motionData.segments[totalSegmentCount].evaluate = linearEvaluate;\n            this._motionData.points[totalPointCount] = new CubismMotionPoint(\n              json.getMotionCurveSegment(curveCount, segmentPosition + 1),\n              json.getMotionCurveSegment(curveCount, segmentPosition + 2)\n            );\n            totalPointCount += 1;\n            segmentPosition += 3;\n            break;\n          }\n          case CubismMotionSegmentType.CubismMotionSegmentType_Bezier: {\n            this._motionData.segments[totalSegmentCount].segmentType = CubismMotionSegmentType.CubismMotionSegmentType_Bezier;\n            if (areBeziersRestructed || UseOldBeziersCurveMotion) {\n              this._motionData.segments[totalSegmentCount].evaluate = bezierEvaluate;\n            } else {\n              this._motionData.segments[totalSegmentCount].evaluate = bezierEvaluateCardanoInterpretation;\n            }\n            this._motionData.points[totalPointCount] = new CubismMotionPoint(\n              json.getMotionCurveSegment(curveCount, segmentPosition + 1),\n              json.getMotionCurveSegment(curveCount, segmentPosition + 2)\n            );\n            this._motionData.points[totalPointCount + 1] = new CubismMotionPoint(\n              json.getMotionCurveSegment(curveCount, segmentPosition + 3),\n              json.getMotionCurveSegment(curveCount, segmentPosition + 4)\n            );\n            this._motionData.points[totalPointCount + 2] = new CubismMotionPoint(\n              json.getMotionCurveSegment(curveCount, segmentPosition + 5),\n              json.getMotionCurveSegment(curveCount, segmentPosition + 6)\n            );\n            totalPointCount += 3;\n            segmentPosition += 7;\n            break;\n          }\n          case CubismMotionSegmentType.CubismMotionSegmentType_Stepped: {\n            this._motionData.segments[totalSegmentCount].segmentType = CubismMotionSegmentType.CubismMotionSegmentType_Stepped;\n            this._motionData.segments[totalSegmentCount].evaluate = steppedEvaluate;\n            this._motionData.points[totalPointCount] = new CubismMotionPoint(\n              json.getMotionCurveSegment(curveCount, segmentPosition + 1),\n              json.getMotionCurveSegment(curveCount, segmentPosition + 2)\n            );\n            totalPointCount += 1;\n            segmentPosition += 3;\n            break;\n          }\n          case CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped: {\n            this._motionData.segments[totalSegmentCount].segmentType = CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped;\n            this._motionData.segments[totalSegmentCount].evaluate = inverseSteppedEvaluate;\n            this._motionData.points[totalPointCount] = new CubismMotionPoint(\n              json.getMotionCurveSegment(curveCount, segmentPosition + 1),\n              json.getMotionCurveSegment(curveCount, segmentPosition + 2)\n            );\n            totalPointCount += 1;\n            segmentPosition += 3;\n            break;\n          }\n          default: {\n            CSM_ASSERT(0);\n            break;\n          }\n        }\n        ++curve.segmentCount;\n        ++totalSegmentCount;\n      }\n      this._motionData.curves.push(curve);\n    }\n    for (let userdatacount = 0; userdatacount < json.getEventCount(); ++userdatacount) {\n      this._motionData.events[userdatacount].fireTime = json.getEventTime(userdatacount);\n      this._motionData.events[userdatacount].value = json.getEventValue(userdatacount);\n    }\n    json.release();\n  }\n  /**\n   * モデルのパラメータ更新\n   *\n   * イベント発火のチェック。\n   * 入力する時間は呼ばれるモーションタイミングを０とした秒数で行う。\n   *\n   * @param beforeCheckTimeSeconds   前回のイベントチェック時間[秒]\n   * @param motionTimeSeconds        今回の再生時間[秒]\n   */\n  getFiredEvent(beforeCheckTimeSeconds, motionTimeSeconds) {\n    this._firedEventValues.length = 0;\n    for (let u = 0; u < this._motionData.eventCount; ++u) {\n      if (this._motionData.events[u].fireTime > beforeCheckTimeSeconds && this._motionData.events[u].fireTime <= motionTimeSeconds) {\n        this._firedEventValues.push(this._motionData.events[u].value);\n      }\n    }\n    return this._firedEventValues;\n  }\n  /**\n   * 透明度のカーブが存在するかどうかを確認する\n   *\n   * @returns true  -> キーが存在する\n   *          false -> キーが存在しない\n   */\n  isExistModelOpacity() {\n    for (let i = 0; i < this._motionData.curveCount; i++) {\n      const curve = this._motionData.curves[i];\n      if (curve.type != CubismMotionCurveTarget.CubismMotionCurveTarget_Model) {\n        continue;\n      }\n      if (curve.id === IdNameOpacity) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * 透明度のカーブのインデックスを返す\n   *\n   * @returns success:透明度のカーブのインデックス\n   */\n  getModelOpacityIndex() {\n    if (this.isExistModelOpacity()) {\n      for (let i = 0; i < this._motionData.curveCount; i++) {\n        const curve = this._motionData.curves[i];\n        if (curve.type != CubismMotionCurveTarget.CubismMotionCurveTarget_Model) {\n          continue;\n        }\n        if (curve.id === IdNameOpacity) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  }\n  /**\n   * 透明度のIdを返す\n   *\n   * @param index モーションカーブのインデックス\n   * @returns success:透明度のカーブのインデックス\n   */\n  getModelOpacityId(index) {\n    if (index != -1) {\n      const curve = this._motionData.curves[index];\n      if (curve.type == CubismMotionCurveTarget.CubismMotionCurveTarget_Model) {\n        if (curve.id === IdNameOpacity) {\n          return curve.id;\n        }\n      }\n    }\n    return void 0;\n  }\n  /**\n   * 現在時間の透明度の値を返す\n   *\n   * @returns success:モーションの当該時間におけるOpacityの値\n   */\n  getModelOpacityValue() {\n    return this._modelOpacity;\n  }\n  // モーションから取得した不透明度\n}\nclass Cubism4MotionManager extends MotionManager {\n  constructor(settings, options) {\n    var _a;\n    super(settings, options);\n    __publicField(this, \"definitions\");\n    __publicField(this, \"groups\", { idle: \"Idle\" });\n    __publicField(this, \"motionDataType\", \"json\");\n    __publicField(this, \"queueManager\", new CubismMotionQueueManager());\n    __publicField(this, \"expressionManager\");\n    __publicField(this, \"eyeBlinkIds\");\n    __publicField(this, \"lipSyncIds\");\n    this.definitions = (_a = settings.motions) != null ? _a : {};\n    this.eyeBlinkIds = settings.getEyeBlinkParameters() || [];\n    this.lipSyncIds = settings.getLipSyncParameters() || [];\n    this.init(options);\n  }\n  init(options) {\n    super.init(options);\n    if (this.settings.expressions) {\n      this.expressionManager = new Cubism4ExpressionManager(this.settings, options);\n    }\n    this.queueManager.setEventCallback((caller, eventValue, customData) => {\n      this.emit(\"motion:\" + eventValue);\n    });\n  }\n  isFinished() {\n    return this.queueManager.isFinished();\n  }\n  _startMotion(motion, onFinish) {\n    motion.setFinishedMotionHandler(onFinish);\n    this.queueManager.stopAllMotions();\n    return this.queueManager.startMotion(motion, false, performance.now());\n  }\n  _stopAllMotions() {\n    this.queueManager.stopAllMotions();\n  }\n  createMotion(data, group, definition) {\n    const motion = CubismMotion.create(data);\n    const json = new CubismMotionJson(data);\n    const defaultFadingDuration = (group === this.groups.idle ? config.idleMotionFadingDuration : config.motionFadingDuration) / 1e3;\n    if (json.getMotionFadeInTime() === void 0) {\n      motion.setFadeInTime(\n        definition.FadeInTime > 0 ? definition.FadeInTime : defaultFadingDuration\n      );\n    }\n    if (json.getMotionFadeOutTime() === void 0) {\n      motion.setFadeOutTime(\n        definition.FadeOutTime > 0 ? definition.FadeOutTime : defaultFadingDuration\n      );\n    }\n    motion.setEffectIds(this.eyeBlinkIds, this.lipSyncIds);\n    return motion;\n  }\n  getMotionFile(definition) {\n    return definition.File;\n  }\n  getMotionName(definition) {\n    return definition.File;\n  }\n  getSoundFile(definition) {\n    return definition.Sound;\n  }\n  updateParameters(model, now) {\n    return this.queueManager.doUpdateMotion(model, now);\n  }\n  destroy() {\n    super.destroy();\n    this.queueManager.release();\n    this.queueManager = void 0;\n  }\n}\nconst ParamAngleX = \"ParamAngleX\";\nconst ParamAngleY = \"ParamAngleY\";\nconst ParamAngleZ = \"ParamAngleZ\";\nconst ParamEyeBallX = \"ParamEyeBallX\";\nconst ParamEyeBallY = \"ParamEyeBallY\";\nconst ParamBodyAngleX = \"ParamBodyAngleX\";\nconst ParamBreath = \"ParamBreath\";\nclass CubismBreath {\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    this._breathParameters = [];\n    this._currentTime = 0;\n  }\n  /**\n   * インスタンスの作成\n   */\n  static create() {\n    return new CubismBreath();\n  }\n  /**\n   * 呼吸のパラメータの紐づけ\n   * @param breathParameters 呼吸を紐づけたいパラメータのリスト\n   */\n  setParameters(breathParameters) {\n    this._breathParameters = breathParameters;\n  }\n  /**\n   * 呼吸に紐づいているパラメータの取得\n   * @return 呼吸に紐づいているパラメータのリスト\n   */\n  getParameters() {\n    return this._breathParameters;\n  }\n  /**\n   * モデルのパラメータの更新\n   * @param model 対象のモデル\n   * @param deltaTimeSeconds デルタ時間[秒]\n   */\n  updateParameters(model, deltaTimeSeconds) {\n    this._currentTime += deltaTimeSeconds;\n    const t = this._currentTime * 2 * 3.14159;\n    for (let i = 0; i < this._breathParameters.length; ++i) {\n      const data = this._breathParameters[i];\n      model.addParameterValueById(\n        data.parameterId,\n        data.offset + data.peak * Math.sin(t / data.cycle),\n        data.weight\n      );\n    }\n  }\n  // 積算時間[秒]\n}\nclass BreathParameterData {\n  /**\n   * コンストラクタ\n   * @param parameterId   呼吸をひもづけるパラメータID\n   * @param offset        呼吸を正弦波としたときの、波のオフセット\n   * @param peak          呼吸を正弦波としたときの、波の高さ\n   * @param cycle         呼吸を正弦波としたときの、波の周期\n   * @param weight        パラメータへの重み\n   */\n  constructor(parameterId, offset, peak, cycle, weight) {\n    this.parameterId = parameterId == void 0 ? void 0 : parameterId;\n    this.offset = offset == void 0 ? 0 : offset;\n    this.peak = peak == void 0 ? 0 : peak;\n    this.cycle = cycle == void 0 ? 0 : cycle;\n    this.weight = weight == void 0 ? 0 : weight;\n  }\n  // パラメータへの重み\n}\nconst _CubismEyeBlink = class _CubismEyeBlink {\n  /**\n   * インスタンスを作成する\n   * @param modelSetting モデルの設定情報\n   * @return 作成されたインスタンス\n   * @note 引数がNULLの場合、パラメータIDが設定されていない空のインスタンスを作成する。\n   */\n  static create(modelSetting) {\n    return new _CubismEyeBlink(modelSetting);\n  }\n  /**\n   * まばたきの間隔の設定\n   * @param blinkingInterval まばたきの間隔の時間[秒]\n   */\n  setBlinkingInterval(blinkingInterval) {\n    this._blinkingIntervalSeconds = blinkingInterval;\n  }\n  /**\n   * まばたきのモーションの詳細設定\n   * @param closing   まぶたを閉じる動作の所要時間[秒]\n   * @param closed    まぶたを閉じている動作の所要時間[秒]\n   * @param opening   まぶたを開く動作の所要時間[秒]\n   */\n  setBlinkingSetting(closing, closed, opening) {\n    this._closingSeconds = closing;\n    this._closedSeconds = closed;\n    this._openingSeconds = opening;\n  }\n  /**\n   * まばたきさせるパラメータIDのリストの設定\n   * @param parameterIds パラメータのIDのリスト\n   */\n  setParameterIds(parameterIds) {\n    this._parameterIds = parameterIds;\n  }\n  /**\n   * まばたきさせるパラメータIDのリストの取得\n   * @return パラメータIDのリスト\n   */\n  getParameterIds() {\n    return this._parameterIds;\n  }\n  /**\n   * モデルのパラメータの更新\n   * @param model 対象のモデル\n   * @param deltaTimeSeconds デルタ時間[秒]\n   */\n  updateParameters(model, deltaTimeSeconds) {\n    this._userTimeSeconds += deltaTimeSeconds;\n    let parameterValue;\n    let t = 0;\n    switch (this._blinkingState) {\n      case 2:\n        t = (this._userTimeSeconds - this._stateStartTimeSeconds) / this._closingSeconds;\n        if (t >= 1) {\n          t = 1;\n          this._blinkingState = 3;\n          this._stateStartTimeSeconds = this._userTimeSeconds;\n        }\n        parameterValue = 1 - t;\n        break;\n      case 3:\n        t = (this._userTimeSeconds - this._stateStartTimeSeconds) / this._closedSeconds;\n        if (t >= 1) {\n          this._blinkingState = 4;\n          this._stateStartTimeSeconds = this._userTimeSeconds;\n        }\n        parameterValue = 0;\n        break;\n      case 4:\n        t = (this._userTimeSeconds - this._stateStartTimeSeconds) / this._openingSeconds;\n        if (t >= 1) {\n          t = 1;\n          this._blinkingState = 1;\n          this._nextBlinkingTime = this.determinNextBlinkingTiming();\n        }\n        parameterValue = t;\n        break;\n      case 1:\n        if (this._nextBlinkingTime < this._userTimeSeconds) {\n          this._blinkingState = 2;\n          this._stateStartTimeSeconds = this._userTimeSeconds;\n        }\n        parameterValue = 1;\n        break;\n      case 0:\n      default:\n        this._blinkingState = 1;\n        this._nextBlinkingTime = this.determinNextBlinkingTiming();\n        parameterValue = 1;\n        break;\n    }\n    if (!_CubismEyeBlink.CloseIfZero) {\n      parameterValue = -parameterValue;\n    }\n    for (let i = 0; i < this._parameterIds.length; ++i) {\n      model.setParameterValueById(this._parameterIds[i], parameterValue);\n    }\n  }\n  /**\n   * コンストラクタ\n   * @param modelSetting モデルの設定情報\n   */\n  constructor(modelSetting) {\n    var _a, _b;\n    this._blinkingState = 0;\n    this._nextBlinkingTime = 0;\n    this._stateStartTimeSeconds = 0;\n    this._blinkingIntervalSeconds = 4;\n    this._closingSeconds = 0.1;\n    this._closedSeconds = 0.05;\n    this._openingSeconds = 0.15;\n    this._userTimeSeconds = 0;\n    this._parameterIds = [];\n    if (modelSetting == null) {\n      return;\n    }\n    this._parameterIds = (_b = (_a = modelSetting.getEyeBlinkParameters()) == null ? void 0 : _a.slice()) != null ? _b : this._parameterIds;\n  }\n  /**\n   * 次の瞬きのタイミングの決定\n   *\n   * @return 次のまばたきを行う時刻[秒]\n   */\n  determinNextBlinkingTiming() {\n    const r = Math.random();\n    return this._userTimeSeconds + r * (2 * this._blinkingIntervalSeconds - 1);\n  }\n};\n_CubismEyeBlink.CloseIfZero = true;\nlet CubismEyeBlink = _CubismEyeBlink;\nclass csmRect {\n  /**\n   * コンストラクタ\n   * @param x 左端X座標\n   * @param y 上端Y座標\n   * @param w 幅\n   * @param h 高さ\n   */\n  constructor(x = 0, y = 0, w = 0, h = 0) {\n    this.x = x;\n    this.y = y;\n    this.width = w;\n    this.height = h;\n  }\n  /**\n   * 矩形中央のX座標を取得する\n   */\n  getCenterX() {\n    return this.x + 0.5 * this.width;\n  }\n  /**\n   * 矩形中央のY座標を取得する\n   */\n  getCenterY() {\n    return this.y + 0.5 * this.height;\n  }\n  /**\n   * 右側のX座標を取得する\n   */\n  getRight() {\n    return this.x + this.width;\n  }\n  /**\n   * 下端のY座標を取得する\n   */\n  getBottom() {\n    return this.y + this.height;\n  }\n  /**\n   * 矩形に値をセットする\n   * @param r 矩形のインスタンス\n   */\n  setRect(r) {\n    this.x = r.x;\n    this.y = r.y;\n    this.width = r.width;\n    this.height = r.height;\n  }\n  /**\n   * 矩形中央を軸にして縦横を拡縮する\n   * @param w 幅方向に拡縮する量\n   * @param h 高さ方向に拡縮する量\n   */\n  expand(w, h) {\n    this.x -= w;\n    this.y -= h;\n    this.width += w * 2;\n    this.height += h * 2;\n  }\n  // 高さ\n}\nconst ColorChannelCount = 4;\nconst ClippingMaskMaxCountOnDefault = 36;\nconst ClippingMaskMaxCountOnMultiRenderTexture = 32;\nconst ShaderCount = 10;\nlet s_instance;\nlet s_viewport;\nlet s_fbo;\nclass CubismClippingManager_WebGL {\n  /**\n   * カラーチャンネル（RGBA）のフラグを取得する\n   * @param channelNo カラーチャンネル（RGBA）の番号（0:R, 1:G, 2:B, 3:A）\n   */\n  getChannelFlagAsColor(channelNo) {\n    return this._channelColors[channelNo];\n  }\n  /**\n   * テンポラリのレンダーテクスチャのアドレスを取得する\n   * FrameBufferObjectが存在しない場合、新しく生成する\n   *\n   * @return レンダーテクスチャの配列\n   */\n  getMaskRenderTexture() {\n    if (this._maskTexture && this._maskTexture.textures != null) {\n      this._maskTexture.frameNo = this._currentFrameNo;\n    } else {\n      this._maskRenderTextures = [];\n      this._maskColorBuffers = [];\n      const size = this._clippingMaskBufferSize;\n      for (let index = 0; index < this._renderTextureCount; index++) {\n        this._maskColorBuffers.push(this.gl.createTexture());\n        this.gl.bindTexture(this.gl.TEXTURE_2D, this._maskColorBuffers[index]);\n        this.gl.texImage2D(\n          this.gl.TEXTURE_2D,\n          0,\n          this.gl.RGBA,\n          size,\n          size,\n          0,\n          this.gl.RGBA,\n          this.gl.UNSIGNED_BYTE,\n          null\n        );\n        this.gl.texParameteri(\n          this.gl.TEXTURE_2D,\n          this.gl.TEXTURE_WRAP_S,\n          this.gl.CLAMP_TO_EDGE\n        );\n        this.gl.texParameteri(\n          this.gl.TEXTURE_2D,\n          this.gl.TEXTURE_WRAP_T,\n          this.gl.CLAMP_TO_EDGE\n        );\n        this.gl.texParameteri(\n          this.gl.TEXTURE_2D,\n          this.gl.TEXTURE_MIN_FILTER,\n          this.gl.LINEAR\n        );\n        this.gl.texParameteri(\n          this.gl.TEXTURE_2D,\n          this.gl.TEXTURE_MAG_FILTER,\n          this.gl.LINEAR\n        );\n        this.gl.bindTexture(this.gl.TEXTURE_2D, null);\n        this._maskRenderTextures.push(this.gl.createFramebuffer());\n        this.gl.bindFramebuffer(\n          this.gl.FRAMEBUFFER,\n          this._maskRenderTextures[index]\n        );\n        this.gl.framebufferTexture2D(\n          this.gl.FRAMEBUFFER,\n          this.gl.COLOR_ATTACHMENT0,\n          this.gl.TEXTURE_2D,\n          this._maskColorBuffers[index],\n          0\n        );\n      }\n      this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo);\n      this._maskTexture = new CubismRenderTextureResource(\n        this._currentFrameNo,\n        this._maskRenderTextures\n      );\n    }\n    return this._maskTexture.textures;\n  }\n  /**\n   * WebGLレンダリングコンテキストを設定する\n   * @param gl WebGLレンダリングコンテキスト\n   */\n  setGL(gl) {\n    this.gl = gl;\n  }\n  /**\n   * マスクされる描画オブジェクト群全体を囲む矩形（モデル座標系）を計算する\n   * @param model モデルのインスタンス\n   * @param clippingContext クリッピングマスクのコンテキスト\n   */\n  calcClippedDrawTotalBounds(model, clippingContext) {\n    let clippedDrawTotalMinX = Number.MAX_VALUE;\n    let clippedDrawTotalMinY = Number.MAX_VALUE;\n    let clippedDrawTotalMaxX = Number.MIN_VALUE;\n    let clippedDrawTotalMaxY = Number.MIN_VALUE;\n    const clippedDrawCount = clippingContext._clippedDrawableIndexList.length;\n    for (let clippedDrawableIndex = 0; clippedDrawableIndex < clippedDrawCount; clippedDrawableIndex++) {\n      const drawableIndex = clippingContext._clippedDrawableIndexList[clippedDrawableIndex];\n      const drawableVertexCount = model.getDrawableVertexCount(drawableIndex);\n      const drawableVertexes = model.getDrawableVertices(drawableIndex);\n      let minX = Number.MAX_VALUE;\n      let minY = Number.MAX_VALUE;\n      let maxX = -Number.MAX_VALUE;\n      let maxY = -Number.MAX_VALUE;\n      const loop = drawableVertexCount * Constant.vertexStep;\n      for (let pi = Constant.vertexOffset; pi < loop; pi += Constant.vertexStep) {\n        const x = drawableVertexes[pi];\n        const y = drawableVertexes[pi + 1];\n        if (x < minX) {\n          minX = x;\n        }\n        if (x > maxX) {\n          maxX = x;\n        }\n        if (y < minY) {\n          minY = y;\n        }\n        if (y > maxY) {\n          maxY = y;\n        }\n      }\n      if (minX == Number.MAX_VALUE) {\n        continue;\n      }\n      if (minX < clippedDrawTotalMinX) {\n        clippedDrawTotalMinX = minX;\n      }\n      if (minY < clippedDrawTotalMinY) {\n        clippedDrawTotalMinY = minY;\n      }\n      if (maxX > clippedDrawTotalMaxX) {\n        clippedDrawTotalMaxX = maxX;\n      }\n      if (maxY > clippedDrawTotalMaxY) {\n        clippedDrawTotalMaxY = maxY;\n      }\n      if (clippedDrawTotalMinX == Number.MAX_VALUE) {\n        clippingContext._allClippedDrawRect.x = 0;\n        clippingContext._allClippedDrawRect.y = 0;\n        clippingContext._allClippedDrawRect.width = 0;\n        clippingContext._allClippedDrawRect.height = 0;\n        clippingContext._isUsing = false;\n      } else {\n        clippingContext._isUsing = true;\n        const w = clippedDrawTotalMaxX - clippedDrawTotalMinX;\n        const h = clippedDrawTotalMaxY - clippedDrawTotalMinY;\n        clippingContext._allClippedDrawRect.x = clippedDrawTotalMinX;\n        clippingContext._allClippedDrawRect.y = clippedDrawTotalMinY;\n        clippingContext._allClippedDrawRect.width = w;\n        clippingContext._allClippedDrawRect.height = h;\n      }\n    }\n  }\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    this._currentMaskRenderTexture = null;\n    this._currentFrameNo = 0;\n    this._renderTextureCount = 0;\n    this._clippingMaskBufferSize = 256;\n    this._clippingContextListForMask = [];\n    this._clippingContextListForDraw = [];\n    this._channelColors = [];\n    this._tmpBoundsOnModel = new csmRect();\n    this._tmpMatrix = new CubismMatrix44();\n    this._tmpMatrixForMask = new CubismMatrix44();\n    this._tmpMatrixForDraw = new CubismMatrix44();\n    let tmp = new CubismTextureColor();\n    tmp.R = 1;\n    tmp.G = 0;\n    tmp.B = 0;\n    tmp.A = 0;\n    this._channelColors.push(tmp);\n    tmp = new CubismTextureColor();\n    tmp.R = 0;\n    tmp.G = 1;\n    tmp.B = 0;\n    tmp.A = 0;\n    this._channelColors.push(tmp);\n    tmp = new CubismTextureColor();\n    tmp.R = 0;\n    tmp.G = 0;\n    tmp.B = 1;\n    tmp.A = 0;\n    this._channelColors.push(tmp);\n    tmp = new CubismTextureColor();\n    tmp.R = 0;\n    tmp.G = 0;\n    tmp.B = 0;\n    tmp.A = 1;\n    this._channelColors.push(tmp);\n  }\n  /**\n   * デストラクタ相当の処理\n   */\n  release() {\n    var _a;\n    const self = this;\n    for (let i = 0; i < this._clippingContextListForMask.length; i++) {\n      if (this._clippingContextListForMask[i]) {\n        (_a = this._clippingContextListForMask[i]) == null ? void 0 : _a.release();\n      }\n    }\n    self._clippingContextListForMask = void 0;\n    self._clippingContextListForDraw = void 0;\n    if (this._maskTexture) {\n      for (let i = 0; i < this._maskTexture.textures.length; i++) {\n        this.gl.deleteFramebuffer(this._maskTexture.textures[i]);\n      }\n      this._maskTexture = void 0;\n    }\n    self._channelColors = void 0;\n    if (this._maskColorBuffers) {\n      for (let index = 0; index < this._maskColorBuffers.length; index++) {\n        this.gl.deleteTexture(this._maskColorBuffers[index]);\n      }\n    }\n    this._maskColorBuffers = void 0;\n    this._maskRenderTextures = void 0;\n    this._clearedFrameBufferflags = void 0;\n  }\n  /**\n   * マネージャの初期化処理\n   * クリッピングマスクを使う描画オブジェクトの登録を行う\n   * @param model モデルのインスタンス\n   * @param drawableCount 描画オブジェクトの数\n   * @param drawableMasks 描画オブジェクトをマスクする描画オブジェクトのインデックスのリスト\n   * @param drawableMaskCounts 描画オブジェクトをマスクする描画オブジェクトの数\n   * @param renderTextureCount バッファの生成数\n   */\n  initialize(model, drawableCount, drawableMasks, drawableMaskCounts, renderTextureCount) {\n    if (renderTextureCount % 1 != 0) {\n      CubismLogWarning(\n        \"The number of render textures must be specified as an integer. The decimal point is rounded down and corrected to an integer.\"\n      );\n      renderTextureCount = ~~renderTextureCount;\n    }\n    if (renderTextureCount < 1) {\n      CubismLogWarning(\n        \"The number of render textures must be an integer greater than or equal to 1. Set the number of render textures to 1.\"\n      );\n    }\n    this._renderTextureCount = renderTextureCount < 1 ? 1 : renderTextureCount;\n    this._clearedFrameBufferflags = [];\n    for (let i = 0; i < drawableCount; i++) {\n      if (drawableMaskCounts[i] <= 0) {\n        this._clippingContextListForDraw.push(null);\n        continue;\n      }\n      let clippingContext = this.findSameClip(\n        drawableMasks[i],\n        drawableMaskCounts[i]\n      );\n      if (clippingContext == null) {\n        clippingContext = new CubismClippingContext(\n          this,\n          drawableMasks[i],\n          drawableMaskCounts[i]\n        );\n        this._clippingContextListForMask.push(clippingContext);\n      }\n      clippingContext.addClippedDrawable(i);\n      this._clippingContextListForDraw.push(clippingContext);\n    }\n  }\n  /**\n   * クリッピングコンテキストを作成する。モデル描画時に実行する。\n   * @param model モデルのインスタンス\n   * @param renderer レンダラのインスタンス\n   */\n  setupClippingContext(model, renderer) {\n    this._currentFrameNo++;\n    let usingClipCount = 0;\n    for (let clipIndex = 0; clipIndex < this._clippingContextListForMask.length; clipIndex++) {\n      const cc = this._clippingContextListForMask[clipIndex];\n      this.calcClippedDrawTotalBounds(model, cc);\n      if (cc._isUsing) {\n        usingClipCount++;\n      }\n    }\n    if (usingClipCount > 0) {\n      this.setupLayoutBounds(\n        renderer.isUsingHighPrecisionMask() ? 0 : usingClipCount\n      );\n      if (!renderer.isUsingHighPrecisionMask()) {\n        this.gl.viewport(\n          0,\n          0,\n          this._clippingMaskBufferSize,\n          this._clippingMaskBufferSize\n        );\n        this._currentMaskRenderTexture = this.getMaskRenderTexture()[0];\n        renderer.preDraw();\n        this.gl.bindFramebuffer(\n          this.gl.FRAMEBUFFER,\n          this._currentMaskRenderTexture\n        );\n      }\n      if (!this._clearedFrameBufferflags) {\n        this._clearedFrameBufferflags = [];\n      }\n      for (let index = 0; index < this._renderTextureCount; index++) {\n        this._clearedFrameBufferflags[index] = false;\n      }\n      for (let clipIndex = 0; clipIndex < this._clippingContextListForMask.length; clipIndex++) {\n        const clipContext = this._clippingContextListForMask[clipIndex];\n        const allClipedDrawRect = clipContext._allClippedDrawRect;\n        const layoutBoundsOnTex01 = clipContext._layoutBounds;\n        const MARGIN = 0.05;\n        let scaleX = 0;\n        let scaleY = 0;\n        const clipContextRenderTexture = this.getMaskRenderTexture()[clipContext._bufferIndex];\n        if (this._currentMaskRenderTexture != clipContextRenderTexture && !renderer.isUsingHighPrecisionMask()) {\n          this._currentMaskRenderTexture = clipContextRenderTexture;\n          renderer.preDraw();\n          this.gl.bindFramebuffer(\n            this.gl.FRAMEBUFFER,\n            this._currentMaskRenderTexture\n          );\n        }\n        if (renderer.isUsingHighPrecisionMask()) {\n          const ppu = model.getPixelsPerUnit();\n          const maskPixelSize = clipContext.getClippingManager()._clippingMaskBufferSize;\n          const physicalMaskWidth = layoutBoundsOnTex01.width * maskPixelSize;\n          const physicalMaskHeight = layoutBoundsOnTex01.height * maskPixelSize;\n          this._tmpBoundsOnModel.setRect(allClipedDrawRect);\n          if (this._tmpBoundsOnModel.width * ppu > physicalMaskWidth) {\n            this._tmpBoundsOnModel.expand(\n              allClipedDrawRect.width * MARGIN,\n              0\n            );\n            scaleX = layoutBoundsOnTex01.width / this._tmpBoundsOnModel.width;\n          } else {\n            scaleX = ppu / physicalMaskWidth;\n          }\n          if (this._tmpBoundsOnModel.height * ppu > physicalMaskHeight) {\n            this._tmpBoundsOnModel.expand(\n              0,\n              allClipedDrawRect.height * MARGIN\n            );\n            scaleY = layoutBoundsOnTex01.height / this._tmpBoundsOnModel.height;\n          } else {\n            scaleY = ppu / physicalMaskHeight;\n          }\n        } else {\n          this._tmpBoundsOnModel.setRect(allClipedDrawRect);\n          this._tmpBoundsOnModel.expand(\n            allClipedDrawRect.width * MARGIN,\n            allClipedDrawRect.height * MARGIN\n          );\n          scaleX = layoutBoundsOnTex01.width / this._tmpBoundsOnModel.width;\n          scaleY = layoutBoundsOnTex01.height / this._tmpBoundsOnModel.height;\n        }\n        {\n          this._tmpMatrix.loadIdentity();\n          {\n            this._tmpMatrix.translateRelative(-1, -1);\n            this._tmpMatrix.scaleRelative(2, 2);\n          }\n          {\n            this._tmpMatrix.translateRelative(\n              layoutBoundsOnTex01.x,\n              layoutBoundsOnTex01.y\n            );\n            this._tmpMatrix.scaleRelative(scaleX, scaleY);\n            this._tmpMatrix.translateRelative(\n              -this._tmpBoundsOnModel.x,\n              -this._tmpBoundsOnModel.y\n            );\n          }\n          this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray());\n        }\n        {\n          this._tmpMatrix.loadIdentity();\n          {\n            this._tmpMatrix.translateRelative(\n              layoutBoundsOnTex01.x,\n              layoutBoundsOnTex01.y\n            );\n            this._tmpMatrix.scaleRelative(scaleX, scaleY);\n            this._tmpMatrix.translateRelative(\n              -this._tmpBoundsOnModel.x,\n              -this._tmpBoundsOnModel.y\n            );\n          }\n          this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray());\n        }\n        clipContext._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray());\n        clipContext._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray());\n        if (!renderer.isUsingHighPrecisionMask()) {\n          const clipDrawCount = clipContext._clippingIdCount;\n          for (let i = 0; i < clipDrawCount; i++) {\n            const clipDrawIndex = clipContext._clippingIdList[i];\n            if (!model.getDrawableDynamicFlagVertexPositionsDidChange(\n              clipDrawIndex\n            )) {\n              continue;\n            }\n            renderer.setIsCulling(\n              model.getDrawableCulling(clipDrawIndex) != false\n            );\n            if (!this._clearedFrameBufferflags[clipContext._bufferIndex]) {\n              this.gl.clearColor(1, 1, 1, 1);\n              this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n              this._clearedFrameBufferflags[clipContext._bufferIndex] = true;\n            }\n            renderer.setClippingContextBufferForMask(clipContext);\n            renderer.drawMesh(\n              model.getDrawableTextureIndex(clipDrawIndex),\n              model.getDrawableVertexIndexCount(clipDrawIndex),\n              model.getDrawableVertexCount(clipDrawIndex),\n              model.getDrawableVertexIndices(clipDrawIndex),\n              model.getDrawableVertices(clipDrawIndex),\n              model.getDrawableVertexUvs(clipDrawIndex),\n              model.getMultiplyColor(clipDrawIndex),\n              model.getScreenColor(clipDrawIndex),\n              model.getDrawableOpacity(clipDrawIndex),\n              CubismBlendMode.CubismBlendMode_Normal,\n              // クリッピングは通常描画を強制\n              false\n              // マスク生成時はクリッピングの反転使用は全く関係がない\n            );\n          }\n        }\n      }\n      if (!renderer.isUsingHighPrecisionMask()) {\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo);\n        renderer.setClippingContextBufferForMask(null);\n        this.gl.viewport(\n          s_viewport[0],\n          s_viewport[1],\n          s_viewport[2],\n          s_viewport[3]\n        );\n      }\n    }\n  }\n  /**\n   * 既にマスクを作っているかを確認\n   * 作っている様であれば該当するクリッピングマスクのインスタンスを返す\n   * 作っていなければNULLを返す\n   * @param drawableMasks 描画オブジェクトをマスクする描画オブジェクトのリスト\n   * @param drawableMaskCounts 描画オブジェクトをマスクする描画オブジェクトの数\n   * @return 該当するクリッピングマスクが存在すればインスタンスを返し、なければNULLを返す\n   */\n  findSameClip(drawableMasks, drawableMaskCounts) {\n    for (let i = 0; i < this._clippingContextListForMask.length; i++) {\n      const clippingContext = this._clippingContextListForMask[i];\n      const count = clippingContext._clippingIdCount;\n      if (count != drawableMaskCounts) {\n        continue;\n      }\n      let sameCount = 0;\n      for (let j = 0; j < count; j++) {\n        const clipId = clippingContext._clippingIdList[j];\n        for (let k = 0; k < count; k++) {\n          if (drawableMasks[k] == clipId) {\n            sameCount++;\n            break;\n          }\n        }\n      }\n      if (sameCount == count) {\n        return clippingContext;\n      }\n    }\n    return null;\n  }\n  /**\n   * クリッピングコンテキストを配置するレイアウト\n   * 指定された数のレンダーテクスチャを極力いっぱいに使ってマスクをレイアウトする\n   * マスクグループの数が4以下ならRGBA各チャンネルに一つずつマスクを配置し、5以上6以下ならRGBAを2,2,1,1と配置する。\n   *\n   * @param usingClipCount 配置するクリッピングコンテキストの数\n   */\n  setupLayoutBounds(usingClipCount) {\n    const useClippingMaskMaxCount = this._renderTextureCount <= 1 ? ClippingMaskMaxCountOnDefault : ClippingMaskMaxCountOnMultiRenderTexture * this._renderTextureCount;\n    if (usingClipCount <= 0 || usingClipCount > useClippingMaskMaxCount) {\n      if (usingClipCount > useClippingMaskMaxCount) {\n        CubismLogError(\n          \"not supported mask count : {0}\\n[Details] render texture count : {1}, mask count : {2}\",\n          usingClipCount - useClippingMaskMaxCount,\n          this._renderTextureCount,\n          usingClipCount\n        );\n      }\n      for (let index = 0; index < this._clippingContextListForMask.length; index++) {\n        const clipContext = this._clippingContextListForMask[index];\n        clipContext._layoutChannelNo = 0;\n        clipContext._layoutBounds.x = 0;\n        clipContext._layoutBounds.y = 0;\n        clipContext._layoutBounds.width = 1;\n        clipContext._layoutBounds.height = 1;\n        clipContext._bufferIndex = 0;\n      }\n      return;\n    }\n    const layoutCountMaxValue = this._renderTextureCount <= 1 ? 9 : 8;\n    let countPerSheetDiv = usingClipCount / this._renderTextureCount;\n    let countPerSheetMod = usingClipCount % this._renderTextureCount;\n    countPerSheetDiv = ~~countPerSheetDiv;\n    countPerSheetMod = ~~countPerSheetMod;\n    let div = countPerSheetDiv / ColorChannelCount;\n    let mod = countPerSheetDiv % ColorChannelCount;\n    div = ~~div;\n    mod = ~~mod;\n    let curClipIndex = 0;\n    for (let renderTextureNo = 0; renderTextureNo < this._renderTextureCount; renderTextureNo++) {\n      for (let channelNo = 0; channelNo < ColorChannelCount; channelNo++) {\n        let layoutCount = div + (channelNo < mod ? 1 : 0);\n        const checkChannelNo = mod + 1 >= ColorChannelCount ? 0 : mod + 1;\n        if (layoutCount < layoutCountMaxValue && channelNo == checkChannelNo) {\n          layoutCount += renderTextureNo < countPerSheetMod ? 1 : 0;\n        }\n        if (layoutCount == 0)\n          ;\n        else if (layoutCount == 1) {\n          const clipContext = this._clippingContextListForMask[curClipIndex++];\n          clipContext._layoutChannelNo = channelNo;\n          clipContext._layoutBounds.x = 0;\n          clipContext._layoutBounds.y = 0;\n          clipContext._layoutBounds.width = 1;\n          clipContext._layoutBounds.height = 1;\n          clipContext._bufferIndex = renderTextureNo;\n        } else if (layoutCount == 2) {\n          for (let i = 0; i < layoutCount; i++) {\n            let xpos = i % 2;\n            xpos = ~~xpos;\n            const cc = this._clippingContextListForMask[curClipIndex++];\n            cc._layoutChannelNo = channelNo;\n            cc._layoutBounds.x = xpos * 0.5;\n            cc._layoutBounds.y = 0;\n            cc._layoutBounds.width = 0.5;\n            cc._layoutBounds.height = 1;\n            cc._bufferIndex = renderTextureNo;\n          }\n        } else if (layoutCount <= 4) {\n          for (let i = 0; i < layoutCount; i++) {\n            let xpos = i % 2;\n            let ypos = i / 2;\n            xpos = ~~xpos;\n            ypos = ~~ypos;\n            const cc = this._clippingContextListForMask[curClipIndex++];\n            cc._layoutChannelNo = channelNo;\n            cc._layoutBounds.x = xpos * 0.5;\n            cc._layoutBounds.y = ypos * 0.5;\n            cc._layoutBounds.width = 0.5;\n            cc._layoutBounds.height = 0.5;\n            cc._bufferIndex = renderTextureNo;\n          }\n        } else if (layoutCount <= layoutCountMaxValue) {\n          for (let i = 0; i < layoutCount; i++) {\n            let xpos = i % 3;\n            let ypos = i / 3;\n            xpos = ~~xpos;\n            ypos = ~~ypos;\n            const cc = this._clippingContextListForMask[curClipIndex++];\n            cc._layoutChannelNo = channelNo;\n            cc._layoutBounds.x = xpos / 3;\n            cc._layoutBounds.y = ypos / 3;\n            cc._layoutBounds.width = 1 / 3;\n            cc._layoutBounds.height = 1 / 3;\n            cc._bufferIndex = renderTextureNo;\n          }\n        } else if (CubismConfig.supportMoreMaskDivisions && layoutCount <= 16) {\n          for (let i = 0; i < layoutCount; i++) {\n            let xpos = i % 4;\n            let ypos = i / 4;\n            xpos = ~~xpos;\n            ypos = ~~ypos;\n            const cc = this._clippingContextListForMask[curClipIndex++];\n            cc._layoutChannelNo = channelNo;\n            cc._layoutBounds.x = xpos / 4;\n            cc._layoutBounds.y = ypos / 4;\n            cc._layoutBounds.width = 1 / 4;\n            cc._layoutBounds.height = 1 / 4;\n            cc._bufferIndex = renderTextureNo;\n          }\n        } else {\n          CubismLogError(\n            \"not supported mask count : {0}\\n[Details] render texture count : {1}, mask count : {2}\",\n            usingClipCount - useClippingMaskMaxCount,\n            this._renderTextureCount,\n            usingClipCount\n          );\n          for (let index = 0; index < layoutCount; index++) {\n            const cc = this._clippingContextListForMask[curClipIndex++];\n            cc._layoutChannelNo = 0;\n            cc._layoutBounds.x = 0;\n            cc._layoutBounds.y = 0;\n            cc._layoutBounds.width = 1;\n            cc._layoutBounds.height = 1;\n            cc._bufferIndex = 0;\n          }\n        }\n      }\n    }\n  }\n  /**\n   * カラーバッファを取得する\n   * @return カラーバッファ\n   */\n  getColorBuffer() {\n    return this._maskColorBuffers;\n  }\n  /**\n   * 画面描画に使用するクリッピングマスクのリストを取得する\n   * @return 画面描画に使用するクリッピングマスクのリスト\n   */\n  getClippingContextListForDraw() {\n    return this._clippingContextListForDraw;\n  }\n  /**\n   * マスクの合計数をカウント\n   * @returns\n   */\n  getClippingMaskCount() {\n    return this._clippingContextListForMask.length;\n  }\n  /**\n   * クリッピングマスクバッファのサイズを設定する\n   * @param size クリッピングマスクバッファのサイズ\n   */\n  setClippingMaskBufferSize(size) {\n    this._clippingMaskBufferSize = size;\n  }\n  /**\n   * クリッピングマスクバッファのサイズを取得する\n   * @return クリッピングマスクバッファのサイズ\n   */\n  getClippingMaskBufferSize() {\n    return this._clippingMaskBufferSize;\n  }\n  /**\n   * このバッファのレンダーテクスチャの枚数を取得する\n   * @return このバッファのレンダーテクスチャの枚数\n   */\n  getRenderTextureCount() {\n    return this._renderTextureCount;\n  }\n  // WebGLレンダリングコンテキスト\n}\nclass CubismRenderTextureResource {\n  /**\n   * 引数付きコンストラクタ\n   * @param frameNo レンダラーのフレーム番号\n   * @param texture テクスチャのアドレス\n   */\n  constructor(frameNo, texture) {\n    this.frameNo = frameNo;\n    this.textures = texture;\n  }\n  // テクスチャのアドレス\n}\nclass CubismClippingContext {\n  /**\n   * 引数付きコンストラクタ\n   */\n  constructor(manager, clippingDrawableIndices, clipCount) {\n    this._isUsing = false;\n    this._owner = manager;\n    this._clippingIdList = clippingDrawableIndices;\n    this._clippingIdCount = clipCount;\n    this._allClippedDrawRect = new csmRect();\n    this._layoutBounds = new csmRect();\n    this._clippedDrawableIndexList = [];\n    this._matrixForMask = new CubismMatrix44();\n    this._matrixForDraw = new CubismMatrix44();\n    this._bufferIndex = 0;\n  }\n  /**\n   * デストラクタ相当の処理\n   */\n  release() {\n    const self = this;\n    self._layoutBounds = void 0;\n    self._allClippedDrawRect = void 0;\n    self._clippedDrawableIndexList = void 0;\n  }\n  /**\n   * このマスクにクリップされる描画オブジェクトを追加する\n   *\n   * @param drawableIndex クリッピング対象に追加する描画オブジェクトのインデックス\n   */\n  addClippedDrawable(drawableIndex) {\n    this._clippedDrawableIndexList.push(drawableIndex);\n  }\n  /**\n   * このマスクを管理するマネージャのインスタンスを取得する\n   * @return クリッピングマネージャのインスタンス\n   */\n  getClippingManager() {\n    return this._owner;\n  }\n  setGl(gl) {\n    this._owner.setGL(gl);\n  }\n  // このマスクを管理しているマネージャのインスタンス\n}\nclass CubismRendererProfile_WebGL {\n  setGlEnable(index, enabled) {\n    if (enabled)\n      this.gl.enable(index);\n    else\n      this.gl.disable(index);\n  }\n  setGlEnableVertexAttribArray(index, enabled) {\n    if (enabled)\n      this.gl.enableVertexAttribArray(index);\n    else\n      this.gl.disableVertexAttribArray(index);\n  }\n  save() {\n    if (this.gl == null) {\n      CubismLogError(\n        \"'gl' is null. WebGLRenderingContext is required.\\nPlease call 'CubimRenderer_WebGL.startUp' function.\"\n      );\n      return;\n    }\n    this._lastArrayBufferBinding = this.gl.getParameter(\n      this.gl.ARRAY_BUFFER_BINDING\n    );\n    this._lastArrayBufferBinding = this.gl.getParameter(\n      this.gl.ELEMENT_ARRAY_BUFFER_BINDING\n    );\n    this._lastProgram = this.gl.getParameter(this.gl.CURRENT_PROGRAM);\n    this._lastActiveTexture = this.gl.getParameter(this.gl.ACTIVE_TEXTURE);\n    this.gl.activeTexture(this.gl.TEXTURE1);\n    this._lastTexture1Binding2D = this.gl.getParameter(\n      this.gl.TEXTURE_BINDING_2D\n    );\n    this.gl.activeTexture(this.gl.TEXTURE0);\n    this._lastTexture0Binding2D = this.gl.getParameter(\n      this.gl.TEXTURE_BINDING_2D\n    );\n    this._lastVertexAttribArrayEnabled[0] = this.gl.getVertexAttrib(\n      0,\n      this.gl.VERTEX_ATTRIB_ARRAY_ENABLED\n    );\n    this._lastVertexAttribArrayEnabled[1] = this.gl.getVertexAttrib(\n      1,\n      this.gl.VERTEX_ATTRIB_ARRAY_ENABLED\n    );\n    this._lastVertexAttribArrayEnabled[2] = this.gl.getVertexAttrib(\n      2,\n      this.gl.VERTEX_ATTRIB_ARRAY_ENABLED\n    );\n    this._lastVertexAttribArrayEnabled[3] = this.gl.getVertexAttrib(\n      3,\n      this.gl.VERTEX_ATTRIB_ARRAY_ENABLED\n    );\n    this._lastScissorTest = this.gl.isEnabled(this.gl.SCISSOR_TEST);\n    this._lastStencilTest = this.gl.isEnabled(this.gl.STENCIL_TEST);\n    this._lastDepthTest = this.gl.isEnabled(this.gl.DEPTH_TEST);\n    this._lastCullFace = this.gl.isEnabled(this.gl.CULL_FACE);\n    this._lastBlend = this.gl.isEnabled(this.gl.BLEND);\n    this._lastFrontFace = this.gl.getParameter(this.gl.FRONT_FACE);\n    this._lastColorMask = this.gl.getParameter(this.gl.COLOR_WRITEMASK);\n    this._lastBlending[0] = this.gl.getParameter(this.gl.BLEND_SRC_RGB);\n    this._lastBlending[1] = this.gl.getParameter(this.gl.BLEND_DST_RGB);\n    this._lastBlending[2] = this.gl.getParameter(this.gl.BLEND_SRC_ALPHA);\n    this._lastBlending[3] = this.gl.getParameter(this.gl.BLEND_DST_ALPHA);\n    this._lastFBO = this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\n    this._lastViewport = this.gl.getParameter(this.gl.VIEWPORT);\n  }\n  restore() {\n    if (this.gl == null) {\n      CubismLogError(\n        \"'gl' is null. WebGLRenderingContext is required.\\nPlease call 'CubimRenderer_WebGL.startUp' function.\"\n      );\n      return;\n    }\n    this.gl.useProgram(this._lastProgram);\n    this.setGlEnableVertexAttribArray(0, this._lastVertexAttribArrayEnabled[0]);\n    this.setGlEnableVertexAttribArray(1, this._lastVertexAttribArrayEnabled[1]);\n    this.setGlEnableVertexAttribArray(2, this._lastVertexAttribArrayEnabled[2]);\n    this.setGlEnableVertexAttribArray(3, this._lastVertexAttribArrayEnabled[3]);\n    this.setGlEnable(this.gl.SCISSOR_TEST, this._lastScissorTest);\n    this.setGlEnable(this.gl.STENCIL_TEST, this._lastStencilTest);\n    this.setGlEnable(this.gl.DEPTH_TEST, this._lastDepthTest);\n    this.setGlEnable(this.gl.CULL_FACE, this._lastCullFace);\n    this.setGlEnable(this.gl.BLEND, this._lastBlend);\n    this.gl.frontFace(this._lastFrontFace);\n    this.gl.colorMask(\n      this._lastColorMask[0],\n      this._lastColorMask[1],\n      this._lastColorMask[2],\n      this._lastColorMask[3]\n    );\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this._lastArrayBufferBinding);\n    this.gl.bindBuffer(\n      this.gl.ELEMENT_ARRAY_BUFFER,\n      this._lastElementArrayBufferBinding\n    );\n    this.gl.activeTexture(this.gl.TEXTURE1);\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this._lastTexture1Binding2D);\n    this.gl.activeTexture(this.gl.TEXTURE0);\n    this.gl.bindTexture(this.gl.TEXTURE_2D, this._lastTexture0Binding2D);\n    this.gl.activeTexture(this._lastActiveTexture);\n    this.gl.blendFuncSeparate(\n      this._lastBlending[0],\n      this._lastBlending[1],\n      this._lastBlending[2],\n      this._lastBlending[3]\n    );\n  }\n  setGl(gl) {\n    this.gl = gl;\n  }\n  constructor() {\n    this._lastVertexAttribArrayEnabled = new Array(4);\n    this._lastColorMask = new Array(4);\n    this._lastBlending = new Array(4);\n    this._lastViewport = new Array(4);\n  }\n}\nclass CubismShader_WebGL {\n  /**\n   * インスタンスを取得する（シングルトン）\n   * @return インスタンス\n   */\n  static getInstance() {\n    if (s_instance == null) {\n      s_instance = new CubismShader_WebGL();\n      return s_instance;\n    }\n    return s_instance;\n  }\n  /**\n   * インスタンスを開放する（シングルトン）\n   */\n  static deleteInstance() {\n    if (s_instance) {\n      s_instance.release();\n      s_instance = void 0;\n    }\n  }\n  /**\n   * privateなコンストラクタ\n   */\n  constructor() {\n    this._shaderSets = [];\n  }\n  /**\n   * デストラクタ相当の処理\n   */\n  release() {\n    this.releaseShaderProgram();\n  }\n  /**\n   * シェーダープログラムの一連のセットアップを実行する\n   * @param renderer レンダラのインスタンス\n   * @param textureId GPUのテクスチャID\n   * @param vertexCount ポリゴンメッシュの頂点数\n   * @param vertexArray ポリゴンメッシュの頂点配列\n   * @param indexArray インデックスバッファの頂点配列\n   * @param uvArray uv配列\n   * @param opacity 不透明度\n   * @param colorBlendMode カラーブレンディングのタイプ\n   * @param baseColor ベースカラー\n   * @param isPremultipliedAlpha 乗算済みアルファかどうか\n   * @param matrix4x4 Model-View-Projection行列\n   * @param invertedMask マスクを反転して使用するフラグ\n   */\n  setupShaderProgram(renderer, textureId, vertexCount, vertexArray, indexArray, uvArray, bufferData, opacity, colorBlendMode, baseColor, multiplyColor, screenColor, isPremultipliedAlpha, matrix4x4, invertedMask) {\n    if (!isPremultipliedAlpha) {\n      CubismLogError(\"NoPremultipliedAlpha is not allowed\");\n    }\n    if (this._shaderSets.length == 0) {\n      this.generateShaders();\n    }\n    let SRC_COLOR;\n    let DST_COLOR;\n    let SRC_ALPHA;\n    let DST_ALPHA;\n    const clippingContextBufferForMask = renderer.getClippingContextBufferForMask();\n    if (clippingContextBufferForMask != null) {\n      const shaderSet = this._shaderSets[\n        0\n        /* ShaderNames_SetupMask */\n      ];\n      this.gl.useProgram(shaderSet.shaderProgram);\n      this.gl.activeTexture(this.gl.TEXTURE0);\n      this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);\n      this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);\n      if (bufferData.vertex == null) {\n        bufferData.vertex = this.gl.createBuffer();\n      }\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.vertex);\n      this.gl.bufferData(\n        this.gl.ARRAY_BUFFER,\n        vertexArray,\n        this.gl.DYNAMIC_DRAW\n      );\n      this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);\n      this.gl.vertexAttribPointer(\n        shaderSet.attributePositionLocation,\n        2,\n        this.gl.FLOAT,\n        false,\n        0,\n        0\n      );\n      if (bufferData.uv == null) {\n        bufferData.uv = this.gl.createBuffer();\n      }\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.uv);\n      this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);\n      this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);\n      this.gl.vertexAttribPointer(\n        shaderSet.attributeTexCoordLocation,\n        2,\n        this.gl.FLOAT,\n        false,\n        0,\n        0\n      );\n      const channelNo = clippingContextBufferForMask._layoutChannelNo;\n      const colorChannel = clippingContextBufferForMask.getClippingManager().getChannelFlagAsColor(channelNo);\n      this.gl.uniform4f(\n        shaderSet.uniformChannelFlagLocation,\n        colorChannel.R,\n        colorChannel.G,\n        colorChannel.B,\n        colorChannel.A\n      );\n      this.gl.uniformMatrix4fv(\n        shaderSet.uniformClipMatrixLocation,\n        false,\n        clippingContextBufferForMask._matrixForMask.getArray()\n      );\n      const rect = clippingContextBufferForMask._layoutBounds;\n      this.gl.uniform4f(\n        shaderSet.uniformBaseColorLocation,\n        rect.x * 2 - 1,\n        rect.y * 2 - 1,\n        rect.getRight() * 2 - 1,\n        rect.getBottom() * 2 - 1\n      );\n      this.gl.uniform4f(\n        shaderSet.uniformMultiplyColorLocation,\n        multiplyColor.R,\n        multiplyColor.G,\n        multiplyColor.B,\n        multiplyColor.A\n      );\n      this.gl.uniform4f(\n        shaderSet.uniformScreenColorLocation,\n        screenColor.R,\n        screenColor.G,\n        screenColor.B,\n        screenColor.A\n      );\n      SRC_COLOR = this.gl.ZERO;\n      DST_COLOR = this.gl.ONE_MINUS_SRC_COLOR;\n      SRC_ALPHA = this.gl.ZERO;\n      DST_ALPHA = this.gl.ONE_MINUS_SRC_ALPHA;\n    } else {\n      const clippingContextBufferForDraw = renderer.getClippingContextBufferForDraw();\n      const masked = clippingContextBufferForDraw != null;\n      const offset = masked ? invertedMask ? 2 : 1 : 0;\n      let shaderSet;\n      switch (colorBlendMode) {\n        case CubismBlendMode.CubismBlendMode_Normal:\n        default:\n          shaderSet = this._shaderSets[1 + offset];\n          SRC_COLOR = this.gl.ONE;\n          DST_COLOR = this.gl.ONE_MINUS_SRC_ALPHA;\n          SRC_ALPHA = this.gl.ONE;\n          DST_ALPHA = this.gl.ONE_MINUS_SRC_ALPHA;\n          break;\n        case CubismBlendMode.CubismBlendMode_Additive:\n          shaderSet = this._shaderSets[4 + offset];\n          SRC_COLOR = this.gl.ONE;\n          DST_COLOR = this.gl.ONE;\n          SRC_ALPHA = this.gl.ZERO;\n          DST_ALPHA = this.gl.ONE;\n          break;\n        case CubismBlendMode.CubismBlendMode_Multiplicative:\n          shaderSet = this._shaderSets[7 + offset];\n          SRC_COLOR = this.gl.DST_COLOR;\n          DST_COLOR = this.gl.ONE_MINUS_SRC_ALPHA;\n          SRC_ALPHA = this.gl.ZERO;\n          DST_ALPHA = this.gl.ONE;\n          break;\n      }\n      this.gl.useProgram(shaderSet.shaderProgram);\n      if (bufferData.vertex == null) {\n        bufferData.vertex = this.gl.createBuffer();\n      }\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.vertex);\n      this.gl.bufferData(\n        this.gl.ARRAY_BUFFER,\n        vertexArray,\n        this.gl.DYNAMIC_DRAW\n      );\n      this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);\n      this.gl.vertexAttribPointer(\n        shaderSet.attributePositionLocation,\n        2,\n        this.gl.FLOAT,\n        false,\n        0,\n        0\n      );\n      if (bufferData.uv == null) {\n        bufferData.uv = this.gl.createBuffer();\n      }\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.uv);\n      this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);\n      this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);\n      this.gl.vertexAttribPointer(\n        shaderSet.attributeTexCoordLocation,\n        2,\n        this.gl.FLOAT,\n        false,\n        0,\n        0\n      );\n      if (clippingContextBufferForDraw != null) {\n        this.gl.activeTexture(this.gl.TEXTURE1);\n        const tex = clippingContextBufferForDraw.getClippingManager().getColorBuffer()[renderer.getClippingContextBufferForDraw()._bufferIndex];\n        this.gl.bindTexture(this.gl.TEXTURE_2D, tex);\n        this.gl.uniform1i(shaderSet.samplerTexture1Location, 1);\n        this.gl.uniformMatrix4fv(\n          shaderSet.uniformClipMatrixLocation,\n          false,\n          clippingContextBufferForDraw._matrixForDraw.getArray()\n        );\n        const channelNo = clippingContextBufferForDraw._layoutChannelNo;\n        const colorChannel = clippingContextBufferForDraw.getClippingManager().getChannelFlagAsColor(channelNo);\n        this.gl.uniform4f(\n          shaderSet.uniformChannelFlagLocation,\n          colorChannel.R,\n          colorChannel.G,\n          colorChannel.B,\n          colorChannel.A\n        );\n      }\n      this.gl.activeTexture(this.gl.TEXTURE0);\n      this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);\n      this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);\n      this.gl.uniformMatrix4fv(\n        shaderSet.uniformMatrixLocation,\n        false,\n        matrix4x4.getArray()\n      );\n      this.gl.uniform4f(\n        shaderSet.uniformBaseColorLocation,\n        baseColor.R,\n        baseColor.G,\n        baseColor.B,\n        baseColor.A\n      );\n      this.gl.uniform4f(\n        shaderSet.uniformMultiplyColorLocation,\n        multiplyColor.R,\n        multiplyColor.G,\n        multiplyColor.B,\n        multiplyColor.A\n      );\n      this.gl.uniform4f(\n        shaderSet.uniformScreenColorLocation,\n        screenColor.R,\n        screenColor.G,\n        screenColor.B,\n        screenColor.A\n      );\n    }\n    if (bufferData.index == null) {\n      bufferData.index = this.gl.createBuffer();\n    }\n    this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, bufferData.index);\n    this.gl.bufferData(\n      this.gl.ELEMENT_ARRAY_BUFFER,\n      indexArray,\n      this.gl.DYNAMIC_DRAW\n    );\n    this.gl.blendFuncSeparate(SRC_COLOR, DST_COLOR, SRC_ALPHA, DST_ALPHA);\n  }\n  /**\n   * シェーダープログラムを解放する\n   */\n  releaseShaderProgram() {\n    for (let i = 0; i < this._shaderSets.length; i++) {\n      this.gl.deleteProgram(this._shaderSets[i].shaderProgram);\n      this._shaderSets[i].shaderProgram = 0;\n    }\n    this._shaderSets = [];\n  }\n  /**\n   * シェーダープログラムを初期化する\n   * @param vertShaderSrc 頂点シェーダのソース\n   * @param fragShaderSrc フラグメントシェーダのソース\n   */\n  generateShaders() {\n    for (let i = 0; i < ShaderCount; i++) {\n      this._shaderSets.push({});\n    }\n    this._shaderSets[0].shaderProgram = this.loadShaderProgram(\n      vertexShaderSrcSetupMask,\n      fragmentShaderSrcsetupMask\n    );\n    this._shaderSets[1].shaderProgram = this.loadShaderProgram(\n      vertexShaderSrc,\n      fragmentShaderSrcPremultipliedAlpha\n    );\n    this._shaderSets[2].shaderProgram = this.loadShaderProgram(\n      vertexShaderSrcMasked,\n      fragmentShaderSrcMaskPremultipliedAlpha\n    );\n    this._shaderSets[3].shaderProgram = this.loadShaderProgram(\n      vertexShaderSrcMasked,\n      fragmentShaderSrcMaskInvertedPremultipliedAlpha\n    );\n    this._shaderSets[4].shaderProgram = this._shaderSets[1].shaderProgram;\n    this._shaderSets[5].shaderProgram = this._shaderSets[2].shaderProgram;\n    this._shaderSets[6].shaderProgram = this._shaderSets[3].shaderProgram;\n    this._shaderSets[7].shaderProgram = this._shaderSets[1].shaderProgram;\n    this._shaderSets[8].shaderProgram = this._shaderSets[2].shaderProgram;\n    this._shaderSets[9].shaderProgram = this._shaderSets[3].shaderProgram;\n    this._shaderSets[0].attributePositionLocation = this.gl.getAttribLocation(\n      this._shaderSets[0].shaderProgram,\n      \"a_position\"\n    );\n    this._shaderSets[0].attributeTexCoordLocation = this.gl.getAttribLocation(\n      this._shaderSets[0].shaderProgram,\n      \"a_texCoord\"\n    );\n    this._shaderSets[0].samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets[0].shaderProgram,\n      \"s_texture0\"\n    );\n    this._shaderSets[0].uniformClipMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets[0].shaderProgram,\n      \"u_clipMatrix\"\n    );\n    this._shaderSets[0].uniformChannelFlagLocation = this.gl.getUniformLocation(\n      this._shaderSets[0].shaderProgram,\n      \"u_channelFlag\"\n    );\n    this._shaderSets[0].uniformBaseColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[0].shaderProgram,\n      \"u_baseColor\"\n    );\n    this._shaderSets[0].uniformMultiplyColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[0].shaderProgram,\n      \"u_multiplyColor\"\n    );\n    this._shaderSets[0].uniformScreenColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[0].shaderProgram,\n      \"u_screenColor\"\n    );\n    this._shaderSets[1].attributePositionLocation = this.gl.getAttribLocation(\n      this._shaderSets[1].shaderProgram,\n      \"a_position\"\n    );\n    this._shaderSets[1].attributeTexCoordLocation = this.gl.getAttribLocation(\n      this._shaderSets[1].shaderProgram,\n      \"a_texCoord\"\n    );\n    this._shaderSets[1].samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets[1].shaderProgram,\n      \"s_texture0\"\n    );\n    this._shaderSets[1].uniformMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets[1].shaderProgram,\n      \"u_matrix\"\n    );\n    this._shaderSets[1].uniformBaseColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[1].shaderProgram,\n      \"u_baseColor\"\n    );\n    this._shaderSets[1].uniformMultiplyColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[1].shaderProgram,\n      \"u_multiplyColor\"\n    );\n    this._shaderSets[1].uniformScreenColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[1].shaderProgram,\n      \"u_screenColor\"\n    );\n    this._shaderSets[2].attributePositionLocation = this.gl.getAttribLocation(\n      this._shaderSets[2].shaderProgram,\n      \"a_position\"\n    );\n    this._shaderSets[2].attributeTexCoordLocation = this.gl.getAttribLocation(\n      this._shaderSets[2].shaderProgram,\n      \"a_texCoord\"\n    );\n    this._shaderSets[2].samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets[2].shaderProgram,\n      \"s_texture0\"\n    );\n    this._shaderSets[2].samplerTexture1Location = this.gl.getUniformLocation(\n      this._shaderSets[2].shaderProgram,\n      \"s_texture1\"\n    );\n    this._shaderSets[2].uniformMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets[2].shaderProgram,\n      \"u_matrix\"\n    );\n    this._shaderSets[2].uniformClipMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets[2].shaderProgram,\n      \"u_clipMatrix\"\n    );\n    this._shaderSets[2].uniformChannelFlagLocation = this.gl.getUniformLocation(\n      this._shaderSets[2].shaderProgram,\n      \"u_channelFlag\"\n    );\n    this._shaderSets[2].uniformBaseColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[2].shaderProgram,\n      \"u_baseColor\"\n    );\n    this._shaderSets[2].uniformMultiplyColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[2].shaderProgram,\n      \"u_multiplyColor\"\n    );\n    this._shaderSets[2].uniformScreenColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[2].shaderProgram,\n      \"u_screenColor\"\n    );\n    this._shaderSets[3].attributePositionLocation = this.gl.getAttribLocation(\n      this._shaderSets[3].shaderProgram,\n      \"a_position\"\n    );\n    this._shaderSets[3].attributeTexCoordLocation = this.gl.getAttribLocation(\n      this._shaderSets[3].shaderProgram,\n      \"a_texCoord\"\n    );\n    this._shaderSets[3].samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets[3].shaderProgram,\n      \"s_texture0\"\n    );\n    this._shaderSets[3].samplerTexture1Location = this.gl.getUniformLocation(\n      this._shaderSets[3].shaderProgram,\n      \"s_texture1\"\n    );\n    this._shaderSets[3].uniformMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets[3].shaderProgram,\n      \"u_matrix\"\n    );\n    this._shaderSets[3].uniformClipMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets[3].shaderProgram,\n      \"u_clipMatrix\"\n    );\n    this._shaderSets[3].uniformChannelFlagLocation = this.gl.getUniformLocation(\n      this._shaderSets[3].shaderProgram,\n      \"u_channelFlag\"\n    );\n    this._shaderSets[3].uniformBaseColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[3].shaderProgram,\n      \"u_baseColor\"\n    );\n    this._shaderSets[3].uniformMultiplyColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[3].shaderProgram,\n      \"u_multiplyColor\"\n    );\n    this._shaderSets[3].uniformScreenColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[3].shaderProgram,\n      \"u_screenColor\"\n    );\n    this._shaderSets[4].attributePositionLocation = this.gl.getAttribLocation(\n      this._shaderSets[4].shaderProgram,\n      \"a_position\"\n    );\n    this._shaderSets[4].attributeTexCoordLocation = this.gl.getAttribLocation(\n      this._shaderSets[4].shaderProgram,\n      \"a_texCoord\"\n    );\n    this._shaderSets[4].samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets[4].shaderProgram,\n      \"s_texture0\"\n    );\n    this._shaderSets[4].uniformMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets[4].shaderProgram,\n      \"u_matrix\"\n    );\n    this._shaderSets[4].uniformBaseColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[4].shaderProgram,\n      \"u_baseColor\"\n    );\n    this._shaderSets[4].uniformMultiplyColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[4].shaderProgram,\n      \"u_multiplyColor\"\n    );\n    this._shaderSets[4].uniformScreenColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[4].shaderProgram,\n      \"u_screenColor\"\n    );\n    this._shaderSets[5].attributePositionLocation = this.gl.getAttribLocation(\n      this._shaderSets[5].shaderProgram,\n      \"a_position\"\n    );\n    this._shaderSets[5].attributeTexCoordLocation = this.gl.getAttribLocation(\n      this._shaderSets[5].shaderProgram,\n      \"a_texCoord\"\n    );\n    this._shaderSets[5].samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets[5].shaderProgram,\n      \"s_texture0\"\n    );\n    this._shaderSets[5].samplerTexture1Location = this.gl.getUniformLocation(\n      this._shaderSets[5].shaderProgram,\n      \"s_texture1\"\n    );\n    this._shaderSets[5].uniformMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets[5].shaderProgram,\n      \"u_matrix\"\n    );\n    this._shaderSets[5].uniformClipMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets[5].shaderProgram,\n      \"u_clipMatrix\"\n    );\n    this._shaderSets[5].uniformChannelFlagLocation = this.gl.getUniformLocation(\n      this._shaderSets[5].shaderProgram,\n      \"u_channelFlag\"\n    );\n    this._shaderSets[5].uniformBaseColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[5].shaderProgram,\n      \"u_baseColor\"\n    );\n    this._shaderSets[5].uniformMultiplyColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[5].shaderProgram,\n      \"u_multiplyColor\"\n    );\n    this._shaderSets[5].uniformScreenColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[5].shaderProgram,\n      \"u_screenColor\"\n    );\n    this._shaderSets[6].attributePositionLocation = this.gl.getAttribLocation(\n      this._shaderSets[6].shaderProgram,\n      \"a_position\"\n    );\n    this._shaderSets[6].attributeTexCoordLocation = this.gl.getAttribLocation(\n      this._shaderSets[6].shaderProgram,\n      \"a_texCoord\"\n    );\n    this._shaderSets[6].samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets[6].shaderProgram,\n      \"s_texture0\"\n    );\n    this._shaderSets[6].samplerTexture1Location = this.gl.getUniformLocation(\n      this._shaderSets[6].shaderProgram,\n      \"s_texture1\"\n    );\n    this._shaderSets[6].uniformMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets[6].shaderProgram,\n      \"u_matrix\"\n    );\n    this._shaderSets[6].uniformClipMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets[6].shaderProgram,\n      \"u_clipMatrix\"\n    );\n    this._shaderSets[6].uniformChannelFlagLocation = this.gl.getUniformLocation(\n      this._shaderSets[6].shaderProgram,\n      \"u_channelFlag\"\n    );\n    this._shaderSets[6].uniformBaseColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[6].shaderProgram,\n      \"u_baseColor\"\n    );\n    this._shaderSets[6].uniformMultiplyColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[6].shaderProgram,\n      \"u_multiplyColor\"\n    );\n    this._shaderSets[6].uniformScreenColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[6].shaderProgram,\n      \"u_screenColor\"\n    );\n    this._shaderSets[7].attributePositionLocation = this.gl.getAttribLocation(\n      this._shaderSets[7].shaderProgram,\n      \"a_position\"\n    );\n    this._shaderSets[7].attributeTexCoordLocation = this.gl.getAttribLocation(\n      this._shaderSets[7].shaderProgram,\n      \"a_texCoord\"\n    );\n    this._shaderSets[7].samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets[7].shaderProgram,\n      \"s_texture0\"\n    );\n    this._shaderSets[7].uniformMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets[7].shaderProgram,\n      \"u_matrix\"\n    );\n    this._shaderSets[7].uniformBaseColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[7].shaderProgram,\n      \"u_baseColor\"\n    );\n    this._shaderSets[7].uniformMultiplyColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[7].shaderProgram,\n      \"u_multiplyColor\"\n    );\n    this._shaderSets[7].uniformScreenColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[7].shaderProgram,\n      \"u_screenColor\"\n    );\n    this._shaderSets[8].attributePositionLocation = this.gl.getAttribLocation(\n      this._shaderSets[8].shaderProgram,\n      \"a_position\"\n    );\n    this._shaderSets[8].attributeTexCoordLocation = this.gl.getAttribLocation(\n      this._shaderSets[8].shaderProgram,\n      \"a_texCoord\"\n    );\n    this._shaderSets[8].samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets[8].shaderProgram,\n      \"s_texture0\"\n    );\n    this._shaderSets[8].samplerTexture1Location = this.gl.getUniformLocation(\n      this._shaderSets[8].shaderProgram,\n      \"s_texture1\"\n    );\n    this._shaderSets[8].uniformMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets[8].shaderProgram,\n      \"u_matrix\"\n    );\n    this._shaderSets[8].uniformClipMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets[8].shaderProgram,\n      \"u_clipMatrix\"\n    );\n    this._shaderSets[8].uniformChannelFlagLocation = this.gl.getUniformLocation(\n      this._shaderSets[8].shaderProgram,\n      \"u_channelFlag\"\n    );\n    this._shaderSets[8].uniformBaseColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[8].shaderProgram,\n      \"u_baseColor\"\n    );\n    this._shaderSets[8].uniformMultiplyColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[8].shaderProgram,\n      \"u_multiplyColor\"\n    );\n    this._shaderSets[8].uniformScreenColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[8].shaderProgram,\n      \"u_screenColor\"\n    );\n    this._shaderSets[9].attributePositionLocation = this.gl.getAttribLocation(\n      this._shaderSets[9].shaderProgram,\n      \"a_position\"\n    );\n    this._shaderSets[9].attributeTexCoordLocation = this.gl.getAttribLocation(\n      this._shaderSets[9].shaderProgram,\n      \"a_texCoord\"\n    );\n    this._shaderSets[9].samplerTexture0Location = this.gl.getUniformLocation(\n      this._shaderSets[9].shaderProgram,\n      \"s_texture0\"\n    );\n    this._shaderSets[9].samplerTexture1Location = this.gl.getUniformLocation(\n      this._shaderSets[9].shaderProgram,\n      \"s_texture1\"\n    );\n    this._shaderSets[9].uniformMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets[9].shaderProgram,\n      \"u_matrix\"\n    );\n    this._shaderSets[9].uniformClipMatrixLocation = this.gl.getUniformLocation(\n      this._shaderSets[9].shaderProgram,\n      \"u_clipMatrix\"\n    );\n    this._shaderSets[9].uniformChannelFlagLocation = this.gl.getUniformLocation(\n      this._shaderSets[9].shaderProgram,\n      \"u_channelFlag\"\n    );\n    this._shaderSets[9].uniformBaseColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[9].shaderProgram,\n      \"u_baseColor\"\n    );\n    this._shaderSets[9].uniformMultiplyColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[9].shaderProgram,\n      \"u_multiplyColor\"\n    );\n    this._shaderSets[9].uniformScreenColorLocation = this.gl.getUniformLocation(\n      this._shaderSets[9].shaderProgram,\n      \"u_screenColor\"\n    );\n  }\n  /**\n   * シェーダプログラムをロードしてアドレスを返す\n   * @param vertexShaderSource    頂点シェーダのソース\n   * @param fragmentShaderSource  フラグメントシェーダのソース\n   * @return シェーダプログラムのアドレス\n   */\n  loadShaderProgram(vertexShaderSource, fragmentShaderSource) {\n    const shaderProgram = this.gl.createProgram();\n    const vertShader = this.compileShaderSource(\n      this.gl.VERTEX_SHADER,\n      vertexShaderSource\n    );\n    if (!vertShader) {\n      CubismLogError(\"Vertex shader compile error!\");\n      return 0;\n    }\n    const fragShader = this.compileShaderSource(\n      this.gl.FRAGMENT_SHADER,\n      fragmentShaderSource\n    );\n    if (!fragShader) {\n      CubismLogError(\"Vertex shader compile error!\");\n      return 0;\n    }\n    this.gl.attachShader(shaderProgram, vertShader);\n    this.gl.attachShader(shaderProgram, fragShader);\n    this.gl.linkProgram(shaderProgram);\n    const linkStatus = this.gl.getProgramParameter(\n      shaderProgram,\n      this.gl.LINK_STATUS\n    );\n    if (!linkStatus) {\n      CubismLogError(\"Failed to link program: {0}\", shaderProgram);\n      this.gl.deleteShader(vertShader);\n      this.gl.deleteShader(fragShader);\n      if (shaderProgram) {\n        this.gl.deleteProgram(shaderProgram);\n      }\n      return 0;\n    }\n    this.gl.deleteShader(vertShader);\n    this.gl.deleteShader(fragShader);\n    return shaderProgram;\n  }\n  /**\n   * シェーダープログラムをコンパイルする\n   * @param shaderType シェーダタイプ(Vertex/Fragment)\n   * @param shaderSource シェーダソースコード\n   *\n   * @return コンパイルされたシェーダープログラム\n   */\n  compileShaderSource(shaderType, shaderSource) {\n    const source = shaderSource;\n    const shader = this.gl.createShader(shaderType);\n    this.gl.shaderSource(shader, source);\n    this.gl.compileShader(shader);\n    if (!shader) {\n      const log = this.gl.getShaderInfoLog(shader);\n      CubismLogError(\"Shader compile log: {0} \", log);\n    }\n    const status = this.gl.getShaderParameter(\n      shader,\n      this.gl.COMPILE_STATUS\n    );\n    if (!status) {\n      this.gl.deleteShader(shader);\n      return null;\n    }\n    return shader;\n  }\n  setGl(gl) {\n    this.gl = gl;\n  }\n  // webglコンテキスト\n}\nconst vertexShaderSrcSetupMask = \"attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_myPos;uniform mat4       u_clipMatrix;void main(){   gl_Position = u_clipMatrix * a_position;   v_myPos = u_clipMatrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}\";\nconst fragmentShaderSrcsetupMask = \"precision mediump float;varying vec2       v_texCoord;varying vec4       v_myPos;uniform vec4       u_baseColor;uniform vec4       u_channelFlag;uniform sampler2D  s_texture0;void main(){   float isInside =        step(u_baseColor.x, v_myPos.x/v_myPos.w)       * step(u_baseColor.y, v_myPos.y/v_myPos.w)       * step(v_myPos.x/v_myPos.w, u_baseColor.z)       * step(v_myPos.y/v_myPos.w, u_baseColor.w);   gl_FragColor = u_channelFlag * texture2D(s_texture0, v_texCoord).a * isInside;}\";\nconst vertexShaderSrc = \"attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;uniform mat4       u_matrix;void main(){   gl_Position = u_matrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}\";\nconst vertexShaderSrcMasked = \"attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_clipPos;uniform mat4       u_matrix;uniform mat4       u_clipMatrix;void main(){   gl_Position = u_matrix * a_position;   v_clipPos = u_clipMatrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}\";\nconst fragmentShaderSrcPremultipliedAlpha = \"precision mediump float;varying vec2       v_texCoord;uniform vec4       u_baseColor;uniform sampler2D  s_texture0;uniform vec4       u_multiplyColor;uniform vec4       u_screenColor;void main(){   vec4 texColor = texture2D(s_texture0, v_texCoord);   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);   vec4 color = texColor * u_baseColor;   gl_FragColor = vec4(color.rgb, color.a);}\";\nconst fragmentShaderSrcMaskPremultipliedAlpha = \"precision mediump float;varying vec2       v_texCoord;varying vec4       v_clipPos;uniform vec4       u_baseColor;uniform vec4       u_channelFlag;uniform sampler2D  s_texture0;uniform sampler2D  s_texture1;uniform vec4       u_multiplyColor;uniform vec4       u_screenColor;void main(){   vec4 texColor = texture2D(s_texture0, v_texCoord);   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);   vec4 col_formask = texColor * u_baseColor;   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;   col_formask = col_formask * maskVal;   gl_FragColor = col_formask;}\";\nconst fragmentShaderSrcMaskInvertedPremultipliedAlpha = \"precision mediump float;varying vec2      v_texCoord;varying vec4      v_clipPos;uniform sampler2D s_texture0;uniform sampler2D s_texture1;uniform vec4      u_channelFlag;uniform vec4      u_baseColor;uniform vec4      u_multiplyColor;uniform vec4      u_screenColor;void main(){   vec4 texColor = texture2D(s_texture0, v_texCoord);   texColor.rgb = texColor.rgb * u_multiplyColor.rgb;   texColor.rgb = (texColor.rgb + u_screenColor.rgb * texColor.a) - (texColor.rgb * u_screenColor.rgb);   vec4 col_formask = texColor * u_baseColor;   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;   col_formask = col_formask * (1.0 - maskVal);   gl_FragColor = col_formask;}\";\nclass CubismRenderer_WebGL extends CubismRenderer {\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    super();\n    this._clippingContextBufferForMask = null;\n    this._clippingContextBufferForDraw = null;\n    this._rendererProfile = new CubismRendererProfile_WebGL();\n    this.firstDraw = true;\n    this._textures = {};\n    this._sortedDrawableIndexList = [];\n    this._bufferData = {\n      vertex: null,\n      uv: null,\n      index: null\n    };\n  }\n  /**\n   * レンダラの初期化処理を実行する\n   * 引数に渡したモデルからレンダラの初期化処理に必要な情報を取り出すことができる\n   *\n   * @param model モデルのインスタンス\n   * @param maskBufferCount バッファの生成数\n   */\n  initialize(model, maskBufferCount = 1) {\n    if (model.isUsingMasking()) {\n      this._clippingManager = new CubismClippingManager_WebGL();\n      this._clippingManager.initialize(\n        model,\n        model.getDrawableCount(),\n        model.getDrawableMasks(),\n        model.getDrawableMaskCounts(),\n        maskBufferCount\n      );\n    }\n    for (let i = model.getDrawableCount() - 1; i >= 0; i--) {\n      this._sortedDrawableIndexList[i] = 0;\n    }\n    super.initialize(model);\n  }\n  /**\n   * WebGLテクスチャのバインド処理\n   * CubismRendererにテクスチャを設定し、CubismRenderer内でその画像を参照するためのIndex値を戻り値とする\n   * @param modelTextureNo セットするモデルテクスチャの番号\n   * @param glTextureNo WebGLテクスチャの番号\n   */\n  bindTexture(modelTextureNo, glTexture) {\n    this._textures[modelTextureNo] = glTexture;\n  }\n  /**\n   * WebGLにバインドされたテクスチャのリストを取得する\n   * @return テクスチャのリスト\n   */\n  getBindedTextures() {\n    return this._textures;\n  }\n  /**\n   * クリッピングマスクバッファのサイズを設定する\n   * マスク用のFrameBufferを破棄、再作成する為処理コストは高い\n   * @param size クリッピングマスクバッファのサイズ\n   */\n  setClippingMaskBufferSize(size) {\n    if (!this._model.isUsingMasking()) {\n      return;\n    }\n    const renderTextureCount = this._clippingManager.getRenderTextureCount();\n    this._clippingManager.release();\n    this._clippingManager = new CubismClippingManager_WebGL();\n    this._clippingManager.setClippingMaskBufferSize(size);\n    this._clippingManager.initialize(\n      this.getModel(),\n      this.getModel().getDrawableCount(),\n      this.getModel().getDrawableMasks(),\n      this.getModel().getDrawableMaskCounts(),\n      renderTextureCount\n      // インスタンス破棄前に保存したレンダーテクスチャの数\n    );\n  }\n  /**\n   * クリッピングマスクバッファのサイズを取得する\n   * @return クリッピングマスクバッファのサイズ\n   */\n  getClippingMaskBufferSize() {\n    return this._model.isUsingMasking() ? this._clippingManager.getClippingMaskBufferSize() : -1;\n  }\n  /**\n   * レンダーテクスチャの枚数を取得する\n   * @return レンダーテクスチャの枚数\n   */\n  getRenderTextureCount() {\n    return this._model.isUsingMasking() ? this._clippingManager.getRenderTextureCount() : -1;\n  }\n  /**\n   * デストラクタ相当の処理\n   */\n  release() {\n    var _a, _b, _c;\n    const self = this;\n    this._clippingManager.release();\n    self._clippingManager = void 0;\n    (_a = this.gl) == null ? void 0 : _a.deleteBuffer(this._bufferData.vertex);\n    this._bufferData.vertex = null;\n    (_b = this.gl) == null ? void 0 : _b.deleteBuffer(this._bufferData.uv);\n    this._bufferData.uv = null;\n    (_c = this.gl) == null ? void 0 : _c.deleteBuffer(this._bufferData.index);\n    this._bufferData.index = null;\n    self._bufferData = void 0;\n    self._textures = void 0;\n  }\n  /**\n   * モデルを描画する実際の処理\n   */\n  doDrawModel() {\n    if (this.gl == null) {\n      CubismLogError(\n        \"'gl' is null. WebGLRenderingContext is required.\\nPlease call 'CubimRenderer_WebGL.startUp' function.\"\n      );\n      return;\n    }\n    if (this._clippingManager != null) {\n      this.preDraw();\n      this._clippingManager.setupClippingContext(this.getModel(), this);\n    }\n    this.preDraw();\n    const drawableCount = this.getModel().getDrawableCount();\n    const renderOrder = this.getModel().getDrawableRenderOrders();\n    for (let i = 0; i < drawableCount; ++i) {\n      const order = renderOrder[i];\n      this._sortedDrawableIndexList[order] = i;\n    }\n    for (let i = 0; i < drawableCount; ++i) {\n      const drawableIndex = this._sortedDrawableIndexList[i];\n      if (!this.getModel().getDrawableDynamicFlagIsVisible(drawableIndex)) {\n        continue;\n      }\n      const clipContext = this._clippingManager != null ? this._clippingManager.getClippingContextListForDraw()[drawableIndex] : null;\n      if (clipContext != null && this.isUsingHighPrecisionMask()) {\n        if (clipContext._isUsing) {\n          this.gl.viewport(\n            0,\n            0,\n            this._clippingManager.getClippingMaskBufferSize(),\n            this._clippingManager.getClippingMaskBufferSize()\n          );\n          this.preDraw();\n          this.gl.bindFramebuffer(\n            this.gl.FRAMEBUFFER,\n            clipContext.getClippingManager().getMaskRenderTexture()[clipContext._bufferIndex]\n          );\n          this.gl.clearColor(1, 1, 1, 1);\n          this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n        }\n        {\n          const clipDrawCount = clipContext._clippingIdCount;\n          for (let index = 0; index < clipDrawCount; index++) {\n            const clipDrawIndex = clipContext._clippingIdList[index];\n            if (!this._model.getDrawableDynamicFlagVertexPositionsDidChange(\n              clipDrawIndex\n            )) {\n              continue;\n            }\n            this.setIsCulling(\n              this._model.getDrawableCulling(clipDrawIndex) != false\n            );\n            this.setClippingContextBufferForMask(clipContext);\n            this.drawMesh(\n              this.getModel().getDrawableTextureIndex(clipDrawIndex),\n              this.getModel().getDrawableVertexIndexCount(clipDrawIndex),\n              this.getModel().getDrawableVertexCount(clipDrawIndex),\n              this.getModel().getDrawableVertexIndices(clipDrawIndex),\n              this.getModel().getDrawableVertices(clipDrawIndex),\n              this.getModel().getDrawableVertexUvs(clipDrawIndex),\n              this.getModel().getMultiplyColor(clipDrawIndex),\n              this.getModel().getScreenColor(clipDrawIndex),\n              this.getModel().getDrawableOpacity(clipDrawIndex),\n              CubismBlendMode.CubismBlendMode_Normal,\n              // クリッピングは通常描画を強制\n              false\n              // マスク生成時はクリッピングの反転使用は全く関係がない\n            );\n          }\n        }\n        {\n          this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo);\n          this.setClippingContextBufferForMask(null);\n          this.gl.viewport(\n            s_viewport[0],\n            s_viewport[1],\n            s_viewport[2],\n            s_viewport[3]\n          );\n          this.preDraw();\n        }\n      }\n      this.setClippingContextBufferForDraw(clipContext);\n      this.setIsCulling(this.getModel().getDrawableCulling(drawableIndex));\n      this.drawMesh(\n        this.getModel().getDrawableTextureIndex(drawableIndex),\n        this.getModel().getDrawableVertexIndexCount(drawableIndex),\n        this.getModel().getDrawableVertexCount(drawableIndex),\n        this.getModel().getDrawableVertexIndices(drawableIndex),\n        this.getModel().getDrawableVertices(drawableIndex),\n        this.getModel().getDrawableVertexUvs(drawableIndex),\n        this.getModel().getMultiplyColor(drawableIndex),\n        this.getModel().getScreenColor(drawableIndex),\n        this.getModel().getDrawableOpacity(drawableIndex),\n        this.getModel().getDrawableBlendMode(drawableIndex),\n        this.getModel().getDrawableInvertedMaskBit(drawableIndex)\n      );\n    }\n  }\n  /**\n   * [オーバーライド]\n   * 描画オブジェクト（アートメッシュ）を描画する。\n   * ポリゴンメッシュとテクスチャ番号をセットで渡す。\n   * @param textureNo 描画するテクスチャ番号\n   * @param indexCount 描画オブジェクトのインデックス値\n   * @param vertexCount ポリゴンメッシュの頂点数\n   * @param indexArray ポリゴンメッシュのインデックス配列\n   * @param vertexArray ポリゴンメッシュの頂点配列\n   * @param uvArray uv配列\n   * @param opacity 不透明度\n   * @param colorBlendMode カラー合成タイプ\n   * @param invertedMask マスク使用時のマスクの反転使用\n   */\n  drawMesh(textureNo, indexCount, vertexCount, indexArray, vertexArray, uvArray, multiplyColor, screenColor, opacity, colorBlendMode, invertedMask) {\n    if (this.isCulling()) {\n      this.gl.enable(this.gl.CULL_FACE);\n    } else {\n      this.gl.disable(this.gl.CULL_FACE);\n    }\n    this.gl.frontFace(this.gl.CCW);\n    const modelColorRGBA = this.getModelColor();\n    if (this.getClippingContextBufferForMask() == null) {\n      modelColorRGBA.A *= opacity;\n      if (this.isPremultipliedAlpha()) {\n        modelColorRGBA.R *= modelColorRGBA.A;\n        modelColorRGBA.G *= modelColorRGBA.A;\n        modelColorRGBA.B *= modelColorRGBA.A;\n      }\n    }\n    let drawtexture = null;\n    if (this._textures[textureNo] != null) {\n      drawtexture = this._textures[textureNo];\n    }\n    CubismShader_WebGL.getInstance().setupShaderProgram(\n      this,\n      drawtexture,\n      vertexCount,\n      vertexArray,\n      indexArray,\n      uvArray,\n      this._bufferData,\n      opacity,\n      colorBlendMode,\n      modelColorRGBA,\n      multiplyColor,\n      screenColor,\n      this.isPremultipliedAlpha(),\n      this.getMvpMatrix(),\n      invertedMask\n    );\n    this.gl.drawElements(\n      this.gl.TRIANGLES,\n      indexCount,\n      this.gl.UNSIGNED_SHORT,\n      0\n    );\n    this.gl.useProgram(null);\n    this.setClippingContextBufferForDraw(null);\n    this.setClippingContextBufferForMask(null);\n  }\n  saveProfile() {\n    this._rendererProfile.save();\n  }\n  restoreProfile() {\n    this._rendererProfile.restore();\n  }\n  /**\n   * レンダラが保持する静的なリソースを解放する\n   * WebGLの静的なシェーダープログラムを解放する\n   */\n  static doStaticRelease() {\n    CubismShader_WebGL.deleteInstance();\n  }\n  /**\n   * レンダーステートを設定する\n   * @param fbo アプリケーション側で指定しているフレームバッファ\n   * @param viewport ビューポート\n   */\n  setRenderState(fbo, viewport) {\n    s_fbo = fbo;\n    s_viewport = viewport;\n  }\n  /**\n   * 描画開始時の追加処理\n   * モデルを描画する前にクリッピングマスクに必要な処理を実装している\n   */\n  preDraw() {\n    if (this.firstDraw) {\n      this.firstDraw = false;\n    }\n    this.gl.disable(this.gl.SCISSOR_TEST);\n    this.gl.disable(this.gl.STENCIL_TEST);\n    this.gl.disable(this.gl.DEPTH_TEST);\n    this.gl.frontFace(this.gl.CW);\n    this.gl.enable(this.gl.BLEND);\n    this.gl.colorMask(true, true, true, true);\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n    this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);\n    if (this.getAnisotropy() > 0 && this._extension) {\n      for (const tex of Object.entries(this._textures)) {\n        this.gl.bindTexture(this.gl.TEXTURE_2D, tex);\n        this.gl.texParameterf(\n          this.gl.TEXTURE_2D,\n          this._extension.TEXTURE_MAX_ANISOTROPY_EXT,\n          this.getAnisotropy()\n        );\n      }\n    }\n  }\n  /**\n   * マスクテクスチャに描画するクリッピングコンテキストをセットする\n   */\n  setClippingContextBufferForMask(clip) {\n    this._clippingContextBufferForMask = clip;\n  }\n  /**\n   * マスクテクスチャに描画するクリッピングコンテキストを取得する\n   * @return マスクテクスチャに描画するクリッピングコンテキスト\n   */\n  getClippingContextBufferForMask() {\n    return this._clippingContextBufferForMask;\n  }\n  /**\n   * 画面上に描画するクリッピングコンテキストをセットする\n   */\n  setClippingContextBufferForDraw(clip) {\n    this._clippingContextBufferForDraw = clip;\n  }\n  /**\n   * 画面上に描画するクリッピングコンテキストを取得する\n   * @return 画面上に描画するクリッピングコンテキスト\n   */\n  getClippingContextBufferForDraw() {\n    return this._clippingContextBufferForDraw;\n  }\n  /**\n   * glの設定\n   */\n  startUp(gl) {\n    this.gl = gl;\n    if (this._clippingManager) {\n      this._clippingManager.setGL(gl);\n    }\n    CubismShader_WebGL.getInstance().setGl(gl);\n    this._rendererProfile.setGl(gl);\n    this._extension = this.gl.getExtension(\"EXT_texture_filter_anisotropic\") || this.gl.getExtension(\"WEBKIT_EXT_texture_filter_anisotropic\") || this.gl.getExtension(\"MOZ_EXT_texture_filter_anisotropic\");\n  }\n  // webglコンテキスト\n}\nCubismRenderer.staticRelease = () => {\n  CubismRenderer_WebGL.doStaticRelease();\n};\nconst tempMatrix = new CubismMatrix44();\nclass Cubism4InternalModel extends InternalModel {\n  constructor(coreModel, settings, options) {\n    super();\n    __publicField(this, \"settings\");\n    __publicField(this, \"coreModel\");\n    __publicField(this, \"motionManager\");\n    __publicField(this, \"lipSync\", true);\n    __publicField(this, \"breath\", CubismBreath.create());\n    __publicField(this, \"eyeBlink\");\n    // what's this for?\n    __publicField(this, \"userData\");\n    __publicField(this, \"renderer\", new CubismRenderer_WebGL());\n    __publicField(this, \"idParamAngleX\", ParamAngleX);\n    __publicField(this, \"idParamAngleY\", ParamAngleY);\n    __publicField(this, \"idParamAngleZ\", ParamAngleZ);\n    __publicField(this, \"idParamEyeBallX\", ParamEyeBallX);\n    __publicField(this, \"idParamEyeBallY\", ParamEyeBallY);\n    __publicField(this, \"idParamBodyAngleX\", ParamBodyAngleX);\n    __publicField(this, \"idParamBreath\", ParamBreath);\n    /**\n     * The model's internal scale, defined in the moc3 file.\n     */\n    __publicField(this, \"pixelsPerUnit\", 1);\n    /**\n     * Matrix that scales by {@link pixelsPerUnit}, and moves the origin from top-left to center.\n     *\n     * FIXME: This shouldn't be named as \"centering\"...\n     */\n    __publicField(this, \"centeringTransform\", new Matrix());\n    this.coreModel = coreModel;\n    this.settings = settings;\n    this.motionManager = new Cubism4MotionManager(settings, options);\n    this.init();\n  }\n  init() {\n    var _a;\n    super.init();\n    if ((_a = this.settings.getEyeBlinkParameters()) == null ? void 0 : _a.length) {\n      this.eyeBlink = CubismEyeBlink.create(this.settings);\n    }\n    this.breath.setParameters([\n      new BreathParameterData(this.idParamAngleX, 0, 15, 6.5345, 0.5),\n      new BreathParameterData(this.idParamAngleY, 0, 8, 3.5345, 0.5),\n      new BreathParameterData(this.idParamAngleZ, 0, 10, 5.5345, 0.5),\n      new BreathParameterData(this.idParamBodyAngleX, 0, 4, 15.5345, 0.5),\n      new BreathParameterData(this.idParamBreath, 0, 0.5, 3.2345, 0.5)\n    ]);\n    this.renderer.initialize(this.coreModel);\n    this.renderer.setIsPremultipliedAlpha(true);\n  }\n  getSize() {\n    return [\n      this.coreModel.getModel().canvasinfo.CanvasWidth,\n      this.coreModel.getModel().canvasinfo.CanvasHeight\n    ];\n  }\n  getLayout() {\n    const layout = {};\n    if (this.settings.layout) {\n      for (const [key, value] of Object.entries(this.settings.layout)) {\n        const commonKey = key.charAt(0).toLowerCase() + key.slice(1);\n        layout[commonKey] = value;\n      }\n    }\n    return layout;\n  }\n  setupLayout() {\n    super.setupLayout();\n    this.pixelsPerUnit = this.coreModel.getModel().canvasinfo.PixelsPerUnit;\n    this.centeringTransform.scale(this.pixelsPerUnit, this.pixelsPerUnit).translate(this.originalWidth / 2, this.originalHeight / 2);\n  }\n  updateWebGLContext(gl, glContextID) {\n    this.renderer.firstDraw = true;\n    this.renderer._bufferData = {\n      vertex: null,\n      uv: null,\n      index: null\n    };\n    this.renderer.startUp(gl);\n    this.renderer._clippingManager._currentFrameNo = glContextID;\n    this.renderer._clippingManager._maskTexture = void 0;\n    CubismShader_WebGL.getInstance()._shaderSets = [];\n  }\n  bindTexture(index, texture) {\n    this.renderer.bindTexture(index, texture);\n  }\n  getHitAreaDefs() {\n    var _a, _b;\n    return (_b = (_a = this.settings.hitAreas) == null ? void 0 : _a.map((hitArea) => ({\n      id: hitArea.Id,\n      name: hitArea.Name,\n      index: this.coreModel.getDrawableIndex(hitArea.Id)\n    }))) != null ? _b : [];\n  }\n  getDrawableIDs() {\n    return this.coreModel.getDrawableIds();\n  }\n  getDrawableIndex(id) {\n    return this.coreModel.getDrawableIndex(id);\n  }\n  getDrawableVertices(drawIndex) {\n    if (typeof drawIndex === \"string\") {\n      drawIndex = this.coreModel.getDrawableIndex(drawIndex);\n      if (drawIndex === -1)\n        throw new TypeError(\"Unable to find drawable ID: \" + drawIndex);\n    }\n    const arr = this.coreModel.getDrawableVertices(drawIndex).slice();\n    for (let i = 0; i < arr.length; i += 2) {\n      arr[i] = arr[i] * this.pixelsPerUnit + this.originalWidth / 2;\n      arr[i + 1] = -arr[i + 1] * this.pixelsPerUnit + this.originalHeight / 2;\n    }\n    return arr;\n  }\n  updateTransform(transform) {\n    this.drawingMatrix.copyFrom(this.centeringTransform).prepend(this.localTransform).prepend(transform);\n  }\n  update(dt, now) {\n    var _a, _b, _c, _d;\n    super.update(dt, now);\n    dt /= 1e3;\n    now /= 1e3;\n    const model = this.coreModel;\n    this.emit(\"beforeMotionUpdate\");\n    const motionUpdated = this.motionManager.update(this.coreModel, now);\n    this.emit(\"afterMotionUpdate\");\n    model.saveParameters();\n    (_a = this.motionManager.expressionManager) == null ? void 0 : _a.update(model, now);\n    if (!motionUpdated) {\n      (_b = this.eyeBlink) == null ? void 0 : _b.updateParameters(model, dt);\n    }\n    this.updateFocus();\n    this.updateNaturalMovements(dt * 1e3, now * 1e3);\n    (_c = this.physics) == null ? void 0 : _c.evaluate(model, dt);\n    (_d = this.pose) == null ? void 0 : _d.updateParameters(model, dt);\n    this.emit(\"beforeModelUpdate\");\n    model.update();\n    model.loadParameters();\n  }\n  updateFocus() {\n    this.coreModel.addParameterValueById(this.idParamEyeBallX, this.focusController.x);\n    this.coreModel.addParameterValueById(this.idParamEyeBallY, this.focusController.y);\n    this.coreModel.addParameterValueById(this.idParamAngleX, this.focusController.x * 30);\n    this.coreModel.addParameterValueById(this.idParamAngleY, this.focusController.y * 30);\n    this.coreModel.addParameterValueById(\n      this.idParamAngleZ,\n      this.focusController.x * this.focusController.y * -30\n    );\n    this.coreModel.addParameterValueById(this.idParamBodyAngleX, this.focusController.x * 10);\n  }\n  updateNaturalMovements(dt, now) {\n    var _a;\n    (_a = this.breath) == null ? void 0 : _a.updateParameters(this.coreModel, dt / 1e3);\n  }\n  draw(gl) {\n    const matrix = this.drawingMatrix;\n    const array = tempMatrix.getArray();\n    array[0] = matrix.a;\n    array[1] = matrix.b;\n    array[4] = -matrix.c;\n    array[5] = -matrix.d;\n    array[12] = matrix.tx;\n    array[13] = matrix.ty;\n    this.renderer.setMvpMatrix(tempMatrix);\n    this.renderer.setRenderState(gl.getParameter(gl.FRAMEBUFFER_BINDING), this.viewport);\n    this.renderer.drawModel();\n  }\n  destroy() {\n    super.destroy();\n    this.renderer.release();\n    this.coreModel.release();\n    this.renderer = void 0;\n    this.coreModel = void 0;\n  }\n}\nclass CubismModelSettingsJson {\n  constructor(json) {\n    this.groups = json.Groups;\n    this.hitAreas = json.HitAreas;\n    this.layout = json.Layout;\n    this.moc = json.FileReferences.Moc;\n    this.expressions = json.FileReferences.Expressions;\n    this.motions = json.FileReferences.Motions;\n    this.textures = json.FileReferences.Textures;\n    this.physics = json.FileReferences.Physics;\n    this.pose = json.FileReferences.Pose;\n  }\n  getEyeBlinkParameters() {\n    var _a, _b;\n    return (_b = (_a = this.groups) == null ? void 0 : _a.find((group) => group.Name === \"EyeBlink\")) == null ? void 0 : _b.Ids;\n  }\n  getLipSyncParameters() {\n    var _a, _b;\n    return (_b = (_a = this.groups) == null ? void 0 : _a.find((group) => group.Name === \"LipSync\")) == null ? void 0 : _b.Ids;\n  }\n}\nclass Cubism4ModelSettings extends ModelSettings {\n  constructor(json) {\n    super(json);\n    __publicField(this, \"moc\");\n    __publicField(this, \"textures\");\n    if (!Cubism4ModelSettings.isValidJSON(json)) {\n      throw new TypeError(\"Invalid JSON.\");\n    }\n    Object.assign(this, new CubismModelSettingsJson(json));\n  }\n  static isValidJSON(json) {\n    var _a;\n    return !!(json == null ? void 0 : json.FileReferences) && typeof json.FileReferences.Moc === \"string\" && ((_a = json.FileReferences.Textures) == null ? void 0 : _a.length) > 0 && // textures must be an array of strings\n    json.FileReferences.Textures.every((item) => typeof item === \"string\");\n  }\n  replaceFiles(replace) {\n    super.replaceFiles(replace);\n    if (this.motions) {\n      for (const [group, motions] of Object.entries(this.motions)) {\n        for (let i = 0; i < motions.length; i++) {\n          motions[i].File = replace(motions[i].File, `motions.${group}[${i}].File`);\n          if (motions[i].Sound !== void 0) {\n            motions[i].Sound = replace(\n              motions[i].Sound,\n              `motions.${group}[${i}].Sound`\n            );\n          }\n        }\n      }\n    }\n    if (this.expressions) {\n      for (let i = 0; i < this.expressions.length; i++) {\n        this.expressions[i].File = replace(\n          this.expressions[i].File,\n          `expressions[${i}].File`\n        );\n      }\n    }\n  }\n}\napplyMixins(Cubism4ModelSettings, [CubismModelSettingsJson]);\nlet startupPromise;\nlet startupRetries = 20;\nfunction cubism4Ready() {\n  if (CubismFramework.isStarted()) {\n    return Promise.resolve();\n  }\n  startupPromise != null ? startupPromise : startupPromise = new Promise((resolve, reject) => {\n    function startUpWithRetry() {\n      try {\n        startUpCubism4();\n        resolve();\n      } catch (e) {\n        startupRetries--;\n        if (startupRetries < 0) {\n          const err = new Error(\"Failed to start up Cubism 4 framework.\");\n          err.cause = e;\n          reject(err);\n          return;\n        }\n        logger.log(\"Cubism4\", \"Startup failed, retrying 10ms later...\");\n        setTimeout(startUpWithRetry, 10);\n      }\n    }\n    startUpWithRetry();\n  });\n  return startupPromise;\n}\nfunction startUpCubism4(options) {\n  options = Object.assign(\n    {\n      logFunction: console.log,\n      loggingLevel: LogLevel.LogLevel_Verbose\n    },\n    options\n  );\n  CubismFramework.startUp(options);\n  CubismFramework.initialize();\n}\nconst Epsilon = 1e-3;\nconst DefaultFadeInSeconds = 0.5;\nclass CubismPose {\n  /**\n   * インスタンスの作成\n   * @param pose3json pose3.jsonのデータ\n   * @return 作成されたインスタンス\n   */\n  static create(pose3json) {\n    const ret = new CubismPose();\n    if (typeof pose3json.FadeInTime === \"number\") {\n      ret._fadeTimeSeconds = pose3json.FadeInTime;\n      if (ret._fadeTimeSeconds <= 0) {\n        ret._fadeTimeSeconds = DefaultFadeInSeconds;\n      }\n    }\n    const poseListInfo = pose3json.Groups;\n    const poseCount = poseListInfo.length;\n    for (let poseIndex = 0; poseIndex < poseCount; ++poseIndex) {\n      const idListInfo = poseListInfo[poseIndex];\n      const idCount = idListInfo.length;\n      let groupCount = 0;\n      for (let groupIndex = 0; groupIndex < idCount; ++groupIndex) {\n        const partInfo = idListInfo[groupIndex];\n        const partData = new PartData();\n        partData.partId = partInfo.Id;\n        const linkListInfo = partInfo.Link;\n        if (linkListInfo) {\n          const linkCount = linkListInfo.length;\n          for (let linkIndex = 0; linkIndex < linkCount; ++linkIndex) {\n            const linkPart = new PartData();\n            linkPart.partId = linkListInfo[linkIndex];\n            partData.link.push(linkPart);\n          }\n        }\n        ret._partGroups.push(partData);\n        ++groupCount;\n      }\n      ret._partGroupCounts.push(groupCount);\n    }\n    return ret;\n  }\n  /**\n   * モデルのパラメータの更新\n   * @param model 対象のモデル\n   * @param deltaTimeSeconds デルタ時間[秒]\n   */\n  updateParameters(model, deltaTimeSeconds) {\n    if (model != this._lastModel) {\n      this.reset(model);\n    }\n    this._lastModel = model;\n    if (deltaTimeSeconds < 0) {\n      deltaTimeSeconds = 0;\n    }\n    let beginIndex = 0;\n    for (let i = 0; i < this._partGroupCounts.length; i++) {\n      const partGroupCount = this._partGroupCounts[i];\n      this.doFade(model, deltaTimeSeconds, beginIndex, partGroupCount);\n      beginIndex += partGroupCount;\n    }\n    this.copyPartOpacities(model);\n  }\n  /**\n   * 表示を初期化\n   * @param model 対象のモデル\n   * @note 不透明度の初期値が0でないパラメータは、不透明度を１に設定する\n   */\n  reset(model) {\n    let beginIndex = 0;\n    for (let i = 0; i < this._partGroupCounts.length; ++i) {\n      const groupCount = this._partGroupCounts[i];\n      for (let j = beginIndex; j < beginIndex + groupCount; ++j) {\n        this._partGroups[j].initialize(model);\n        const partsIndex = this._partGroups[j].partIndex;\n        const paramIndex = this._partGroups[j].parameterIndex;\n        if (partsIndex < 0) {\n          continue;\n        }\n        model.setPartOpacityByIndex(partsIndex, j == beginIndex ? 1 : 0);\n        model.setParameterValueByIndex(paramIndex, j == beginIndex ? 1 : 0);\n        for (let k = 0; k < this._partGroups[j].link.length; ++k) {\n          this._partGroups[j].link[k].initialize(model);\n        }\n      }\n      beginIndex += groupCount;\n    }\n  }\n  /**\n   * パーツの不透明度をコピー\n   *\n   * @param model 対象のモデル\n   */\n  copyPartOpacities(model) {\n    for (let groupIndex = 0; groupIndex < this._partGroups.length; ++groupIndex) {\n      const partData = this._partGroups[groupIndex];\n      if (partData.link.length == 0) {\n        continue;\n      }\n      const partIndex = this._partGroups[groupIndex].partIndex;\n      const opacity = model.getPartOpacityByIndex(partIndex);\n      for (let linkIndex = 0; linkIndex < partData.link.length; ++linkIndex) {\n        const linkPart = partData.link[linkIndex];\n        const linkPartIndex = linkPart.partIndex;\n        if (linkPartIndex < 0) {\n          continue;\n        }\n        model.setPartOpacityByIndex(linkPartIndex, opacity);\n      }\n    }\n  }\n  /**\n   * パーツのフェード操作を行う。\n   * @param model 対象のモデル\n   * @param deltaTimeSeconds デルタ時間[秒]\n   * @param beginIndex フェード操作を行うパーツグループの先頭インデックス\n   * @param partGroupCount フェード操作を行うパーツグループの個数\n   */\n  doFade(model, deltaTimeSeconds, beginIndex, partGroupCount) {\n    let visiblePartIndex = -1;\n    let newOpacity = 1;\n    const phi = 0.5;\n    const backOpacityThreshold = 0.15;\n    for (let i = beginIndex; i < beginIndex + partGroupCount; ++i) {\n      const partIndex = this._partGroups[i].partIndex;\n      const paramIndex = this._partGroups[i].parameterIndex;\n      if (model.getParameterValueByIndex(paramIndex) > Epsilon) {\n        if (visiblePartIndex >= 0) {\n          break;\n        }\n        visiblePartIndex = i;\n        newOpacity = model.getPartOpacityByIndex(partIndex);\n        newOpacity += deltaTimeSeconds / this._fadeTimeSeconds;\n        if (newOpacity > 1) {\n          newOpacity = 1;\n        }\n      }\n    }\n    if (visiblePartIndex < 0) {\n      visiblePartIndex = 0;\n      newOpacity = 1;\n    }\n    for (let i = beginIndex; i < beginIndex + partGroupCount; ++i) {\n      const partsIndex = this._partGroups[i].partIndex;\n      if (visiblePartIndex == i) {\n        model.setPartOpacityByIndex(partsIndex, newOpacity);\n      } else {\n        let opacity = model.getPartOpacityByIndex(partsIndex);\n        let a1;\n        if (newOpacity < phi) {\n          a1 = newOpacity * (phi - 1) / phi + 1;\n        } else {\n          a1 = (1 - newOpacity) * phi / (1 - phi);\n        }\n        const backOpacity = (1 - a1) * (1 - newOpacity);\n        if (backOpacity > backOpacityThreshold) {\n          a1 = 1 - backOpacityThreshold / (1 - newOpacity);\n        }\n        if (opacity > a1) {\n          opacity = a1;\n        }\n        model.setPartOpacityByIndex(partsIndex, opacity);\n      }\n    }\n  }\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    this._fadeTimeSeconds = DefaultFadeInSeconds;\n    this._lastModel = void 0;\n    this._partGroups = [];\n    this._partGroupCounts = [];\n  }\n  // 前回操作したモデル\n}\nclass PartData {\n  /**\n   * コンストラクタ\n   */\n  constructor(v) {\n    this.parameterIndex = 0;\n    this.partIndex = 0;\n    this.partId = \"\";\n    this.link = [];\n    if (v != void 0) {\n      this.assignment(v);\n    }\n  }\n  /**\n   * =演算子のオーバーロード\n   */\n  assignment(v) {\n    this.partId = v.partId;\n    this.link = v.link.map((link) => link.clone());\n    return this;\n  }\n  /**\n   * 初期化\n   * @param model 初期化に使用するモデル\n   */\n  initialize(model) {\n    this.parameterIndex = model.getParameterIndex(this.partId);\n    this.partIndex = model.getPartIndex(this.partId);\n    model.setParameterValueByIndex(this.parameterIndex, 1);\n  }\n  /**\n   * オブジェクトのコピーを生成する\n   */\n  clone() {\n    const clonePartData = new PartData();\n    clonePartData.partId = this.partId;\n    clonePartData.parameterIndex = this.parameterIndex;\n    clonePartData.partIndex = this.partIndex;\n    clonePartData.link = this.link.map((link) => link.clone());\n    return clonePartData;\n  }\n  // 連動するパラメータ\n}\nclass DrawableColorData {\n  constructor(isOverwritten = false, color = new CubismTextureColor()) {\n    this.isOverwritten = isOverwritten;\n    this.Color = color;\n  }\n}\nclass PartColorData {\n  constructor(isOverwritten = false, color = new CubismTextureColor()) {\n    this.isOverwritten = isOverwritten;\n    this.Color = color;\n  }\n}\nclass DrawableCullingData {\n  /**\n   * コンストラクタ\n   *\n   * @param isOverwritten\n   * @param isCulling\n   */\n  constructor(isOverwritten = false, isCulling = false) {\n    this.isOverwritten = isOverwritten;\n    this.isCulling = isCulling;\n  }\n}\nclass CubismModel {\n  /**\n   * モデルのパラメータの更新\n   */\n  update() {\n    this._model.update();\n    this._model.drawables.resetDynamicFlags();\n  }\n  /**\n   * PixelsPerUnitを取得する\n   * @returns PixelsPerUnit\n   */\n  getPixelsPerUnit() {\n    if (this._model == null) {\n      return 0;\n    }\n    return this._model.canvasinfo.PixelsPerUnit;\n  }\n  /**\n   * キャンバスの幅を取得する\n   */\n  getCanvasWidth() {\n    if (this._model == null) {\n      return 0;\n    }\n    return this._model.canvasinfo.CanvasWidth / this._model.canvasinfo.PixelsPerUnit;\n  }\n  /**\n   * キャンバスの高さを取得する\n   */\n  getCanvasHeight() {\n    if (this._model == null) {\n      return 0;\n    }\n    return this._model.canvasinfo.CanvasHeight / this._model.canvasinfo.PixelsPerUnit;\n  }\n  /**\n   * パラメータを保存する\n   */\n  saveParameters() {\n    const parameterCount = this._model.parameters.count;\n    const savedParameterCount = this._savedParameters.length;\n    for (let i = 0; i < parameterCount; ++i) {\n      if (i < savedParameterCount) {\n        this._savedParameters[i] = this._parameterValues[i];\n      } else {\n        this._savedParameters.push(this._parameterValues[i]);\n      }\n    }\n  }\n  /**\n   * 乗算色を取得する\n   * @param index Drawablesのインデックス\n   * @returns 指定したdrawableの乗算色(RGBA)\n   */\n  getMultiplyColor(index) {\n    if (this.getOverwriteFlagForModelMultiplyColors() || this.getOverwriteFlagForDrawableMultiplyColors(index)) {\n      return this._userMultiplyColors[index].Color;\n    }\n    const color = this.getDrawableMultiplyColor(index);\n    return color;\n  }\n  /**\n   * スクリーン色を取得する\n   * @param index Drawablesのインデックス\n   * @returns 指定したdrawableのスクリーン色(RGBA)\n   */\n  getScreenColor(index) {\n    if (this.getOverwriteFlagForModelScreenColors() || this.getOverwriteFlagForDrawableScreenColors(index)) {\n      return this._userScreenColors[index].Color;\n    }\n    const color = this.getDrawableScreenColor(index);\n    return color;\n  }\n  /**\n   * 乗算色をセットする\n   * @param index Drawablesのインデックス\n   * @param color 設定する乗算色(CubismTextureColor)\n   */\n  setMultiplyColorByTextureColor(index, color) {\n    this.setMultiplyColorByRGBA(index, color.R, color.G, color.B, color.A);\n  }\n  /**\n   * 乗算色をセットする\n   * @param index Drawablesのインデックス\n   * @param r 設定する乗算色のR値\n   * @param g 設定する乗算色のG値\n   * @param b 設定する乗算色のB値\n   * @param a 設定する乗算色のA値\n   */\n  setMultiplyColorByRGBA(index, r, g, b, a = 1) {\n    this._userMultiplyColors[index].Color.R = r;\n    this._userMultiplyColors[index].Color.G = g;\n    this._userMultiplyColors[index].Color.B = b;\n    this._userMultiplyColors[index].Color.A = a;\n  }\n  /**\n   * スクリーン色をセットする\n   * @param index Drawablesのインデックス\n   * @param color 設定するスクリーン色(CubismTextureColor)\n   */\n  setScreenColorByTextureColor(index, color) {\n    this.setScreenColorByRGBA(index, color.R, color.G, color.B, color.A);\n  }\n  /**\n   * スクリーン色をセットする\n   * @param index Drawablesのインデックス\n   * @param r 設定するスクリーン色のR値\n   * @param g 設定するスクリーン色のG値\n   * @param b 設定するスクリーン色のB値\n   * @param a 設定するスクリーン色のA値\n   */\n  setScreenColorByRGBA(index, r, g, b, a = 1) {\n    this._userScreenColors[index].Color.R = r;\n    this._userScreenColors[index].Color.G = g;\n    this._userScreenColors[index].Color.B = b;\n    this._userScreenColors[index].Color.A = a;\n  }\n  /**\n   * partの乗算色を取得する\n   * @param partIndex partのインデックス\n   * @returns 指定したpartの乗算色\n   */\n  getPartMultiplyColor(partIndex) {\n    return this._userPartMultiplyColors[partIndex].Color;\n  }\n  /**\n   * partのスクリーン色を取得する\n   * @param partIndex partのインデックス\n   * @returns 指定したpartのスクリーン色\n   */\n  getPartScreenColor(partIndex) {\n    return this._userPartScreenColors[partIndex].Color;\n  }\n  /**\n   * partのOverwriteColor setter関数\n   * @param partIndex partのインデックス\n   * @param r 設定する色のR値\n   * @param g 設定する色のG値\n   * @param b 設定する色のB値\n   * @param a 設定する色のA値\n   * @param partColors 設定するpartのカラーデータ配列\n   * @param drawableColors partに関連するDrawableのカラーデータ配列\n   */\n  setPartColor(partIndex, r, g, b, a, partColors, drawableColors) {\n    partColors[partIndex].Color.R = r;\n    partColors[partIndex].Color.G = g;\n    partColors[partIndex].Color.B = b;\n    partColors[partIndex].Color.A = a;\n    if (partColors[partIndex].isOverwritten) {\n      for (let i = 0; i < this._partChildDrawables[partIndex].length; ++i) {\n        const drawableIndex = this._partChildDrawables[partIndex][i];\n        drawableColors[drawableIndex].Color.R = r;\n        drawableColors[drawableIndex].Color.G = g;\n        drawableColors[drawableIndex].Color.B = b;\n        drawableColors[drawableIndex].Color.A = a;\n      }\n    }\n  }\n  /**\n   * 乗算色をセットする\n   * @param partIndex partのインデックス\n   * @param color 設定する乗算色(CubismTextureColor)\n   */\n  setPartMultiplyColorByTextureColor(partIndex, color) {\n    this.setPartMultiplyColorByRGBA(\n      partIndex,\n      color.R,\n      color.G,\n      color.B,\n      color.A\n    );\n  }\n  /**\n   * 乗算色をセットする\n   * @param partIndex partのインデックス\n   * @param r 設定する乗算色のR値\n   * @param g 設定する乗算色のG値\n   * @param b 設定する乗算色のB値\n   * @param a 設定する乗算色のA値\n   */\n  setPartMultiplyColorByRGBA(partIndex, r, g, b, a) {\n    this.setPartColor(\n      partIndex,\n      r,\n      g,\n      b,\n      a,\n      this._userPartMultiplyColors,\n      this._userMultiplyColors\n    );\n  }\n  /**\n   * スクリーン色をセットする\n   * @param partIndex partのインデックス\n   * @param color 設定するスクリーン色(CubismTextureColor)\n   */\n  setPartScreenColorByTextureColor(partIndex, color) {\n    this.setPartScreenColorByRGBA(\n      partIndex,\n      color.R,\n      color.G,\n      color.B,\n      color.A\n    );\n  }\n  /**\n   * スクリーン色をセットする\n   * @param partIndex partのインデックス\n   * @param r 設定するスクリーン色のR値\n   * @param g 設定するスクリーン色のG値\n   * @param b 設定するスクリーン色のB値\n   * @param a 設定するスクリーン色のA値\n   */\n  setPartScreenColorByRGBA(partIndex, r, g, b, a) {\n    this.setPartColor(\n      partIndex,\n      r,\n      g,\n      b,\n      a,\n      this._userPartScreenColors,\n      this._userScreenColors\n    );\n  }\n  /**\n   * SDKから指定したモデルの乗算色を上書きするか\n   * @returns true -> SDKからの情報を優先する\n   *          false -> モデルに設定されている色情報を使用\n   */\n  getOverwriteFlagForModelMultiplyColors() {\n    return this._isOverwrittenModelMultiplyColors;\n  }\n  /**\n   * SDKから指定したモデルのスクリーン色を上書きするか\n   * @returns true -> SDKからの情報を優先する\n   *          false -> モデルに設定されている色情報を使用\n   */\n  getOverwriteFlagForModelScreenColors() {\n    return this._isOverwrittenModelScreenColors;\n  }\n  /**\n   * SDKから指定したモデルの乗算色を上書きするかセットする\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  setOverwriteFlagForModelMultiplyColors(value) {\n    this._isOverwrittenModelMultiplyColors = value;\n  }\n  /**\n   * SDKから指定したモデルのスクリーン色を上書きするかセットする\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  setOverwriteFlagForModelScreenColors(value) {\n    this._isOverwrittenModelScreenColors = value;\n  }\n  /**\n   * SDKから指定したDrawableIndexの乗算色を上書きするか\n   * @returns true -> SDKからの情報を優先する\n   *          false -> モデルに設定されている色情報を使用\n   */\n  getOverwriteFlagForDrawableMultiplyColors(drawableindex) {\n    return this._userMultiplyColors[drawableindex].isOverwritten;\n  }\n  /**\n   * SDKから指定したDrawableIndexのスクリーン色を上書きするか\n   * @returns true -> SDKからの情報を優先する\n   *          false -> モデルに設定されている色情報を使用\n   */\n  getOverwriteFlagForDrawableScreenColors(drawableindex) {\n    return this._userScreenColors[drawableindex].isOverwritten;\n  }\n  /**\n   * SDKから指定したDrawableIndexの乗算色を上書きするかセットする\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  setOverwriteFlagForDrawableMultiplyColors(drawableindex, value) {\n    this._userMultiplyColors[drawableindex].isOverwritten = value;\n  }\n  /**\n   * SDKから指定したDrawableIndexのスクリーン色を上書きするかセットする\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  setOverwriteFlagForDrawableScreenColors(drawableindex, value) {\n    this._userScreenColors[drawableindex].isOverwritten = value;\n  }\n  /**\n   * SDKからpartの乗算色を上書きするか\n   * @param partIndex partのインデックス\n   * @returns true    ->  SDKからの情報を優先する\n   *          false   ->  モデルに設定されている色情報を使用\n   */\n  getOverwriteColorForPartMultiplyColors(partIndex) {\n    return this._userPartMultiplyColors[partIndex].isOverwritten;\n  }\n  /**\n   * SDKからpartのスクリーン色を上書きするか\n   * @param partIndex partのインデックス\n   * @returns true    ->  SDKからの情報を優先する\n   *          false   ->  モデルに設定されている色情報を使用\n   */\n  getOverwriteColorForPartScreenColors(partIndex) {\n    return this._userPartScreenColors[partIndex].isOverwritten;\n  }\n  /**\n   * partのOverwriteFlag setter関数\n   * @param partIndex partのインデックス\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   * @param partColors 設定するpartのカラーデータ配列\n   * @param drawableColors partに関連するDrawableのカラーデータ配列\n   */\n  setOverwriteColorForPartColors(partIndex, value, partColors, drawableColors) {\n    partColors[partIndex].isOverwritten = value;\n    for (let i = 0; i < this._partChildDrawables[partIndex].length; ++i) {\n      const drawableIndex = this._partChildDrawables[partIndex][i];\n      drawableColors[drawableIndex].isOverwritten = value;\n      if (value) {\n        drawableColors[drawableIndex].Color.R = partColors[partIndex].Color.R;\n        drawableColors[drawableIndex].Color.G = partColors[partIndex].Color.G;\n        drawableColors[drawableIndex].Color.B = partColors[partIndex].Color.B;\n        drawableColors[drawableIndex].Color.A = partColors[partIndex].Color.A;\n      }\n    }\n  }\n  /**\n   * SDKからpartのスクリーン色を上書きするかをセットする\n   * @param partIndex partのインデックス\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  setOverwriteColorForPartMultiplyColors(partIndex, value) {\n    this._userPartMultiplyColors[partIndex].isOverwritten = value;\n    this.setOverwriteColorForPartColors(\n      partIndex,\n      value,\n      this._userPartMultiplyColors,\n      this._userMultiplyColors\n    );\n  }\n  /**\n   * SDKからpartのスクリーン色を上書きするかをセットする\n   * @param partIndex partのインデックス\n   * @param value true -> SDKからの情報を優先する\n   *              false -> モデルに設定されている色情報を使用\n   */\n  setOverwriteColorForPartScreenColors(partIndex, value) {\n    this._userPartScreenColors[partIndex].isOverwritten = value;\n    this.setOverwriteColorForPartColors(\n      partIndex,\n      value,\n      this._userPartScreenColors,\n      this._userScreenColors\n    );\n  }\n  /**\n   * Drawableのカリング情報を取得する。\n   *\n   * @param   drawableIndex   Drawableのインデックス\n   * @return  Drawableのカリング情報\n   */\n  getDrawableCulling(drawableIndex) {\n    if (this.getOverwriteFlagForModelCullings() || this.getOverwriteFlagForDrawableCullings(drawableIndex)) {\n      return this._userCullings[drawableIndex].isCulling;\n    }\n    const constantFlags = this._model.drawables.constantFlags;\n    return !Live2DCubismCore.Utils.hasIsDoubleSidedBit(\n      constantFlags[drawableIndex]\n    );\n  }\n  /**\n   * Drawableのカリング情報を設定する。\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @param isCulling カリング情報\n   */\n  setDrawableCulling(drawableIndex, isCulling) {\n    this._userCullings[drawableIndex].isCulling = isCulling;\n  }\n  /**\n   * SDKからモデル全体のカリング設定を上書きするか。\n   *\n   * @retval  true    ->  SDK上のカリング設定を使用\n   * @retval  false   ->  モデルのカリング設定を使用\n   */\n  getOverwriteFlagForModelCullings() {\n    return this._isOverwrittenCullings;\n  }\n  /**\n   * SDKからモデル全体のカリング設定を上書きするかを設定する。\n   *\n   * @param isOverwrittenCullings SDK上のカリング設定を使うならtrue、モデルのカリング設定を使うならfalse\n   */\n  setOverwriteFlagForModelCullings(isOverwrittenCullings) {\n    this._isOverwrittenCullings = isOverwrittenCullings;\n  }\n  /**\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @retval  true    ->  SDK上のカリング設定を使用\n   * @retval  false   ->  モデルのカリング設定を使用\n   */\n  getOverwriteFlagForDrawableCullings(drawableIndex) {\n    return this._userCullings[drawableIndex].isOverwritten;\n  }\n  /**\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @param isOverwrittenCullings SDK上のカリング設定を使うならtrue、モデルのカリング設定を使うならfalse\n   */\n  setOverwriteFlagForDrawableCullings(drawableIndex, isOverwrittenCullings) {\n    this._userCullings[drawableIndex].isOverwritten = isOverwrittenCullings;\n  }\n  /**\n   * モデルの不透明度を取得する\n   *\n   * @returns 不透明度の値\n   */\n  getModelOapcity() {\n    return this._modelOpacity;\n  }\n  /**\n   * モデルの不透明度を設定する\n   *\n   * @param value 不透明度の値\n   */\n  setModelOapcity(value) {\n    this._modelOpacity = value;\n  }\n  /**\n   * モデルを取得\n   */\n  getModel() {\n    return this._model;\n  }\n  /**\n   * パーツのインデックスを取得\n   * @param partId パーツのID\n   * @return パーツのインデックス\n   */\n  getPartIndex(partId) {\n    let partIndex;\n    const partCount = this._model.parts.count;\n    for (partIndex = 0; partIndex < partCount; ++partIndex) {\n      if (partId == this._partIds[partIndex]) {\n        return partIndex;\n      }\n    }\n    if (partId in this._notExistPartId) {\n      return this._notExistPartId[partId];\n    }\n    partIndex = partCount + this._notExistPartId.length;\n    this._notExistPartId[partId] = partIndex;\n    this._notExistPartOpacities[partIndex] = 0;\n    return partIndex;\n  }\n  /**\n   * パーツのIDを取得する。\n   *\n   * @param partIndex 取得するパーツのインデックス\n   * @return パーツのID\n   */\n  getPartId(partIndex) {\n    return this._model.parts.ids[partIndex];\n  }\n  /**\n   * パーツの個数の取得\n   * @return パーツの個数\n   */\n  getPartCount() {\n    return this._model.parts.count;\n  }\n  /**\n   * パーツの不透明度の設定(Index)\n   * @param partIndex パーツのインデックス\n   * @param opacity 不透明度\n   */\n  setPartOpacityByIndex(partIndex, opacity) {\n    if (partIndex in this._notExistPartOpacities) {\n      this._notExistPartOpacities[partIndex] = opacity;\n      return;\n    }\n    CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());\n    this._partOpacities[partIndex] = opacity;\n  }\n  /**\n   * パーツの不透明度の設定(Id)\n   * @param partId パーツのID\n   * @param opacity パーツの不透明度\n   */\n  setPartOpacityById(partId, opacity) {\n    const index = this.getPartIndex(partId);\n    if (index < 0) {\n      return;\n    }\n    this.setPartOpacityByIndex(index, opacity);\n  }\n  /**\n   * パーツの不透明度の取得(index)\n   * @param partIndex パーツのインデックス\n   * @return パーツの不透明度\n   */\n  getPartOpacityByIndex(partIndex) {\n    if (partIndex in this._notExistPartOpacities) {\n      return this._notExistPartOpacities[partIndex];\n    }\n    CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());\n    return this._partOpacities[partIndex];\n  }\n  /**\n   * パーツの不透明度の取得(id)\n   * @param partId パーツのＩｄ\n   * @return パーツの不透明度\n   */\n  getPartOpacityById(partId) {\n    const index = this.getPartIndex(partId);\n    if (index < 0) {\n      return 0;\n    }\n    return this.getPartOpacityByIndex(index);\n  }\n  /**\n   * パラメータのインデックスの取得\n   * @param パラメータID\n   * @return パラメータのインデックス\n   */\n  getParameterIndex(parameterId) {\n    let parameterIndex;\n    const idCount = this._model.parameters.count;\n    for (parameterIndex = 0; parameterIndex < idCount; ++parameterIndex) {\n      if (parameterId != this._parameterIds[parameterIndex]) {\n        continue;\n      }\n      return parameterIndex;\n    }\n    if (parameterId in this._notExistParameterId) {\n      return this._notExistParameterId[parameterId];\n    }\n    parameterIndex = this._model.parameters.count + Object.keys(this._notExistParameterId).length;\n    this._notExistParameterId[parameterId] = parameterIndex;\n    this._notExistParameterValues[parameterIndex] = 0;\n    return parameterIndex;\n  }\n  /**\n   * パラメータの個数の取得\n   * @return パラメータの個数\n   */\n  getParameterCount() {\n    return this._model.parameters.count;\n  }\n  /**\n   * パラメータの種類の取得\n   * @param parameterIndex パラメータのインデックス\n   * @return csmParameterType_Normal -> 通常のパラメータ\n   *          csmParameterType_BlendShape -> ブレンドシェイプパラメータ\n   */\n  getParameterType(parameterIndex) {\n    return this._model.parameters.types[parameterIndex];\n  }\n  /**\n   * パラメータの最大値の取得\n   * @param parameterIndex パラメータのインデックス\n   * @return パラメータの最大値\n   */\n  getParameterMaximumValue(parameterIndex) {\n    return this._model.parameters.maximumValues[parameterIndex];\n  }\n  /**\n   * パラメータの最小値の取得\n   * @param parameterIndex パラメータのインデックス\n   * @return パラメータの最小値\n   */\n  getParameterMinimumValue(parameterIndex) {\n    return this._model.parameters.minimumValues[parameterIndex];\n  }\n  /**\n   * パラメータのデフォルト値の取得\n   * @param parameterIndex パラメータのインデックス\n   * @return パラメータのデフォルト値\n   */\n  getParameterDefaultValue(parameterIndex) {\n    return this._model.parameters.defaultValues[parameterIndex];\n  }\n  /**\n   * パラメータの値の取得\n   * @param parameterIndex    パラメータのインデックス\n   * @return パラメータの値\n   */\n  getParameterValueByIndex(parameterIndex) {\n    if (parameterIndex in this._notExistParameterValues) {\n      return this._notExistParameterValues[parameterIndex];\n    }\n    CSM_ASSERT(\n      0 <= parameterIndex && parameterIndex < this.getParameterCount()\n    );\n    return this._parameterValues[parameterIndex];\n  }\n  /**\n   * パラメータの値の取得\n   * @param parameterId    パラメータのID\n   * @return パラメータの値\n   */\n  getParameterValueById(parameterId) {\n    const parameterIndex = this.getParameterIndex(parameterId);\n    return this.getParameterValueByIndex(parameterIndex);\n  }\n  /**\n   * パラメータの値の設定\n   * @param parameterIndex パラメータのインデックス\n   * @param value パラメータの値\n   * @param weight 重み\n   */\n  setParameterValueByIndex(parameterIndex, value, weight = 1) {\n    if (parameterIndex in this._notExistParameterValues) {\n      this._notExistParameterValues[parameterIndex] = weight == 1 ? value : this._notExistParameterValues[parameterIndex] * (1 - weight) + value * weight;\n      return;\n    }\n    CSM_ASSERT(\n      0 <= parameterIndex && parameterIndex < this.getParameterCount()\n    );\n    if (this._model.parameters.maximumValues[parameterIndex] < value) {\n      value = this._model.parameters.maximumValues[parameterIndex];\n    }\n    if (this._model.parameters.minimumValues[parameterIndex] > value) {\n      value = this._model.parameters.minimumValues[parameterIndex];\n    }\n    this._parameterValues[parameterIndex] = weight == 1 ? value : this._parameterValues[parameterIndex] = this._parameterValues[parameterIndex] * (1 - weight) + value * weight;\n  }\n  /**\n   * パラメータの値の設定\n   * @param parameterId パラメータのID\n   * @param value パラメータの値\n   * @param weight 重み\n   */\n  setParameterValueById(parameterId, value, weight = 1) {\n    const index = this.getParameterIndex(parameterId);\n    this.setParameterValueByIndex(index, value, weight);\n  }\n  /**\n   * パラメータの値の加算(index)\n   * @param parameterIndex パラメータインデックス\n   * @param value 加算する値\n   * @param weight 重み\n   */\n  addParameterValueByIndex(parameterIndex, value, weight = 1) {\n    this.setParameterValueByIndex(\n      parameterIndex,\n      this.getParameterValueByIndex(parameterIndex) + value * weight\n    );\n  }\n  /**\n   * パラメータの値の加算(id)\n   * @param parameterId パラメータＩＤ\n   * @param value 加算する値\n   * @param weight 重み\n   */\n  addParameterValueById(parameterId, value, weight = 1) {\n    const index = this.getParameterIndex(parameterId);\n    this.addParameterValueByIndex(index, value, weight);\n  }\n  /**\n   * パラメータの値の乗算\n   * @param parameterId パラメータのID\n   * @param value 乗算する値\n   * @param weight 重み\n   */\n  multiplyParameterValueById(parameterId, value, weight = 1) {\n    const index = this.getParameterIndex(parameterId);\n    this.multiplyParameterValueByIndex(index, value, weight);\n  }\n  /**\n   * パラメータの値の乗算\n   * @param parameterIndex パラメータのインデックス\n   * @param value 乗算する値\n   * @param weight 重み\n   */\n  multiplyParameterValueByIndex(parameterIndex, value, weight = 1) {\n    this.setParameterValueByIndex(\n      parameterIndex,\n      this.getParameterValueByIndex(parameterIndex) * (1 + (value - 1) * weight)\n    );\n  }\n  getDrawableIds() {\n    return this._drawableIds.slice();\n  }\n  /**\n   * Drawableのインデックスの取得\n   * @param drawableId DrawableのID\n   * @return Drawableのインデックス\n   */\n  getDrawableIndex(drawableId) {\n    const drawableCount = this._model.drawables.count;\n    for (let drawableIndex = 0; drawableIndex < drawableCount; ++drawableIndex) {\n      if (this._drawableIds[drawableIndex] == drawableId) {\n        return drawableIndex;\n      }\n    }\n    return -1;\n  }\n  /**\n   * Drawableの個数の取得\n   * @return drawableの個数\n   */\n  getDrawableCount() {\n    return this._model.drawables.count;\n  }\n  /**\n   * DrawableのIDを取得する\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableのID\n   */\n  getDrawableId(drawableIndex) {\n    return this._model.drawables.ids[drawableIndex];\n  }\n  /**\n   * Drawableの描画順リストの取得\n   * @return Drawableの描画順リスト\n   */\n  getDrawableRenderOrders() {\n    return this._model.drawables.renderOrders;\n  }\n  /**\n   * @deprecated\n   * 関数名が誤っていたため、代替となる getDrawableTextureIndex を追加し、この関数は非推奨となりました。\n   *\n   * Drawableのテクスチャインデックスリストの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableのテクスチャインデックスリスト\n   */\n  getDrawableTextureIndices(drawableIndex) {\n    return this.getDrawableTextureIndex(drawableIndex);\n  }\n  /**\n   * Drawableのテクスチャインデックスの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableのテクスチャインデックス\n   */\n  getDrawableTextureIndex(drawableIndex) {\n    const textureIndices = this._model.drawables.textureIndices;\n    return textureIndices[drawableIndex];\n  }\n  /**\n   * DrawableのVertexPositionsの変化情報の取得\n   *\n   * 直近のCubismModel.update関数でDrawableの頂点情報が変化したかを取得する。\n   *\n   * @param   drawableIndex   Drawableのインデックス\n   * @retval  true    Drawableの頂点情報が直近のCubismModel.update関数で変化した\n   * @retval  false   Drawableの頂点情報が直近のCubismModel.update関数で変化していない\n   */\n  getDrawableDynamicFlagVertexPositionsDidChange(drawableIndex) {\n    const dynamicFlags = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(\n      dynamicFlags[drawableIndex]\n    );\n  }\n  /**\n   * Drawableの頂点インデックスの個数の取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの頂点インデックスの個数\n   */\n  getDrawableVertexIndexCount(drawableIndex) {\n    return this._model.drawables.indexCounts[drawableIndex];\n  }\n  /**\n   * Drawableの頂点の個数の取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの頂点の個数\n   */\n  getDrawableVertexCount(drawableIndex) {\n    return this._model.drawables.vertexCounts[drawableIndex];\n  }\n  /**\n   * Drawableの頂点リストの取得\n   * @param drawableIndex drawableのインデックス\n   * @return drawableの頂点リスト\n   */\n  getDrawableVertices(drawableIndex) {\n    return this.getDrawableVertexPositions(drawableIndex);\n  }\n  /**\n   * Drawableの頂点インデックスリストの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの頂点インデックスリスト\n   */\n  getDrawableVertexIndices(drawableIndex) {\n    return this._model.drawables.indices[drawableIndex];\n  }\n  /**\n   * Drawableの頂点リストの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの頂点リスト\n   */\n  getDrawableVertexPositions(drawableIndex) {\n    return this._model.drawables.vertexPositions[drawableIndex];\n  }\n  /**\n   * Drawableの頂点のUVリストの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの頂点UVリスト\n   */\n  getDrawableVertexUvs(drawableIndex) {\n    return this._model.drawables.vertexUvs[drawableIndex];\n  }\n  /**\n   * Drawableの不透明度の取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの不透明度\n   */\n  getDrawableOpacity(drawableIndex) {\n    return this._model.drawables.opacities[drawableIndex];\n  }\n  /**\n   * Drawableの乗算色の取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの乗算色(RGBA)\n   * スクリーン色はRGBAで取得されるが、Aは必ず0\n   */\n  getDrawableMultiplyColor(drawableIndex) {\n    const multiplyColors = this._model.drawables.multiplyColors;\n    const index = drawableIndex * 4;\n    const multiplyColor = new CubismTextureColor();\n    multiplyColor.R = multiplyColors[index];\n    multiplyColor.G = multiplyColors[index + 1];\n    multiplyColor.B = multiplyColors[index + 2];\n    multiplyColor.A = multiplyColors[index + 3];\n    return multiplyColor;\n  }\n  /**\n   * Drawableのスクリーン色の取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableのスクリーン色(RGBA)\n   * スクリーン色はRGBAで取得されるが、Aは必ず0\n   */\n  getDrawableScreenColor(drawableIndex) {\n    const screenColors = this._model.drawables.screenColors;\n    const index = drawableIndex * 4;\n    const screenColor = new CubismTextureColor();\n    screenColor.R = screenColors[index];\n    screenColor.G = screenColors[index + 1];\n    screenColor.B = screenColors[index + 2];\n    screenColor.A = screenColors[index + 3];\n    return screenColor;\n  }\n  /**\n   * Drawableの親パーツのインデックスの取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableの親パーツのインデックス\n   */\n  getDrawableParentPartIndex(drawableIndex) {\n    return this._model.drawables.parentPartIndices[drawableIndex];\n  }\n  /**\n   * Drawableのブレンドモードを取得\n   * @param drawableIndex Drawableのインデックス\n   * @return drawableのブレンドモード\n   */\n  getDrawableBlendMode(drawableIndex) {\n    const constantFlags = this._model.drawables.constantFlags;\n    return Live2DCubismCore.Utils.hasBlendAdditiveBit(\n      constantFlags[drawableIndex]\n    ) ? CubismBlendMode.CubismBlendMode_Additive : Live2DCubismCore.Utils.hasBlendMultiplicativeBit(\n      constantFlags[drawableIndex]\n    ) ? CubismBlendMode.CubismBlendMode_Multiplicative : CubismBlendMode.CubismBlendMode_Normal;\n  }\n  /**\n   * Drawableのマスクの反転使用の取得\n   *\n   * Drawableのマスク使用時の反転設定を取得する。\n   * マスクを使用しない場合は無視される。\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @return Drawableの反転設定\n   */\n  getDrawableInvertedMaskBit(drawableIndex) {\n    const constantFlags = this._model.drawables.constantFlags;\n    return Live2DCubismCore.Utils.hasIsInvertedMaskBit(\n      constantFlags[drawableIndex]\n    );\n  }\n  /**\n   * Drawableのクリッピングマスクリストの取得\n   * @return Drawableのクリッピングマスクリスト\n   */\n  getDrawableMasks() {\n    return this._model.drawables.masks;\n  }\n  /**\n   * Drawableのクリッピングマスクの個数リストの取得\n   * @return Drawableのクリッピングマスクの個数リスト\n   */\n  getDrawableMaskCounts() {\n    return this._model.drawables.maskCounts;\n  }\n  /**\n   * クリッピングマスクの使用状態\n   *\n   * @return true クリッピングマスクを使用している\n   * @return false クリッピングマスクを使用していない\n   */\n  isUsingMasking() {\n    for (let d = 0; d < this._model.drawables.count; ++d) {\n      if (this._model.drawables.maskCounts[d] <= 0) {\n        continue;\n      }\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Drawableの表示情報を取得する\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @return true Drawableが表示\n   * @return false Drawableが非表示\n   */\n  getDrawableDynamicFlagIsVisible(drawableIndex) {\n    const dynamicFlags = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasIsVisibleBit(dynamicFlags[drawableIndex]);\n  }\n  /**\n   * DrawableのDrawOrderの変化情報の取得\n   *\n   * 直近のCubismModel.update関数でdrawableのdrawOrderが変化したかを取得する。\n   * drawOrderはartMesh上で指定する0から1000の情報\n   * @param drawableIndex drawableのインデックス\n   * @return true drawableの不透明度が直近のCubismModel.update関数で変化した\n   * @return false drawableの不透明度が直近のCubismModel.update関数で変化している\n   */\n  getDrawableDynamicFlagVisibilityDidChange(drawableIndex) {\n    const dynamicFlags = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasVisibilityDidChangeBit(\n      dynamicFlags[drawableIndex]\n    );\n  }\n  /**\n   * Drawableの不透明度の変化情報の取得\n   *\n   * 直近のCubismModel.update関数でdrawableの不透明度が変化したかを取得する。\n   *\n   * @param drawableIndex drawableのインデックス\n   * @return true Drawableの不透明度が直近のCubismModel.update関数で変化した\n   * @return false Drawableの不透明度が直近のCubismModel.update関数で変化してない\n   */\n  getDrawableDynamicFlagOpacityDidChange(drawableIndex) {\n    const dynamicFlags = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasOpacityDidChangeBit(\n      dynamicFlags[drawableIndex]\n    );\n  }\n  /**\n   * Drawableの描画順序の変化情報の取得\n   *\n   * 直近のCubismModel.update関数でDrawableの描画の順序が変化したかを取得する。\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @return true Drawableの描画の順序が直近のCubismModel.update関数で変化した\n   * @return false Drawableの描画の順序が直近のCubismModel.update関数で変化してない\n   */\n  getDrawableDynamicFlagRenderOrderDidChange(drawableIndex) {\n    const dynamicFlags = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(\n      dynamicFlags[drawableIndex]\n    );\n  }\n  /**\n   * Drawableの乗算色・スクリーン色の変化情報の取得\n   *\n   * 直近のCubismModel.update関数でDrawableの乗算色・スクリーン色が変化したかを取得する。\n   *\n   * @param drawableIndex Drawableのインデックス\n   * @return true Drawableの乗算色・スクリーン色が直近のCubismModel.update関数で変化した\n   * @return false Drawableの乗算色・スクリーン色が直近のCubismModel.update関数で変化してない\n   */\n  getDrawableDynamicFlagBlendColorDidChange(drawableIndex) {\n    const dynamicFlags = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasBlendColorDidChangeBit(\n      dynamicFlags[drawableIndex]\n    );\n  }\n  /**\n   * 保存されたパラメータの読み込み\n   */\n  loadParameters() {\n    let parameterCount = this._model.parameters.count;\n    const savedParameterCount = this._savedParameters.length;\n    if (parameterCount > savedParameterCount) {\n      parameterCount = savedParameterCount;\n    }\n    for (let i = 0; i < parameterCount; ++i) {\n      this._parameterValues[i] = this._savedParameters[i];\n    }\n  }\n  /**\n   * 初期化する\n   */\n  initialize() {\n    this._parameterValues = this._model.parameters.values;\n    this._partOpacities = this._model.parts.opacities;\n    this._parameterMaximumValues = this._model.parameters.maximumValues;\n    this._parameterMinimumValues = this._model.parameters.minimumValues;\n    {\n      const parameterIds = this._model.parameters.ids;\n      const parameterCount = this._model.parameters.count;\n      for (let i = 0; i < parameterCount; ++i) {\n        this._parameterIds.push(parameterIds[i]);\n      }\n    }\n    const partCount = this._model.parts.count;\n    {\n      const partIds = this._model.parts.ids;\n      for (let i = 0; i < partCount; ++i) {\n        this._partIds.push(partIds[i]);\n      }\n    }\n    {\n      const drawableIds = this._model.drawables.ids;\n      const drawableCount = this._model.drawables.count;\n      const userCulling = new DrawableCullingData(\n        false,\n        false\n      );\n      {\n        for (let i = 0; i < partCount; ++i) {\n          const multiplyColor = new CubismTextureColor(\n            1,\n            1,\n            1,\n            1\n          );\n          const screenColor = new CubismTextureColor(\n            0,\n            0,\n            0,\n            1\n          );\n          const userMultiplyColor = new PartColorData(\n            false,\n            multiplyColor\n          );\n          const userScreenColor = new PartColorData(\n            false,\n            screenColor\n          );\n          this._userPartMultiplyColors.push(userMultiplyColor);\n          this._userPartScreenColors.push(userScreenColor);\n          this._partChildDrawables.push([]);\n        }\n      }\n      {\n        for (let i = 0; i < drawableCount; ++i) {\n          const multiplyColor = new CubismTextureColor(\n            1,\n            1,\n            1,\n            1\n          );\n          const screenColor = new CubismTextureColor(\n            0,\n            0,\n            0,\n            1\n          );\n          const userMultiplyColor = new DrawableColorData(\n            false,\n            multiplyColor\n          );\n          const userScreenColor = new DrawableColorData(\n            false,\n            screenColor\n          );\n          this._drawableIds.push(drawableIds[i]);\n          this._userMultiplyColors.push(userMultiplyColor);\n          this._userScreenColors.push(userScreenColor);\n          this._userCullings.push(userCulling);\n          const parentIndex = this.getDrawableParentPartIndex(i);\n          if (parentIndex >= 0) {\n            this._partChildDrawables[parentIndex].push(i);\n          }\n        }\n      }\n    }\n  }\n  /**\n   * コンストラクタ\n   * @param model モデル\n   */\n  constructor(model) {\n    this._model = model;\n    this._savedParameters = [];\n    this._parameterIds = [];\n    this._drawableIds = [];\n    this._partIds = [];\n    this._isOverwrittenModelMultiplyColors = false;\n    this._isOverwrittenModelScreenColors = false;\n    this._isOverwrittenCullings = false;\n    this._modelOpacity = 1;\n    this._userMultiplyColors = [];\n    this._userScreenColors = [];\n    this._userCullings = [];\n    this._userPartMultiplyColors = [];\n    this._userPartScreenColors = [];\n    this._partChildDrawables = [];\n    this._notExistPartId = {};\n    this._notExistParameterId = {};\n    this._notExistParameterValues = {};\n    this._notExistPartOpacities = {};\n    this.initialize();\n  }\n  /**\n   * デストラクタ相当の処理\n   */\n  release() {\n    this._model.release();\n    this._model = void 0;\n  }\n  // カリング設定の配列\n}\nclass CubismMoc {\n  /**\n   * Mocデータの作成\n   */\n  static create(mocBytes, shouldCheckMocConsistency) {\n    if (shouldCheckMocConsistency) {\n      const consistency = this.hasMocConsistency(mocBytes);\n      if (!consistency) {\n        throw new Error(`Inconsistent MOC3.`);\n      }\n    }\n    const moc = Live2DCubismCore.Moc.fromArrayBuffer(mocBytes);\n    if (moc) {\n      const cubismMoc = new CubismMoc(moc);\n      cubismMoc._mocVersion = Live2DCubismCore.Version.csmGetMocVersion(\n        moc,\n        mocBytes\n      );\n      return cubismMoc;\n    }\n    throw new Error(\"Failed to CubismMoc.create().\");\n  }\n  /**\n   * モデルを作成する\n   *\n   * @return Mocデータから作成されたモデル\n   */\n  createModel() {\n    let cubismModel;\n    const model = Live2DCubismCore.Model.fromMoc(\n      this._moc\n    );\n    if (model) {\n      cubismModel = new CubismModel(model);\n      ++this._modelCount;\n      return cubismModel;\n    }\n    throw new Error(\"Unknown error\");\n  }\n  /**\n   * モデルを削除する\n   */\n  deleteModel(model) {\n    if (model != null) {\n      --this._modelCount;\n    }\n  }\n  /**\n   * コンストラクタ\n   */\n  constructor(moc) {\n    this._moc = moc;\n    this._modelCount = 0;\n    this._mocVersion = 0;\n  }\n  /**\n   * デストラクタ相当の処理\n   */\n  release() {\n    this._moc._release();\n    this._moc = void 0;\n  }\n  /**\n   * 最新の.moc3 Versionを取得\n   */\n  getLatestMocVersion() {\n    return Live2DCubismCore.Version.csmGetLatestMocVersion();\n  }\n  /**\n   * 読み込んだモデルの.moc3 Versionを取得\n   */\n  getMocVersion() {\n    return this._mocVersion;\n  }\n  /**\n   * .moc3 の整合性を検証する\n   */\n  static hasMocConsistency(mocBytes) {\n    const isConsistent = Live2DCubismCore.Moc.prototype.hasMocConsistency(mocBytes);\n    return isConsistent === 1 ? true : false;\n  }\n  // 読み込んだモデルの.moc3 Version\n}\nvar CubismPhysicsTargetType = /* @__PURE__ */ ((CubismPhysicsTargetType2) => {\n  CubismPhysicsTargetType2[CubismPhysicsTargetType2[\"CubismPhysicsTargetType_Parameter\"] = 0] = \"CubismPhysicsTargetType_Parameter\";\n  return CubismPhysicsTargetType2;\n})(CubismPhysicsTargetType || {});\nvar CubismPhysicsSource = /* @__PURE__ */ ((CubismPhysicsSource2) => {\n  CubismPhysicsSource2[CubismPhysicsSource2[\"CubismPhysicsSource_X\"] = 0] = \"CubismPhysicsSource_X\";\n  CubismPhysicsSource2[CubismPhysicsSource2[\"CubismPhysicsSource_Y\"] = 1] = \"CubismPhysicsSource_Y\";\n  CubismPhysicsSource2[CubismPhysicsSource2[\"CubismPhysicsSource_Angle\"] = 2] = \"CubismPhysicsSource_Angle\";\n  return CubismPhysicsSource2;\n})(CubismPhysicsSource || {});\nclass CubismPhysicsParticle {\n  constructor() {\n    this.initialPosition = new CubismVector2(0, 0);\n    this.position = new CubismVector2(0, 0);\n    this.lastPosition = new CubismVector2(0, 0);\n    this.lastGravity = new CubismVector2(0, 0);\n    this.force = new CubismVector2(0, 0);\n    this.velocity = new CubismVector2(0, 0);\n  }\n  // 現在の速度\n}\nclass CubismPhysicsSubRig {\n  constructor() {\n    this.normalizationPosition = {};\n    this.normalizationAngle = {};\n  }\n  // 正規化された角度\n}\nclass CubismPhysicsInput {\n  constructor() {\n    this.source = {};\n  }\n  // 正規化されたパラメータ値の取得関数\n}\nclass CubismPhysicsOutput {\n  constructor() {\n    this.destination = {};\n    this.translationScale = new CubismVector2(0, 0);\n  }\n  // 物理演算のスケール値の取得関数\n}\nclass CubismPhysicsRig {\n  constructor() {\n    this.settings = [];\n    this.inputs = [];\n    this.outputs = [];\n    this.particles = [];\n    this.gravity = new CubismVector2(0, 0);\n    this.wind = new CubismVector2(0, 0);\n    this.fps = 0;\n  }\n  //物理演算動作FPS\n}\nclass CubismPhysicsJson {\n  /**\n   * コンストラクタ\n   * @param json physics3.jsonが読み込まれているバッファ\n   */\n  constructor(json) {\n    this._json = json;\n  }\n  /**\n   * デストラクタ相当の処理\n   */\n  release() {\n    this._json = void 0;\n  }\n  /**\n   * 重力の取得\n   * @return 重力\n   */\n  getGravity() {\n    const ret = new CubismVector2(0, 0);\n    ret.x = this._json.Meta.EffectiveForces.Gravity.X;\n    ret.y = this._json.Meta.EffectiveForces.Gravity.Y;\n    return ret;\n  }\n  /**\n   * 風の取得\n   * @return 風\n   */\n  getWind() {\n    const ret = new CubismVector2(0, 0);\n    ret.x = this._json.Meta.EffectiveForces.Wind.X;\n    ret.y = this._json.Meta.EffectiveForces.Wind.Y;\n    return ret;\n  }\n  /**\n   * 物理演算設定FPSの取得\n   * @return 物理演算設定FPS\n   */\n  getFps() {\n    return this._json.Meta.Fps || 0;\n  }\n  /**\n   * 物理店の管理の個数の取得\n   * @return 物理店の管理の個数\n   */\n  getSubRigCount() {\n    return this._json.Meta.PhysicsSettingCount;\n  }\n  /**\n   * 入力の総合計の取得\n   * @return 入力の総合計\n   */\n  getTotalInputCount() {\n    return this._json.Meta.TotalInputCount;\n  }\n  /**\n   * 出力の総合計の取得\n   * @return 出力の総合計\n   */\n  getTotalOutputCount() {\n    return this._json.Meta.TotalOutputCount;\n  }\n  /**\n   * 物理点の個数の取得\n   * @return 物理点の個数\n   */\n  getVertexCount() {\n    return this._json.Meta.VertexCount;\n  }\n  /**\n   * 正規化された位置の最小値の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 正規化された位置の最小値\n   */\n  getNormalizationPositionMinimumValue(physicsSettingIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Normalization.Position.Minimum;\n  }\n  /**\n   * 正規化された位置の最大値の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 正規化された位置の最大値\n   */\n  getNormalizationPositionMaximumValue(physicsSettingIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Normalization.Position.Maximum;\n  }\n  /**\n   * 正規化された位置のデフォルト値の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 正規化された位置のデフォルト値\n   */\n  getNormalizationPositionDefaultValue(physicsSettingIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Normalization.Position.Default;\n  }\n  /**\n   * 正規化された角度の最小値の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 正規化された角度の最小値\n   */\n  getNormalizationAngleMinimumValue(physicsSettingIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Normalization.Angle.Minimum;\n  }\n  /**\n   * 正規化された角度の最大値の取得\n   * @param physicsSettingIndex\n   * @return 正規化された角度の最大値\n   */\n  getNormalizationAngleMaximumValue(physicsSettingIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Normalization.Angle.Maximum;\n  }\n  /**\n   * 正規化された角度のデフォルト値の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 正規化された角度のデフォルト値\n   */\n  getNormalizationAngleDefaultValue(physicsSettingIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Normalization.Angle.Default;\n  }\n  /**\n   * 入力の個数の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 入力の個数\n   */\n  getInputCount(physicsSettingIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Input.length;\n  }\n  /**\n   * 入力の重みの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param inputIndex 入力のインデックス\n   * @return 入力の重み\n   */\n  getInputWeight(physicsSettingIndex, inputIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Input[inputIndex].Weight;\n  }\n  /**\n   * 入力の反転の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param inputIndex 入力のインデックス\n   * @return 入力の反転\n   */\n  getInputReflect(physicsSettingIndex, inputIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Input[inputIndex].Reflect;\n  }\n  /**\n   * 入力の種類の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param inputIndex 入力のインデックス\n   * @return 入力の種類\n   */\n  getInputType(physicsSettingIndex, inputIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Input[inputIndex].Type;\n  }\n  /**\n   * 入力元のIDの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param inputIndex 入力のインデックス\n   * @return 入力元のID\n   */\n  getInputSourceId(physicsSettingIndex, inputIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Input[inputIndex].Source.Id;\n  }\n  /**\n   * 出力の個数の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @return 出力の個数\n   */\n  getOutputCount(physicsSettingIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Output.length;\n  }\n  /**\n   * 出力の物理点のインデックスの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力の物理点のインデックス\n   */\n  getOutputVertexIndex(physicsSettingIndex, outputIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Output[outputIndex].VertexIndex;\n  }\n  /**\n   * 出力の角度のスケールを取得する\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力の角度のスケール\n   */\n  getOutputAngleScale(physicsSettingIndex, outputIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Output[outputIndex].Scale;\n  }\n  /**\n   * 出力の重みの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力の重み\n   */\n  getOutputWeight(physicsSettingIndex, outputIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Output[outputIndex].Weight;\n  }\n  /**\n   * 出力先のIDの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力先のID\n   */\n  getOutputDestinationId(physicsSettingIndex, outputIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Output[outputIndex].Destination.Id;\n  }\n  /**\n   * 出力の種類の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力の種類\n   */\n  getOutputType(physicsSettingIndex, outputIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Output[outputIndex].Type;\n  }\n  /**\n   * 出力の反転の取得\n   * @param physicsSettingIndex 物理演算のインデックス\n   * @param outputIndex 出力のインデックス\n   * @return 出力の反転\n   */\n  getOutputReflect(physicsSettingIndex, outputIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Output[outputIndex].Reflect;\n  }\n  /**\n   * 物理点の個数の取得\n   * @param physicsSettingIndex 物理演算男設定のインデックス\n   * @return 物理点の個数\n   */\n  getParticleCount(physicsSettingIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Vertices.length;\n  }\n  /**\n   * 物理点の動きやすさの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param vertexIndex 物理点のインデックス\n   * @return 物理点の動きやすさ\n   */\n  getParticleMobility(physicsSettingIndex, vertexIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Vertices[vertexIndex].Mobility;\n  }\n  /**\n   * 物理点の遅れの取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param vertexIndex 物理点のインデックス\n   * @return 物理点の遅れ\n   */\n  getParticleDelay(physicsSettingIndex, vertexIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Vertices[vertexIndex].Delay;\n  }\n  /**\n   * 物理点の加速度の取得\n   * @param physicsSettingIndex 物理演算の設定\n   * @param vertexIndex 物理点のインデックス\n   * @return 物理点の加速度\n   */\n  getParticleAcceleration(physicsSettingIndex, vertexIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Vertices[vertexIndex].Acceleration;\n  }\n  /**\n   * 物理点の距離の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param vertexIndex 物理点のインデックス\n   * @return 物理点の距離\n   */\n  getParticleRadius(physicsSettingIndex, vertexIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Vertices[vertexIndex].Radius;\n  }\n  /**\n   * 物理点の位置の取得\n   * @param physicsSettingIndex 物理演算の設定のインデックス\n   * @param vertexIndex 物理点のインデックス\n   * @return 物理点の位置\n   */\n  getParticlePosition(physicsSettingIndex, vertexIndex) {\n    const ret = new CubismVector2(0, 0);\n    ret.x = this._json.PhysicsSettings[physicsSettingIndex].Vertices[vertexIndex].Position.X;\n    ret.y = this._json.PhysicsSettings[physicsSettingIndex].Vertices[vertexIndex].Position.Y;\n    return ret;\n  }\n  // physics3.jsonデータ\n}\nconst PhysicsTypeTagX = \"X\";\nconst PhysicsTypeTagY = \"Y\";\nconst PhysicsTypeTagAngle = \"Angle\";\nconst AirResistance = 5;\nconst MaximumWeight = 100;\nconst MovementThreshold = 1e-3;\nconst MaxDeltaTime = 5;\nclass CubismPhysics {\n  /**\n   * インスタンスの作成\n   * @param json    physics3.jsonが読み込まれているバッファ\n   * @return 作成されたインスタンス\n   */\n  static create(json) {\n    const ret = new CubismPhysics();\n    ret.parse(json);\n    ret._physicsRig.gravity.y = 0;\n    return ret;\n  }\n  /**\n   * インスタンスを破棄する\n   * @param physics 破棄するインスタンス\n   */\n  static delete(physics) {\n    if (physics != null) {\n      physics.release();\n    }\n  }\n  /**\n   * physics3.jsonをパースする。\n   * @param physicsJson physics3.jsonが読み込まれているバッファ\n   */\n  parse(physicsJson) {\n    this._physicsRig = new CubismPhysicsRig();\n    const json = new CubismPhysicsJson(physicsJson);\n    this._physicsRig.gravity = json.getGravity();\n    this._physicsRig.wind = json.getWind();\n    this._physicsRig.subRigCount = json.getSubRigCount();\n    this._physicsRig.fps = json.getFps();\n    this._currentRigOutputs = [];\n    this._previousRigOutputs = [];\n    let inputIndex = 0, outputIndex = 0, particleIndex = 0;\n    for (let i = 0; i < this._physicsRig.subRigCount; ++i) {\n      const setting = new CubismPhysicsSubRig();\n      setting.normalizationPosition.minimum = json.getNormalizationPositionMinimumValue(i);\n      setting.normalizationPosition.maximum = json.getNormalizationPositionMaximumValue(i);\n      setting.normalizationPosition.defalut = json.getNormalizationPositionDefaultValue(i);\n      setting.normalizationAngle.minimum = json.getNormalizationAngleMinimumValue(i);\n      setting.normalizationAngle.maximum = json.getNormalizationAngleMaximumValue(i);\n      setting.normalizationAngle.defalut = json.getNormalizationAngleDefaultValue(i);\n      setting.inputCount = json.getInputCount(i);\n      setting.baseInputIndex = inputIndex;\n      inputIndex += setting.inputCount;\n      for (let j = 0; j < setting.inputCount; ++j) {\n        const input = new CubismPhysicsInput();\n        input.sourceParameterIndex = -1;\n        input.weight = json.getInputWeight(i, j);\n        input.reflect = json.getInputReflect(i, j);\n        switch (json.getInputType(i, j)) {\n          case PhysicsTypeTagX:\n            input.type = CubismPhysicsSource.CubismPhysicsSource_X;\n            input.getNormalizedParameterValue = getInputTranslationXFromNormalizedParameterValue;\n            break;\n          case PhysicsTypeTagY:\n            input.type = CubismPhysicsSource.CubismPhysicsSource_Y;\n            input.getNormalizedParameterValue = getInputTranslationYFromNormalizedParamterValue;\n            break;\n          case PhysicsTypeTagAngle:\n            input.type = CubismPhysicsSource.CubismPhysicsSource_Angle;\n            input.getNormalizedParameterValue = getInputAngleFromNormalizedParameterValue;\n            break;\n        }\n        input.source.targetType = CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;\n        input.source.id = json.getInputSourceId(i, j);\n        this._physicsRig.inputs.push(input);\n      }\n      setting.outputCount = json.getOutputCount(i);\n      setting.baseOutputIndex = outputIndex;\n      const currentRigOutput = new PhysicsOutput();\n      const previousRigOutput = new PhysicsOutput();\n      for (let j = 0; j < setting.outputCount; ++j) {\n        currentRigOutput.outputs[j] = 0;\n        previousRigOutput.outputs[j] = 0;\n        let output = this._physicsRig.outputs[outputIndex + j];\n        if (!output) {\n          output = new CubismPhysicsOutput();\n          this._physicsRig.outputs[outputIndex + j] = output;\n        }\n        output.destinationParameterIndex = -1;\n        output.vertexIndex = json.getOutputVertexIndex(i, j);\n        output.angleScale = json.getOutputAngleScale(i, j);\n        output.weight = json.getOutputWeight(i, j);\n        output.destination.targetType = CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;\n        output.destination.id = json.getOutputDestinationId(i, j);\n        switch (json.getOutputType(i, j)) {\n          case PhysicsTypeTagX:\n            output.type = CubismPhysicsSource.CubismPhysicsSource_X;\n            output.getValue = getOutputTranslationX;\n            output.getScale = getOutputScaleTranslationX;\n            break;\n          case PhysicsTypeTagY:\n            output.type = CubismPhysicsSource.CubismPhysicsSource_Y;\n            output.getValue = getOutputTranslationY;\n            output.getScale = getOutputScaleTranslationY;\n            break;\n          case PhysicsTypeTagAngle:\n            output.type = CubismPhysicsSource.CubismPhysicsSource_Angle;\n            output.getValue = getOutputAngle;\n            output.getScale = getOutputScaleAngle;\n            break;\n        }\n        output.reflect = json.getOutputReflect(i, j);\n      }\n      this._currentRigOutputs.push(currentRigOutput);\n      this._previousRigOutputs.push(previousRigOutput);\n      outputIndex += setting.outputCount;\n      setting.particleCount = json.getParticleCount(i);\n      setting.baseParticleIndex = particleIndex;\n      particleIndex += setting.particleCount;\n      for (let j = 0; j < setting.particleCount; ++j) {\n        const particle = new CubismPhysicsParticle();\n        particle.mobility = json.getParticleMobility(i, j);\n        particle.delay = json.getParticleDelay(i, j);\n        particle.acceleration = json.getParticleAcceleration(i, j);\n        particle.radius = json.getParticleRadius(i, j);\n        particle.position = json.getParticlePosition(i, j);\n        this._physicsRig.particles.push(particle);\n      }\n      this._physicsRig.settings.push(setting);\n    }\n    this.initialize();\n    json.release();\n  }\n  /**\n   * 現在のパラメータ値で物理演算が安定化する状態を演算する。\n   * @param model 物理演算の結果を適用するモデル\n   */\n  stabilization(model) {\n    var _a, _b, _c, _d;\n    let totalAngle;\n    let weight;\n    let radAngle;\n    let outputValue;\n    const totalTranslation = new CubismVector2();\n    let currentSetting;\n    let currentInputs;\n    let currentOutputs;\n    let currentParticles;\n    let parameterValues;\n    let parameterMaximumValues;\n    let parameterMinimumValues;\n    let parameterDefaultValues;\n    parameterValues = model.getModel().parameters.values;\n    parameterMaximumValues = model.getModel().parameters.maximumValues;\n    parameterMinimumValues = model.getModel().parameters.minimumValues;\n    parameterDefaultValues = model.getModel().parameters.defaultValues;\n    if (((_b = (_a = this._parameterCaches) == null ? void 0 : _a.length) != null ? _b : 0) < model.getParameterCount()) {\n      this._parameterCaches = new Float32Array(model.getParameterCount());\n    }\n    if (((_d = (_c = this._parameterInputCaches) == null ? void 0 : _c.length) != null ? _d : 0) < model.getParameterCount()) {\n      this._parameterInputCaches = new Float32Array(model.getParameterCount());\n    }\n    for (let j = 0; j < model.getParameterCount(); ++j) {\n      this._parameterCaches[j] = parameterValues[j];\n      this._parameterInputCaches[j] = parameterValues[j];\n    }\n    for (let settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {\n      totalAngle = { angle: 0 };\n      totalTranslation.x = 0;\n      totalTranslation.y = 0;\n      currentSetting = this._physicsRig.settings[settingIndex];\n      currentInputs = this._physicsRig.inputs.slice(\n        currentSetting.baseInputIndex\n      );\n      currentOutputs = this._physicsRig.outputs.slice(\n        currentSetting.baseOutputIndex\n      );\n      currentParticles = this._physicsRig.particles.slice(\n        currentSetting.baseParticleIndex\n      );\n      for (let i = 0; i < currentSetting.inputCount; ++i) {\n        weight = currentInputs[i].weight / MaximumWeight;\n        if (currentInputs[i].sourceParameterIndex == -1) {\n          currentInputs[i].sourceParameterIndex = model.getParameterIndex(\n            currentInputs[i].source.id\n          );\n        }\n        currentInputs[i].getNormalizedParameterValue(\n          totalTranslation,\n          totalAngle,\n          parameterValues[currentInputs[i].sourceParameterIndex],\n          parameterMinimumValues[currentInputs[i].sourceParameterIndex],\n          parameterMaximumValues[currentInputs[i].sourceParameterIndex],\n          parameterDefaultValues[currentInputs[i].sourceParameterIndex],\n          currentSetting.normalizationPosition,\n          currentSetting.normalizationAngle,\n          currentInputs[i].reflect,\n          weight\n        );\n        this._parameterCaches[currentInputs[i].sourceParameterIndex] = parameterValues[currentInputs[i].sourceParameterIndex];\n      }\n      radAngle = CubismMath.degreesToRadian(-totalAngle.angle);\n      totalTranslation.x = totalTranslation.x * CubismMath.cos(radAngle) - totalTranslation.y * CubismMath.sin(radAngle);\n      totalTranslation.y = totalTranslation.x * CubismMath.sin(radAngle) + totalTranslation.y * CubismMath.cos(radAngle);\n      updateParticlesForStabilization(\n        currentParticles,\n        currentSetting.particleCount,\n        totalTranslation,\n        totalAngle.angle,\n        this._options.wind,\n        MovementThreshold * currentSetting.normalizationPosition.maximum\n      );\n      for (let i = 0; i < currentSetting.outputCount; ++i) {\n        const particleIndex = currentOutputs[i].vertexIndex;\n        if (currentOutputs[i].destinationParameterIndex == -1) {\n          currentOutputs[i].destinationParameterIndex = model.getParameterIndex(\n            currentOutputs[i].destination.id\n          );\n        }\n        if (particleIndex < 1 || particleIndex >= currentSetting.particleCount) {\n          continue;\n        }\n        let translation = new CubismVector2();\n        translation = currentParticles[particleIndex].position.substract(\n          currentParticles[particleIndex - 1].position\n        );\n        outputValue = currentOutputs[i].getValue(\n          translation,\n          currentParticles,\n          particleIndex,\n          currentOutputs[i].reflect,\n          this._options.gravity\n        );\n        this._currentRigOutputs[settingIndex].outputs[i] = outputValue;\n        this._previousRigOutputs[settingIndex].outputs[i] = outputValue;\n        const destinationParameterIndex = currentOutputs[i].destinationParameterIndex;\n        const outParameterCaches = !Float32Array.prototype.slice && \"subarray\" in Float32Array.prototype ? JSON.parse(\n          JSON.stringify(\n            parameterValues.subarray(destinationParameterIndex)\n          )\n        ) : parameterValues.slice(destinationParameterIndex);\n        updateOutputParameterValue(\n          outParameterCaches,\n          parameterMinimumValues[destinationParameterIndex],\n          parameterMaximumValues[destinationParameterIndex],\n          outputValue,\n          currentOutputs[i]\n        );\n        for (let offset = destinationParameterIndex, outParamIndex = 0; offset < this._parameterCaches.length; offset++, outParamIndex++) {\n          parameterValues[offset] = this._parameterCaches[offset] = outParameterCaches[outParamIndex];\n        }\n      }\n    }\n  }\n  /**\n   * 物理演算の評価\n   *\n   * Pendulum interpolation weights\n   *\n   * 振り子の計算結果は保存され、パラメータへの出力は保存された前回の結果で補間されます。\n   * The result of the pendulum calculation is saved and\n   * the output to the parameters is interpolated with the saved previous result of the pendulum calculation.\n   *\n   * 図で示すと[1]と[2]で補間されます。\n   * The figure shows the interpolation between [1] and [2].\n   *\n   * 補間の重みは最新の振り子計算タイミングと次回のタイミングの間で見た現在時間で決定する。\n   * The weight of the interpolation are determined by the current time seen between\n   * the latest pendulum calculation timing and the next timing.\n   *\n   * 図で示すと[2]と[4]の間でみた(3)の位置の重みになる。\n   * Figure shows the weight of position (3) as seen between [2] and [4].\n   *\n   * 解釈として振り子計算のタイミングと重み計算のタイミングがズレる。\n   * As an interpretation, the pendulum calculation and weights are misaligned.\n   *\n   * physics3.jsonにFPS情報が存在しない場合は常に前の振り子状態で設定される。\n   * If there is no FPS information in physics3.json, it is always set in the previous pendulum state.\n   *\n   * この仕様は補間範囲を逸脱したことが原因の震えたような見た目を回避を目的にしている。\n   * The purpose of this specification is to avoid the quivering appearance caused by deviations from the interpolation range.\n   *\n   * ------------ time -------------->\n   *\n   *                 |+++++|------| <- weight\n   * ==[1]====#=====[2]---(3)----(4)\n   *          ^ output contents\n   *\n   * 1:_previousRigOutputs\n   * 2:_currentRigOutputs\n   * 3:_currentRemainTime (now rendering)\n   * 4:next particles timing\n   * @param model 物理演算の結果を適用するモデル\n   * @param deltaTimeSeconds デルタ時間[秒]\n   */\n  evaluate(model, deltaTimeSeconds) {\n    var _a, _b, _c, _d;\n    let totalAngle;\n    let weight;\n    let radAngle;\n    let outputValue;\n    const totalTranslation = new CubismVector2();\n    let currentSetting;\n    let currentInputs;\n    let currentOutputs;\n    let currentParticles;\n    if (0 >= deltaTimeSeconds) {\n      return;\n    }\n    let parameterValues;\n    let parameterMaximumValues;\n    let parameterMinimumValues;\n    let parameterDefaultValues;\n    let physicsDeltaTime;\n    this._currentRemainTime += deltaTimeSeconds;\n    if (this._currentRemainTime > MaxDeltaTime) {\n      this._currentRemainTime = 0;\n    }\n    parameterValues = model.getModel().parameters.values;\n    parameterMaximumValues = model.getModel().parameters.maximumValues;\n    parameterMinimumValues = model.getModel().parameters.minimumValues;\n    parameterDefaultValues = model.getModel().parameters.defaultValues;\n    if (((_b = (_a = this._parameterCaches) == null ? void 0 : _a.length) != null ? _b : 0) < model.getParameterCount()) {\n      this._parameterCaches = new Float32Array(model.getParameterCount());\n    }\n    if (((_d = (_c = this._parameterInputCaches) == null ? void 0 : _c.length) != null ? _d : 0) < model.getParameterCount()) {\n      this._parameterInputCaches = new Float32Array(model.getParameterCount());\n      for (let j = 0; j < model.getParameterCount(); ++j) {\n        this._parameterInputCaches[j] = parameterValues[j];\n      }\n    }\n    if (this._physicsRig.fps > 0) {\n      physicsDeltaTime = 1 / this._physicsRig.fps;\n    } else {\n      physicsDeltaTime = deltaTimeSeconds;\n    }\n    while (this._currentRemainTime >= physicsDeltaTime) {\n      for (let settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {\n        currentSetting = this._physicsRig.settings[settingIndex];\n        currentOutputs = this._physicsRig.outputs.slice(\n          currentSetting.baseOutputIndex\n        );\n        for (let i = 0; i < currentSetting.outputCount; ++i) {\n          this._previousRigOutputs[settingIndex].outputs[i] = this._currentRigOutputs[settingIndex].outputs[i];\n        }\n      }\n      const inputWeight = physicsDeltaTime / this._currentRemainTime;\n      for (let j = 0; j < model.getParameterCount(); ++j) {\n        this._parameterCaches[j] = this._parameterInputCaches[j] * (1 - inputWeight) + parameterValues[j] * inputWeight;\n        this._parameterInputCaches[j] = this._parameterCaches[j];\n      }\n      for (let settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {\n        totalAngle = { angle: 0 };\n        totalTranslation.x = 0;\n        totalTranslation.y = 0;\n        currentSetting = this._physicsRig.settings[settingIndex];\n        currentInputs = this._physicsRig.inputs.slice(\n          currentSetting.baseInputIndex\n        );\n        currentOutputs = this._physicsRig.outputs.slice(\n          currentSetting.baseOutputIndex\n        );\n        currentParticles = this._physicsRig.particles.slice(\n          currentSetting.baseParticleIndex\n        );\n        for (let i = 0; i < currentSetting.inputCount; ++i) {\n          weight = currentInputs[i].weight / MaximumWeight;\n          if (currentInputs[i].sourceParameterIndex == -1) {\n            currentInputs[i].sourceParameterIndex = model.getParameterIndex(\n              currentInputs[i].source.id\n            );\n          }\n          currentInputs[i].getNormalizedParameterValue(\n            totalTranslation,\n            totalAngle,\n            this._parameterCaches[currentInputs[i].sourceParameterIndex],\n            parameterMinimumValues[currentInputs[i].sourceParameterIndex],\n            parameterMaximumValues[currentInputs[i].sourceParameterIndex],\n            parameterDefaultValues[currentInputs[i].sourceParameterIndex],\n            currentSetting.normalizationPosition,\n            currentSetting.normalizationAngle,\n            currentInputs[i].reflect,\n            weight\n          );\n        }\n        radAngle = CubismMath.degreesToRadian(-totalAngle.angle);\n        totalTranslation.x = totalTranslation.x * CubismMath.cos(radAngle) - totalTranslation.y * CubismMath.sin(radAngle);\n        totalTranslation.y = totalTranslation.x * CubismMath.sin(radAngle) + totalTranslation.y * CubismMath.cos(radAngle);\n        updateParticles(\n          currentParticles,\n          currentSetting.particleCount,\n          totalTranslation,\n          totalAngle.angle,\n          this._options.wind,\n          MovementThreshold * currentSetting.normalizationPosition.maximum,\n          physicsDeltaTime,\n          AirResistance\n        );\n        for (let i = 0; i < currentSetting.outputCount; ++i) {\n          const particleIndex = currentOutputs[i].vertexIndex;\n          if (currentOutputs[i].destinationParameterIndex == -1) {\n            currentOutputs[i].destinationParameterIndex = model.getParameterIndex(currentOutputs[i].destination.id);\n          }\n          if (particleIndex < 1 || particleIndex >= currentSetting.particleCount) {\n            continue;\n          }\n          const translation = new CubismVector2();\n          translation.x = currentParticles[particleIndex].position.x - currentParticles[particleIndex - 1].position.x;\n          translation.y = currentParticles[particleIndex].position.y - currentParticles[particleIndex - 1].position.y;\n          outputValue = currentOutputs[i].getValue(\n            translation,\n            currentParticles,\n            particleIndex,\n            currentOutputs[i].reflect,\n            this._options.gravity\n          );\n          this._currentRigOutputs[settingIndex].outputs[i] = outputValue;\n          const destinationParameterIndex = currentOutputs[i].destinationParameterIndex;\n          const outParameterCaches = !Float32Array.prototype.slice && \"subarray\" in Float32Array.prototype ? JSON.parse(\n            JSON.stringify(\n              this._parameterCaches.subarray(destinationParameterIndex)\n            )\n          ) : this._parameterCaches.slice(destinationParameterIndex);\n          updateOutputParameterValue(\n            outParameterCaches,\n            parameterMinimumValues[destinationParameterIndex],\n            parameterMaximumValues[destinationParameterIndex],\n            outputValue,\n            currentOutputs[i]\n          );\n          for (let offset = destinationParameterIndex, outParamIndex = 0; offset < this._parameterCaches.length; offset++, outParamIndex++) {\n            this._parameterCaches[offset] = outParameterCaches[outParamIndex];\n          }\n        }\n      }\n      this._currentRemainTime -= physicsDeltaTime;\n    }\n    const alpha = this._currentRemainTime / physicsDeltaTime;\n    this.interpolate(model, alpha);\n  }\n  /**\n   * 物理演算結果の適用\n   * 振り子演算の最新の結果と一つ前の結果から指定した重みで適用する。\n   * @param model 物理演算の結果を適用するモデル\n   * @param weight 最新結果の重み\n   */\n  interpolate(model, weight) {\n    let currentOutputs;\n    let currentSetting;\n    let parameterValues;\n    let parameterMaximumValues;\n    let parameterMinimumValues;\n    parameterValues = model.getModel().parameters.values;\n    parameterMaximumValues = model.getModel().parameters.maximumValues;\n    parameterMinimumValues = model.getModel().parameters.minimumValues;\n    for (let settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {\n      currentSetting = this._physicsRig.settings[settingIndex];\n      currentOutputs = this._physicsRig.outputs.slice(\n        currentSetting.baseOutputIndex\n      );\n      for (let i = 0; i < currentSetting.outputCount; ++i) {\n        if (currentOutputs[i].destinationParameterIndex == -1) {\n          continue;\n        }\n        const destinationParameterIndex = currentOutputs[i].destinationParameterIndex;\n        const outParameterValues = !Float32Array.prototype.slice && \"subarray\" in Float32Array.prototype ? JSON.parse(\n          JSON.stringify(\n            parameterValues.subarray(destinationParameterIndex)\n          )\n        ) : parameterValues.slice(destinationParameterIndex);\n        updateOutputParameterValue(\n          outParameterValues,\n          parameterMinimumValues[destinationParameterIndex],\n          parameterMaximumValues[destinationParameterIndex],\n          this._previousRigOutputs[settingIndex].outputs[i] * (1 - weight) + this._currentRigOutputs[settingIndex].outputs[i] * weight,\n          currentOutputs[i]\n        );\n        for (let offset = destinationParameterIndex, outParamIndex = 0; offset < parameterValues.length; offset++, outParamIndex++) {\n          parameterValues[offset] = outParameterValues[outParamIndex];\n        }\n      }\n    }\n  }\n  /**\n   * オプションの設定\n   * @param options オプション\n   */\n  setOptions(options) {\n    this._options = options;\n  }\n  /**\n   * オプションの取得\n   * @return オプション\n   */\n  getOption() {\n    return this._options;\n  }\n  /**\n   * コンストラクタ\n   */\n  constructor() {\n    this._options = new Options();\n    this._options.gravity.y = -1;\n    this._options.gravity.x = 0;\n    this._options.wind.x = 0;\n    this._options.wind.y = 0;\n    this._currentRigOutputs = [];\n    this._previousRigOutputs = [];\n    this._currentRemainTime = 0;\n  }\n  /**\n   * デストラクタ相当の処理\n   */\n  release() {\n    this._physicsRig = void 0;\n  }\n  /**\n   * 初期化する\n   */\n  initialize() {\n    let strand;\n    let currentSetting;\n    let radius;\n    for (let settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {\n      currentSetting = this._physicsRig.settings[settingIndex];\n      strand = this._physicsRig.particles.slice(\n        currentSetting.baseParticleIndex\n      );\n      strand[0].initialPosition = new CubismVector2(0, 0);\n      strand[0].lastPosition = new CubismVector2(\n        strand[0].initialPosition.x,\n        strand[0].initialPosition.y\n      );\n      strand[0].lastGravity = new CubismVector2(0, -1);\n      strand[0].lastGravity.y *= -1;\n      strand[0].velocity = new CubismVector2(0, 0);\n      strand[0].force = new CubismVector2(0, 0);\n      for (let i = 1; i < currentSetting.particleCount; ++i) {\n        radius = new CubismVector2(0, 0);\n        radius.y = strand[i].radius;\n        strand[i].initialPosition = new CubismVector2(\n          strand[i - 1].initialPosition.x + radius.x,\n          strand[i - 1].initialPosition.y + radius.y\n        );\n        strand[i].position = new CubismVector2(\n          strand[i].initialPosition.x,\n          strand[i].initialPosition.y\n        );\n        strand[i].lastPosition = new CubismVector2(\n          strand[i].initialPosition.x,\n          strand[i].initialPosition.y\n        );\n        strand[i].lastGravity = new CubismVector2(0, -1);\n        strand[i].lastGravity.y *= -1;\n        strand[i].velocity = new CubismVector2(0, 0);\n        strand[i].force = new CubismVector2(0, 0);\n      }\n    }\n  }\n  ///< UpdateParticlesが動くときの入力をキャッシュ\n}\nclass Options {\n  constructor() {\n    this.gravity = new CubismVector2(0, 0);\n    this.wind = new CubismVector2(0, 0);\n  }\n  // 風の方向\n}\nclass PhysicsOutput {\n  constructor() {\n    this.outputs = [];\n  }\n  // 物理演算出力結果\n}\nfunction getInputTranslationXFromNormalizedParameterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition, normalizationAngle, isInverted, weight) {\n  targetTranslation.x += normalizeParameterValue(\n    value,\n    parameterMinimumValue,\n    parameterMaximumValue,\n    parameterDefaultValue,\n    normalizationPosition.minimum,\n    normalizationPosition.maximum,\n    normalizationPosition.defalut,\n    isInverted\n  ) * weight;\n}\nfunction getInputTranslationYFromNormalizedParamterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition, normalizationAngle, isInverted, weight) {\n  targetTranslation.y += normalizeParameterValue(\n    value,\n    parameterMinimumValue,\n    parameterMaximumValue,\n    parameterDefaultValue,\n    normalizationPosition.minimum,\n    normalizationPosition.maximum,\n    normalizationPosition.defalut,\n    isInverted\n  ) * weight;\n}\nfunction getInputAngleFromNormalizedParameterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizaitionPosition, normalizationAngle, isInverted, weight) {\n  targetAngle.angle += normalizeParameterValue(\n    value,\n    parameterMinimumValue,\n    parameterMaximumValue,\n    parameterDefaultValue,\n    normalizationAngle.minimum,\n    normalizationAngle.maximum,\n    normalizationAngle.defalut,\n    isInverted\n  ) * weight;\n}\nfunction getOutputTranslationX(translation, particles, particleIndex, isInverted, parentGravity) {\n  let outputValue = translation.x;\n  if (isInverted) {\n    outputValue *= -1;\n  }\n  return outputValue;\n}\nfunction getOutputTranslationY(translation, particles, particleIndex, isInverted, parentGravity) {\n  let outputValue = translation.y;\n  if (isInverted) {\n    outputValue *= -1;\n  }\n  return outputValue;\n}\nfunction getOutputAngle(translation, particles, particleIndex, isInverted, parentGravity) {\n  let outputValue;\n  if (particleIndex >= 2) {\n    parentGravity = particles[particleIndex - 1].position.substract(\n      particles[particleIndex - 2].position\n    );\n  } else {\n    parentGravity = parentGravity.multiplyByScaler(-1);\n  }\n  outputValue = CubismMath.directionToRadian(parentGravity, translation);\n  if (isInverted) {\n    outputValue *= -1;\n  }\n  return outputValue;\n}\nfunction getRangeValue(min, max) {\n  return Math.abs(Math.max(min, max) - Math.min(min, max));\n}\nfunction getDefaultValue(min, max) {\n  const minValue = Math.min(min, max);\n  return minValue + getRangeValue(min, max) / 2;\n}\nfunction getOutputScaleTranslationX(translationScale, angleScale) {\n  return translationScale.x;\n}\nfunction getOutputScaleTranslationY(translationScale, angleScale) {\n  return translationScale.y;\n}\nfunction getOutputScaleAngle(translationScale, angleScale) {\n  return angleScale;\n}\nfunction updateParticles(strand, strandCount, totalTranslation, totalAngle, windDirection, thresholdValue, deltaTimeSeconds, airResistance) {\n  let totalRadian;\n  let delay;\n  let radian;\n  let currentGravity;\n  let direction = new CubismVector2(0, 0);\n  let velocity = new CubismVector2(0, 0);\n  let force = new CubismVector2(0, 0);\n  let newDirection = new CubismVector2(0, 0);\n  strand[0].position = new CubismVector2(\n    totalTranslation.x,\n    totalTranslation.y\n  );\n  totalRadian = CubismMath.degreesToRadian(totalAngle);\n  currentGravity = CubismMath.radianToDirection(totalRadian);\n  currentGravity.normalize();\n  for (let i = 1; i < strandCount; ++i) {\n    strand[i].force = currentGravity.multiplyByScaler(strand[i].acceleration).add(windDirection);\n    strand[i].lastPosition = new CubismVector2(\n      strand[i].position.x,\n      strand[i].position.y\n    );\n    delay = strand[i].delay * deltaTimeSeconds * 30;\n    direction = strand[i].position.substract(strand[i - 1].position);\n    radian = CubismMath.directionToRadian(strand[i].lastGravity, currentGravity) / airResistance;\n    direction.x = CubismMath.cos(radian) * direction.x - direction.y * CubismMath.sin(radian);\n    direction.y = CubismMath.sin(radian) * direction.x + direction.y * CubismMath.cos(radian);\n    strand[i].position = strand[i - 1].position.add(direction);\n    velocity = strand[i].velocity.multiplyByScaler(delay);\n    force = strand[i].force.multiplyByScaler(delay).multiplyByScaler(delay);\n    strand[i].position = strand[i].position.add(velocity).add(force);\n    newDirection = strand[i].position.substract(strand[i - 1].position);\n    newDirection.normalize();\n    strand[i].position = strand[i - 1].position.add(\n      newDirection.multiplyByScaler(strand[i].radius)\n    );\n    if (CubismMath.abs(strand[i].position.x) < thresholdValue) {\n      strand[i].position.x = 0;\n    }\n    if (delay != 0) {\n      strand[i].velocity = strand[i].position.substract(strand[i].lastPosition);\n      strand[i].velocity = strand[i].velocity.divisionByScalar(delay);\n      strand[i].velocity = strand[i].velocity.multiplyByScaler(\n        strand[i].mobility\n      );\n    }\n    strand[i].force = new CubismVector2(0, 0);\n    strand[i].lastGravity = new CubismVector2(\n      currentGravity.x,\n      currentGravity.y\n    );\n  }\n}\nfunction updateParticlesForStabilization(strand, strandCount, totalTranslation, totalAngle, windDirection, thresholdValue) {\n  let totalRadian;\n  let currentGravity;\n  let force = new CubismVector2(0, 0);\n  strand[0].position = new CubismVector2(\n    totalTranslation.x,\n    totalTranslation.y\n  );\n  totalRadian = CubismMath.degreesToRadian(totalAngle);\n  currentGravity = CubismMath.radianToDirection(totalRadian);\n  currentGravity.normalize();\n  for (let i = 1; i < strandCount; ++i) {\n    strand[i].force = currentGravity.multiplyByScaler(strand[i].acceleration).add(windDirection);\n    strand[i].lastPosition = new CubismVector2(\n      strand[i].position.x,\n      strand[i].position.y\n    );\n    strand[i].velocity = new CubismVector2(0, 0);\n    force = strand[i].force;\n    force.normalize();\n    force = force.multiplyByScaler(strand[i].radius);\n    strand[i].position = strand[i - 1].position.add(force);\n    if (CubismMath.abs(strand[i].position.x) < thresholdValue) {\n      strand[i].position.x = 0;\n    }\n    strand[i].force = new CubismVector2(0, 0);\n    strand[i].lastGravity = new CubismVector2(\n      currentGravity.x,\n      currentGravity.y\n    );\n  }\n}\nfunction updateOutputParameterValue(parameterValue, parameterValueMinimum, parameterValueMaximum, translation, output) {\n  let outputScale;\n  let value;\n  let weight;\n  outputScale = output.getScale(output.translationScale, output.angleScale);\n  value = translation * outputScale;\n  if (value < parameterValueMinimum) {\n    if (value < output.valueBelowMinimum) {\n      output.valueBelowMinimum = value;\n    }\n    value = parameterValueMinimum;\n  } else if (value > parameterValueMaximum) {\n    if (value > output.valueExceededMaximum) {\n      output.valueExceededMaximum = value;\n    }\n    value = parameterValueMaximum;\n  }\n  weight = output.weight / MaximumWeight;\n  if (weight >= 1) {\n    parameterValue[0] = value;\n  } else {\n    value = parameterValue[0] * (1 - weight) + value * weight;\n    parameterValue[0] = value;\n  }\n}\nfunction normalizeParameterValue(value, parameterMinimum, parameterMaximum, parameterDefault, normalizedMinimum, normalizedMaximum, normalizedDefault, isInverted) {\n  let result = 0;\n  const maxValue = CubismMath.max(parameterMaximum, parameterMinimum);\n  if (maxValue < value) {\n    value = maxValue;\n  }\n  const minValue = CubismMath.min(parameterMaximum, parameterMinimum);\n  if (minValue > value) {\n    value = minValue;\n  }\n  const minNormValue = CubismMath.min(\n    normalizedMinimum,\n    normalizedMaximum\n  );\n  const maxNormValue = CubismMath.max(\n    normalizedMinimum,\n    normalizedMaximum\n  );\n  const middleNormValue = normalizedDefault;\n  const middleValue = getDefaultValue(minValue, maxValue);\n  const paramValue = value - middleValue;\n  switch (Math.sign(paramValue)) {\n    case 1: {\n      const nLength = maxNormValue - middleNormValue;\n      const pLength = maxValue - middleValue;\n      if (pLength != 0) {\n        result = paramValue * (nLength / pLength);\n        result += middleNormValue;\n      }\n      break;\n    }\n    case -1: {\n      const nLength = minNormValue - middleNormValue;\n      const pLength = minValue - middleValue;\n      if (pLength != 0) {\n        result = paramValue * (nLength / pLength);\n        result += middleNormValue;\n      }\n      break;\n    }\n    case 0: {\n      result = middleNormValue;\n      break;\n    }\n  }\n  return isInverted ? result : result * -1;\n}\nLive2DFactory.registerRuntime({\n  version: 4,\n  ready: cubism4Ready,\n  test(source) {\n    return source instanceof Cubism4ModelSettings || Cubism4ModelSettings.isValidJSON(source);\n  },\n  isValidMoc(modelData) {\n    if (modelData.byteLength < 4) {\n      return false;\n    }\n    const view = new Int8Array(modelData, 0, 4);\n    return String.fromCharCode(...view) === \"MOC3\";\n  },\n  createModelSettings(json) {\n    return new Cubism4ModelSettings(json);\n  },\n  createCoreModel(data, options) {\n    const moc = CubismMoc.create(data, !!(options == null ? void 0 : options.checkMocConsistency));\n    try {\n      const model = moc.createModel();\n      model.__moc = moc;\n      return model;\n    } catch (e) {\n      try {\n        moc.release();\n      } catch (e2) {\n      }\n      throw e;\n    }\n  },\n  createInternalModel(coreModel, settings, options) {\n    const model = new Cubism4InternalModel(coreModel, settings, options);\n    const coreModelWithMoc = coreModel;\n    if (coreModelWithMoc.__moc) {\n      model.__moc = coreModelWithMoc.__moc;\n      delete coreModelWithMoc.__moc;\n      model.once(\"destroy\", releaseMoc);\n    }\n    return model;\n  },\n  createPhysics(coreModel, data) {\n    return CubismPhysics.create(data);\n  },\n  createPose(coreModel, data) {\n    return CubismPose.create(data);\n  }\n});\nfunction releaseMoc() {\n  var _a;\n  (_a = this.__moc) == null ? void 0 : _a.release();\n}\nexport {\n  Cubism2ExpressionManager,\n  Cubism2InternalModel,\n  Cubism2ModelSettings,\n  Cubism2MotionManager,\n  Cubism4ExpressionManager,\n  Cubism4InternalModel,\n  Cubism4ModelSettings,\n  Cubism4MotionManager,\n  ExpressionManager,\n  FileLoader,\n  FocusController,\n  InternalModel,\n  LOGICAL_HEIGHT,\n  LOGICAL_WIDTH,\n  Live2DExpression,\n  Live2DEyeBlink,\n  Live2DFactory,\n  Live2DLoader,\n  Live2DModel,\n  Live2DPhysics,\n  Live2DPose,\n  Live2DTransform,\n  ModelSettings,\n  MotionManager,\n  MotionPreloadStrategy,\n  MotionPriority,\n  MotionState,\n  SoundManager,\n  VERSION,\n  XHRLoader,\n  ZipLoader,\n  applyMixins,\n  clamp,\n  config,\n  copyArray,\n  copyProperty,\n  cubism4Ready,\n  folderName,\n  logger,\n  rand,\n  remove,\n  startUpCubism4\n};\n"],
  "mappings": "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",
  "names": ["_XHRLoader", "_ZipLoader", "_FileLoader", "_Live2DFactory", "_Automator", "_CubismMath", "_CubismEyeBlink"]
}
